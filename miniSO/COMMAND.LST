Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E9C1AB734D09636F6D6D616E642E63
      7					     ?debug  C E9EE217847086D696E69534F2E68
      8					     ?debug  C E9D39D734D09636F6D6D616E642E68
      9					     ?debug  C E969A4734D056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  009Cr			     dw	     DGROUP:s@
     28	0004  009Er			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00C9r			     dw	     DGROUP:s@+45
     31	000A  00CEr			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  00F6r			     dw	     DGROUP:s@+90
     34	0010  00FAr			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0122r			     dw	     DGROUP:s@+134
     37	0016  0127r			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  0145r			     dw	     DGROUP:s@+169
     40	001C  014Ar			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  0168r			     dw	     DGROUP:s@+204
     43	0022  016Cr			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  018Ar			     dw	     DGROUP:s@+238
     46	0028  0190r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01ACr			     dw	     DGROUP:s@+272
     49	002E  01B3r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01D8r			     dw	     DGROUP:s@+316
     52	0034  01DDr			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0200r			     dw	     DGROUP:s@+356
     55	003A  0205r			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  0228r			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 2
command.ASM



     58	0040  022Br			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0261r			     dw	     DGROUP:s@+453
     61	0046  0266r			     dw	     DGROUP:s@+458
     62	0048  0C63r			     dw	     _cmd_kill
     63	004A  0291r			     dw	     DGROUP:s@+501
     64	004C  0296r			     dw	     DGROUP:s@+506
     65	004E  0FDCr			     dw	     _cmd_demo
     66	0050  02CFr			     dw	     DGROUP:s@+563
     67	0052  02D3r			     dw	     DGROUP:s@+567
     68	0054  0CABr			     dw	     _cmd_set
     69	0056  0312r			     dw	     DGROUP:s@+630
     70	0058  0318r			     dw	     DGROUP:s@+636
     71	005A  0D44r			     dw	     _cmd_unset
     72	005C  0338r			     dw	     DGROUP:s@+668
     73	005E  033Dr			     dw	     DGROUP:s@+673
     74	0060  0D84r			     dw	     _cmd_echo
     75	0062  0360r			     dw	     DGROUP:s@+708
     76	0064  0368r			     dw	     DGROUP:s@+716
     77	0066  1030r			     dw	     _cmd_waitpid
     78	0068  0399r			     dw	     DGROUP:s@+765
     79	006A  039Er			     dw	     DGROUP:s@+770
     80	006C  10BFr			     dw	     _cmd_wait
     81	006E  03CBr			     dw	     DGROUP:s@+815
     82	0070  03D1r			     dw	     DGROUP:s@+821
     83	0072  1137r			     dw	     _cmd_semls
     84	0074  03FAr			     dw	     DGROUP:s@+862
     85	0076  0404r			     dw	     DGROUP:s@+872
     86	0078  122Dr			     dw	     _cmd_semcreate
     87	007A  0420r			     dw	     DGROUP:s@+900
     88	007C  0428r			     dw	     DGROUP:s@+908
     89	007E  13C5r			     dw	     _cmd_semtest
     90	0080  0457r			     dw	     DGROUP:s@+955
     91	0082  045Dr			     dw	     DGROUP:s@+961
     92	0084  1419r			     dw	     _cmd_semup
     93	0086  048Er			     dw	     DGROUP:s@+1010
     94	0088  0499r			     dw	     DGROUP:s@+1021
     95	008A  1452r			     dw	     _cmd_semdestroy
     96	008C  04B7r			     dw	     DGROUP:s@+1051
     97	008E  04BEr			     dw	     DGROUP:s@+1058
     98	0090  1677r			     dw	     _cmd_create
     99	0092  04D7r			     dw	     DGROUP:s@+1083
    100	0094  04DDr			     dw	     DGROUP:s@+1089
    101	0096  1747r			     dw	     _cmd_start
    102	0098			     _DATA   ends
    103	0000			     _TEXT   segment byte public 'CODE'
    104					;
    105					;    void command()
    106					;
    107					     assume  cs:_TEXT
    108	0000			     _command	     proc    near
    109	0000  55			     push    bp
    110	0001  8B EC			     mov     bp,sp
    111	0003  83 EC 22			     sub     sp,34
    112	0006  56			     push    si
    113	0007  57			     push    di
    114					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 3
command.ASM



    115					;    {
    116					;      char car,str[10];
    117					;      int numcar;
    118					;      int i,achou,pos;
    119					;      int novalinha,res,argc;
    120					;      char far	*ptrline,far *var;
    121					;
    122					;      /* InicializaÁıes... */
    123					;      numcar =	0;
    124					;
    125	0008  33 F6			     xor     si,si
    126					;
    127					;      end_command = 0;
    128					;
    129	000A  C7 06 0627r 0000		     mov     word ptr DGROUP:end_command,0
    130					;
    131					;      history_ini = 0;
    132					;
    133	0010  C7 06 0210r 0000		     mov     word ptr DGROUP:history_ini,0
    134					;
    135					;      history_nxt = 0;
    136					;
    137	0016  C7 06 020Er 0000		     mov     word ptr DGROUP:history_nxt,0
    138					;
    139					;      history_pos = -1;
    140					;
    141	001C  C7 06 020Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    142					;
    143					;      /* Mensagem inicial */
    144					;      setcolor(7);
    145					;
    146	0022  B8 0007			     mov     ax,7
    147	0025  50			     push    ax
    148	0026  E8 0000e			     call    near ptr _setcolor
    149	0029  59			     pop     cx
    150					;
    151					;      clrscr();
    152					;
    153	002A  E8 0000e			     call    near ptr _clrscr
    154					;
    155					;      setcolor(LOGOCOLOR);
    156					;
    157	002D  B8 0001			     mov     ax,1
    158	0030  50			     push    ax
    159	0031  E8 0000e			     call    near ptr _setcolor
    160	0034  59			     pop     cx
    161					;
    162					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    163					;
    164	0035  1E			     push    ds
    165	0036  B8 0507r			     mov     ax,offset DGROUP:s@+1131
    166	0039  50			     push    ax
    167	003A  E8 0000e			     call    near ptr _putstr
    168	003D  59			     pop     cx
    169	003E  59			     pop     cx
    170					;
    171					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 4
command.ASM



    172				     Operacional\n"); setcolor(LOGOCOLOR);
    173					;
    174	003F  1E			     push    ds
    175	0040  B8 052Ar			     mov     ax,offset DGROUP:s@+1166
    176	0043  50			     push    ax
    177	0044  E8 0000e			     call    near ptr _putstr
    178	0047  59			     pop     cx
    179	0048  59			     pop     cx
    180	0049  B8 0007			     mov     ax,7
    181	004C  50			     push    ax
    182	004D  E8 0000e			     call    near ptr _setcolor
    183	0050  59			     pop     cx
    184	0051  1E			     push    ds
    185	0052  B8 054Er			     mov     ax,offset DGROUP:s@+1202
    186	0055  50			     push    ax
    187	0056  E8 0000e			     call    near ptr _putstr
    188	0059  59			     pop     cx
    189	005A  59			     pop     cx
    190	005B  B8 0001			     mov     ax,1
    191	005E  50			     push    ax
    192	005F  E8 0000e			     call    near ptr _setcolor
    193	0062  59			     pop     cx
    194					;
    195					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    196				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    197					;
    198	0063  1E			     push    ds
    199	0064  B8 0568r			     mov     ax,offset DGROUP:s@+1228
    200	0067  50			     push    ax
    201	0068  E8 0000e			     call    near ptr _putstr
    202	006B  59			     pop     cx
    203	006C  59			     pop     cx
    204	006D  B8 0007			     mov     ax,7
    205	0070  50			     push    ax
    206	0071  E8 0000e			     call    near ptr _setcolor
    207	0074  59			     pop     cx
    208	0075  1E			     push    ds
    209	0076  B8 058Cr			     mov     ax,offset DGROUP:s@+1264
    210	0079  50			     push    ax
    211	007A  E8 0000e			     call    near ptr _putstr
    212	007D  59			     pop     cx
    213	007E  59			     pop     cx
    214	007F  1E			     push    ds
    215	0080  B8 0590r			     mov     ax,offset DGROUP:s@+1268
    216	0083  50			     push    ax
    217	0084  E8 0000e			     call    near ptr _putstr
    218	0087  59			     pop     cx
    219	0088  59			     pop     cx
    220	0089  1E			     push    ds
    221	008A  B8 0595r			     mov     ax,offset DGROUP:s@+1273
    222	008D  50			     push    ax
    223	008E  E8 0000e			     call    near ptr _putstr
    224	0091  59			     pop     cx
    225	0092  59			     pop     cx
    226	0093  B8 0001			     mov     ax,1
    227	0096  50			     push    ax
    228	0097  E8 0000e			     call    near ptr _setcolor
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 5
command.ASM



    229	009A  59			     pop     cx
    230					;
    231					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    232				     Teodorowitsch\n");
    233					;
    234	009B  1E			     push    ds
    235	009C  B8 0597r			     mov     ax,offset DGROUP:s@+1275
    236	009F  50			     push    ax
    237	00A0  E8 0000e			     call    near ptr _putstr
    238	00A3  59			     pop     cx
    239	00A4  59			     pop     cx
    240	00A5  B8 0007			     mov     ax,7
    241	00A8  50			     push    ax
    242	00A9  E8 0000e			     call    near ptr _setcolor
    243	00AC  59			     pop     cx
    244	00AD  1E			     push    ds
    245	00AE  B8 05BBr			     mov     ax,offset DGROUP:s@+1311
    246	00B1  50			     push    ax
    247	00B2  E8 0000e			     call    near ptr _putstr
    248	00B5  59			     pop     cx
    249	00B6  59			     pop     cx
    250					;
    251					;
    252					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    253					;
    254	00B7  1E			     push    ds
    255	00B8  B8 05D5r			     mov     ax,offset DGROUP:s@+1337
    256	00BB  50			     push    ax
    257	00BC  E8 0000e			     call    near ptr _putstr
    258	00BF  59			     pop     cx
    259	00C0  59			     pop     cx
    260					;
    261					;      /* Inicializa vari·veis de ambiente */
    262					;      command_var_init();
    263					;
    264	00C1  E8 04F7			     call    near ptr command_var_init
    265					;
    266					;      command_var_set("PROMPT","miniSO>");
    267					;
    268	00C4  1E			     push    ds
    269	00C5  B8 0602r			     mov     ax,offset DGROUP:s@+1382
    270	00C8  50			     push    ax
    271	00C9  1E			     push    ds
    272	00CA  B8 05FBr			     mov     ax,offset DGROUP:s@+1375
    273	00CD  50			     push    ax
    274	00CE  E8 066B			     call    near ptr command_var_set
    275	00D1  83 C4 08			     add     sp,8
    276					;
    277					;      command_var_set("ERRORLEVEL","0");
    278					;
    279	00D4  1E			     push    ds
    280	00D5  B8 0615r			     mov     ax,offset DGROUP:s@+1401
    281	00D8  50			     push    ax
    282	00D9  1E			     push    ds
    283	00DA  B8 060Ar			     mov     ax,offset DGROUP:s@+1390
    284	00DD  50			     push    ax
    285	00DE  E8 065B			     call    near ptr command_var_set
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 6
command.ASM



    286	00E1  83 C4 08			     add     sp,8
    287					;
    288					;      /* Imprime sinal	de pronto */
    289					;      command_showprompt();
    290					;
    291	00E4  E8 0488			     call    near ptr command_showprompt
    292	00E7  E9 0427			     jmp     @1@3362
    293	00EA			     @1@58:
    294					;
    295					;      /* LaÁo para interpretaÁ„o de comandos */
    296					;      while ( !end_command )  {
    297					;	     car=getch();
    298					;
    299	00EA  E8 0000e			     call    near ptr _getch
    300	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    301					;
    302					;	     switch (car)  {
    303					;
    304	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    305	00F3  98			     cbw
    306	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    307	00F7  B9 0005			     mov     cx,5
    308	00FA  BB 0531r			     mov     bx,offset @1@C3234
    309	00FD			     @1@142:
    310	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    311	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    312	0103  74 08			     je	     short @1@226
    313	0105  83 C3 02			     add     bx,2
    314	0108  E2 F3			     loop    short @1@142
    315	010A  E9 03EE			     jmp     @1@3306
    316	010D			     @1@226:
    317	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    318	0111			     @1@254:
    319					;
    320					;		    case 9:
    321					;			 break;
    322					;
    323	0111  E9 03FD			     jmp     @1@3362
    324	0114			     @1@282:
    325					;
    326					;		    case 8:
    327					;			 if (numcar>0)	{
    328					;
    329	0114  0B F6			     or	     si,si
    330	0116  7E 04			     jle     short @1@338
    331					;
    332					;			    --numcar;
    333					;
    334	0118  4E			     dec     si
    335					;
    336					;			    command_backspace();
    337					;
    338	0119  E8 0429			     call    near ptr command_backspace
    339	011C			     @1@338:
    340					;
    341					;			 }
    342					;			 break;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 7
command.ASM



    343					;
    344	011C  E9 03F2			     jmp     @1@3362
    345	011F			     @1@366:
    346	011F  EB 04			     jmp     short @1@422
    347	0121			     @1@394:
    348					;
    349					;		    case 27:
    350					;			 /* Limpa a linha de comandos */
    351					;			 while (numcar>0)  {
    352					;			       --numcar;
    353					;
    354	0121  4E			     dec     si
    355					;
    356					;			       command_backspace();
    357					;
    358	0122  E8 0420			     call    near ptr command_backspace
    359	0125			     @1@422:
    360	0125  0B F6			     or	     si,si
    361	0127  7F F8			     jg	     short @1@394
    362					;
    363					;			 }
    364					;			 break;
    365					;
    366	0129  E9 03E5			     jmp     @1@3362
    367	012C			     @1@478:
    368					;
    369					;		    case 0:
    370					;			 car=getch();
    371					;
    372	012C  E8 0000e			     call    near ptr _getch
    373	012F  88 46 FF			     mov     byte ptr [bp-1],al
    374					;
    375					;			 switch	(car)  {
    376					;
    377	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    378	0135  98			     cbw
    379	0136  89 46 DE			     mov     word ptr [bp-34],ax
    380	0139  B9 0004			     mov     cx,4
    381	013C  BB 0521r			     mov     bx,offset @1@C3330
    382	013F			     @1@562:
    383	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    384	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    385	0145  74 08			     je	     short @1@646
    386	0147  83 C3 02			     add     bx,2
    387	014A  E2 F3			     loop    short @1@562
    388	014C  E9 01C0			     jmp     @1@2102
    389	014F			     @1@646:
    390	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    391	0153			     @1@674:
    392					;
    393					;				case 65: /* F7 */
    394					;				     history_pos = -1;
    395					;
    396	0153  C7 06 020Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    397	0159  EB 04			     jmp     short @1@730
    398	015B			     @1@702:
    399					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 8
command.ASM



    400					;				     /*	Limpa a	linha de comandos */
    401					;				     while (numcar>0)  {
    402					;					   --numcar;
    403					;
    404	015B  4E			     dec     si
    405					;
    406					;					   command_backspace();
    407					;
    408	015C  E8 03E6			     call    near ptr command_backspace
    409	015F			     @1@730:
    410	015F  0B F6			     or	     si,si
    411	0161  7F F8			     jg	     short @1@702
    412					;
    413					;				     }
    414					;				     putch('\n');
    415					;
    416	0163  B8 000A			     mov     ax,10
    417	0166  50			     push    ax
    418	0167  E8 0000e			     call    near ptr _putch
    419	016A  59			     pop     cx
    420					;
    421					;				     /*	Imprime	o histÛrico */
    422					;				     for (i=0;i<history_len;++i)  {
    423					;
    424	016B  33 FF			     xor     di,di
    425	016D  EB 25			     jmp     short @1@842
    426	016F			     @1@786:
    427					;
    428					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    429					;
    430	016F  1E			     push    ds
    431	0170  A1 0210r			     mov     ax,word ptr DGROUP:history_ini
    432	0173  03 C7			     add     ax,di
    433	0175  BB 000A			     mov     bx,10
    434	0178  99			     cwd
    435	0179  F7 FB			     idiv    bx
    436	017B  BB 001F			     mov     bx,31
    437	017E  8B C2			     mov     ax,dx
    438	0180  F7 EB			     imul    bx
    439	0182  05 0214r			     add     ax,offset DGROUP:history
    440	0185  50			     push    ax
    441	0186  E8 0000e			     call    near ptr _putstr
    442	0189  59			     pop     cx
    443	018A  59			     pop     cx
    444					;
    445					;					 putch('\n');
    446					;
    447	018B  B8 000A			     mov     ax,10
    448	018E  50			     push    ax
    449	018F  E8 0000e			     call    near ptr _putch
    450	0192  59			     pop     cx
    451	0193  47			     inc     di
    452	0194			     @1@842:
    453	0194  3B 3E 0212r		     cmp     di,word ptr DGROUP:history_len
    454	0198  7C D5			     jl	     short @1@786
    455					;
    456					;				     }
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 9
command.ASM



    457					;				     command_showprompt();
    458					;
    459	019A  E8 03D2			     call    near ptr command_showprompt
    460					;
    461					;				     break;
    462					;
    463	019D  E9 016F			     jmp     @1@2102
    464	01A0			     @1@898:
    465					;
    466					;				case 75: /* Seta para esquerda */
    467					;				     if	(numcar>0)  {
    468					;
    469	01A0  0B F6			     or	     si,si
    470	01A2  7E 04			     jle     short @1@954
    471					;
    472					;					--numcar;
    473					;
    474	01A4  4E			     dec     si
    475					;
    476					;					command_backspace();
    477					;
    478	01A5  E8 039D			     call    near ptr command_backspace
    479	01A8			     @1@954:
    480					;
    481					;				     }
    482					;				     break;
    483					;
    484	01A8  E9 0164			     jmp     @1@2102
    485	01AB			     @1@982:
    486					;
    487					;				case 72: /* Seta para cima */
    488					;				     if	(history_len>0)	 {
    489					;
    490	01AB  83 3E 0212r 00		     cmp     word ptr DGROUP:history_len,0
    491	01B0  7F 03			     jg	     @@0
    492	01B2  E9 00C3			     jmp     @1@1598
    493	01B5			     @@0:
    494					;
    495					;					novalinha=0;
    496					;
    497	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    498					;
    499					;					if (history_len<MAXHISTORY)  {
    500					;
    501	01BA  83 3E 0212r 0A		     cmp     word ptr DGROUP:history_len,10
    502	01BF  7D 27			     jge     short @1@1178
    503					;
    504					;					   if (history_pos==-1)	 {
    505					;
    506	01C1  83 3E 020Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    507	01C6  75 0E			     jne     short @1@1094
    508					;
    509					;					      history_pos=history_nxt-1;
    510					;
    511	01C8  A1 020Er			     mov     ax,word ptr DGROUP:history_nxt
    512	01CB  48			     dec     ax
    513	01CC  A3 020Cr			     mov     word ptr DGROUP:history_pos,ax
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 10
command.ASM



    514					;
    515					;					      novalinha=1;
    516					;
    517	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    518					;
    519					;					   }
    520					;
    521	01D4  EB 10			     jmp     short @1@1150
    522	01D6			     @1@1094:
    523					;
    524					;					   else	 {
    525					;					      if (history_pos>0)  {
    526					;
    527	01D6  83 3E 020Cr 00		     cmp     word ptr DGROUP:history_pos,0
    528	01DB  7E 09			     jle     short @1@1150
    529					;
    530					;						 history_pos--;
    531					;
    532	01DD  FF 0E 020Cr		     dec     word ptr DGROUP:history_pos
    533					;
    534					;						 novalinha=1;
    535					;
    536	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    537	01E6			     @1@1150:
    538					;
    539					;					      }
    540					;					   }
    541					;					}
    542					;
    543	01E6  EB 52			     jmp     short @1@1458
    544	01E8			     @1@1178:
    545					;
    546					;					else  {
    547					;					   if (history_pos==-1)	 {
    548					;
    549	01E8  83 3E 020Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    550	01ED  75 1B			     jne     short @1@1290
    551					;
    552					;					      history_pos=history_nxt-1;
    553					;
    554	01EF  A1 020Er			     mov     ax,word ptr DGROUP:history_nxt
    555	01F2  48			     dec     ax
    556	01F3  A3 020Cr			     mov     word ptr DGROUP:history_pos,ax
    557					;
    558					;					      if (history_pos<0)
    559					;
    560	01F6  83 3E 020Cr 00		     cmp     word ptr DGROUP:history_pos,0
    561	01FB  7D 06			     jge     short @1@1262
    562					;
    563					;						 history_pos=MAXHISTORY-1;
    564					;
    565	01FD  C7 06 020Cr 0009		     mov     word ptr DGROUP:history_pos,9
    566	0203			     @1@1262:
    567					;
    568					;					      novalinha=1;
    569					;
    570	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 11
command.ASM



    571					;
    572					;					   }
    573					;
    574	0208  EB 30			     jmp     short @1@1458
    575	020A			     @1@1290:
    576					;
    577					;					   else	 {
    578					;					      if (history_pos!=history_ini)  {
    579					;
    580	020A  A1 020Cr			     mov     ax,word ptr DGROUP:history_pos
    581	020D  3B 06 0210r		     cmp     ax,word ptr DGROUP:history_ini
    582	0211  74 27			     je	     short @1@1458
    583					;
    584					;						 novalinha=1;
    585					;
    586	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    587					;
    588					;						 if (history_pos>history_ini)
    589					;
    590	0218  A1 020Cr			     mov     ax,word ptr DGROUP:history_pos
    591	021B  3B 06 0210r		     cmp     ax,word ptr DGROUP:history_ini
    592	021F  7E 06			     jle     short @1@1374
    593					;
    594					;						    --history_pos;
    595					;
    596	0221  FF 0E 020Cr		     dec     word ptr DGROUP:history_pos
    597	0225  EB 13			     jmp     short @1@1458
    598	0227			     @1@1374:
    599					;
    600					;						 else  {  /* history_pos<history_ini */
    601					;						    if (history_pos>0)
    602					;
    603	0227  83 3E 020Cr 00		     cmp     word ptr DGROUP:history_pos,0
    604	022C  7E 06			     jle     short @1@1430
    605					;
    606					;						       history_pos--;
    607					;
    608	022E  FF 0E 020Cr		     dec     word ptr DGROUP:history_pos
    609	0232  EB 06			     jmp     short @1@1458
    610	0234			     @1@1430:
    611					;
    612					;						    else
    613					;						       history_pos=MAXHISTORY-1;
    614					;
    615	0234  C7 06 020Cr 0009		     mov     word ptr DGROUP:history_pos,9
    616	023A			     @1@1458:
    617					;
    618					;						  }
    619					;					      }
    620					;					   }
    621					;					}
    622					;					if (novalinha)	{
    623					;
    624	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    625	023E  74 38			     je	     short @1@1598
    626	0240  EB 04			     jmp     short @1@1542
    627	0242			     @1@1514:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 12
command.ASM



    628					;
    629					;					   /* Limpa a linha de comandos	*/
    630					;					   while (numcar>0)  {
    631					;						 --numcar;
    632					;
    633	0242  4E			     dec     si
    634					;
    635					;						 command_backspace();
    636					;
    637	0243  E8 02FF			     call    near ptr command_backspace
    638	0246			     @1@1542:
    639	0246  0B F6			     or	     si,si
    640	0248  7F F8			     jg	     short @1@1514
    641					;
    642					;					   }
    643					;					   strcpy(cmdline,history[history_pos]);
    644					;
    645	024A  1E			     push    ds
    646	024B  A1 020Cr			     mov     ax,word ptr DGROUP:history_pos
    647	024E  BA 001F			     mov     dx,31
    648	0251  F7 EA			     imul    dx
    649	0253  05 0214r			     add     ax,offset DGROUP:history
    650	0256  50			     push    ax
    651	0257  1E			     push    ds
    652	0258  B8 0608r			     mov     ax,offset DGROUP:cmdline
    653	025B  50			     push    ax
    654	025C  E8 0000e			     call    near ptr _strcpy
    655	025F  83 C4 08			     add     sp,8
    656					;
    657					;					   putstr(cmdline);
    658					;
    659	0262  1E			     push    ds
    660	0263  B8 0608r			     mov     ax,offset DGROUP:cmdline
    661	0266  50			     push    ax
    662	0267  E8 0000e			     call    near ptr _putstr
    663	026A  59			     pop     cx
    664	026B  59			     pop     cx
    665					;
    666					;					   numcar=strlen(cmdline);
    667					;
    668	026C  1E			     push    ds
    669	026D  B8 0608r			     mov     ax,offset DGROUP:cmdline
    670	0270  50			     push    ax
    671	0271  E8 0000e			     call    near ptr _strlen
    672	0274  59			     pop     cx
    673	0275  59			     pop     cx
    674	0276  8B F0			     mov     si,ax
    675	0278			     @1@1598:
    676					;
    677					;					}
    678					;				     }
    679					;				     break;
    680					;
    681	0278  E9 0094			     jmp     @1@2102
    682	027B			     @1@1626:
    683					;
    684					;				case 80: /* Seta para baixo */
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 13
command.ASM



    685					;				     if	(history_len>0 && history_pos!=-1)  {
    686					;
    687	027B  83 3E 0212r 00		     cmp     word ptr DGROUP:history_len,0
    688	0280  7F 03			     jg	     @@1
    689	0282  E9 0088			     jmp     @1@2074
    690	0285			     @@1:
    691	0285  83 3E 020Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    692	028A  75 03			     jne     @@2
    693	028C  EB 7F 90			     jmp     @1@2074
    694	028F			     @@2:
    695					;
    696					;					if (history_len<MAXHISTORY)  {
    697					;
    698	028F  83 3E 0212r 0A		     cmp     word ptr DGROUP:history_len,10
    699	0294  7D 18			     jge     short @1@1822
    700					;
    701					;					   if (history_pos<history_len-1)
    702					;
    703	0296  A1 0212r			     mov     ax,word ptr DGROUP:history_len
    704	0299  48			     dec     ax
    705	029A  3B 06 020Cr		     cmp     ax,word ptr DGROUP:history_pos
    706	029E  7E 06			     jle     short @1@1766
    707					;
    708					;					      history_pos++;
    709					;
    710	02A0  FF 06 020Cr		     inc     word ptr DGROUP:history_pos
    711	02A4  EB 06			     jmp     short @1@1794
    712	02A6			     @1@1766:
    713					;
    714					;					   else
    715					;					      history_pos = -1;
    716					;
    717	02A6  C7 06 020Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    718	02AC			     @1@1794:
    719					;
    720					;					}
    721					;
    722	02AC  EB 20			     jmp     short @1@1934
    723	02AE			     @1@1822:
    724					;
    725					;					else  {
    726					;					   history_pos++;
    727					;
    728	02AE  FF 06 020Cr		     inc     word ptr DGROUP:history_pos
    729					;
    730					;					   if (history_pos>=MAXHISTORY)
    731					;
    732	02B2  83 3E 020Cr 0A		     cmp     word ptr DGROUP:history_pos,10
    733	02B7  7C 06			     jl	     short @1@1878
    734					;
    735					;					      history_pos = 0;
    736					;
    737	02B9  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_pos,0
    738	02BF			     @1@1878:
    739					;
    740					;					   if (history_pos==history_nxt)
    741					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 14
command.ASM



    742	02BF  A1 020Cr			     mov     ax,word ptr DGROUP:history_pos
    743	02C2  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_nxt
    744	02C6  75 06			     jne     short @1@1934
    745					;
    746					;					      history_pos = -1;
    747					;
    748	02C8  C7 06 020Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    749	02CE			     @1@1934:
    750	02CE  EB 04			     jmp     short @1@1990
    751	02D0			     @1@1962:
    752					;
    753					;					}
    754					;					/* Limpa a linha de comandos */
    755					;					while (numcar>0)  {
    756					;					      --numcar;
    757					;
    758	02D0  4E			     dec     si
    759					;
    760					;					      command_backspace();
    761					;
    762	02D1  E8 0271			     call    near ptr command_backspace
    763	02D4			     @1@1990:
    764	02D4  0B F6			     or	     si,si
    765	02D6  7F F8			     jg	     short @1@1962
    766					;
    767					;					}
    768					;					if (history_pos!=-1)  {
    769					;
    770	02D8  83 3E 020Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    771	02DD  74 2E			     je	     short @1@2074
    772					;
    773					;					   strcpy(cmdline,history[history_pos]);
    774					;
    775	02DF  1E			     push    ds
    776	02E0  A1 020Cr			     mov     ax,word ptr DGROUP:history_pos
    777	02E3  BA 001F			     mov     dx,31
    778	02E6  F7 EA			     imul    dx
    779	02E8  05 0214r			     add     ax,offset DGROUP:history
    780	02EB  50			     push    ax
    781	02EC  1E			     push    ds
    782	02ED  B8 0608r			     mov     ax,offset DGROUP:cmdline
    783	02F0  50			     push    ax
    784	02F1  E8 0000e			     call    near ptr _strcpy
    785	02F4  83 C4 08			     add     sp,8
    786					;
    787					;					   putstr(cmdline);
    788					;
    789	02F7  1E			     push    ds
    790	02F8  B8 0608r			     mov     ax,offset DGROUP:cmdline
    791	02FB  50			     push    ax
    792	02FC  E8 0000e			     call    near ptr _putstr
    793	02FF  59			     pop     cx
    794	0300  59			     pop     cx
    795					;
    796					;					   numcar=strlen(cmdline);
    797					;
    798	0301  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 15
command.ASM



    799	0302  B8 0608r			     mov     ax,offset DGROUP:cmdline
    800	0305  50			     push    ax
    801	0306  E8 0000e			     call    near ptr _strlen
    802	0309  59			     pop     cx
    803	030A  59			     pop     cx
    804	030B  8B F0			     mov     si,ax
    805	030D			     @1@2074:
    806					;
    807					;					}
    808					;				     }
    809					;				     break;
    810					;
    811	030D  EB 00			     jmp     short @1@2102
    812	030F			     @1@2102:
    813					;
    814					;			 }
    815					;			 break;
    816					;
    817	030F  E9 01FF			     jmp     @1@3362
    818	0312			     @1@2130:
    819					;
    820					;		    case 13:
    821					;			 history_pos = -1;
    822					;
    823	0312  C7 06 020Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    824					;
    825					;			 putch('\n');
    826					;
    827	0318  B8 000A			     mov     ax,10
    828	031B  50			     push    ax
    829	031C  E8 0000e			     call    near ptr _putch
    830	031F  59			     pop     cx
    831					;
    832					;			 cmdline[numcar]='\0';
    833					;
    834	0320  C6 84 0608r 00		     mov     byte ptr DGROUP:cmdline[si],0
    835					;
    836					;			 /* Divide a linha de comandos em comando e opÁıes */
    837					;			 ptrline = cmdline;
    838					;
    839	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    840	0328  C7 46 E6 0608r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    841					;
    842					;			 argc =	0;
    843					;
    844	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    845					;
    846					;			 pos = 0;
    847					;
    848	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    849	0337			     @1@2158:
    850	0337  EB 03			     jmp     short @1@2214
    851	0339			     @1@2186:
    852					;
    853					;			 while (1) {
    854					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    855					;				     ++ptrline;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 16
command.ASM



    856					;
    857	0339  FF 46 E6			     inc     word ptr [bp-26]
    858	033C			     @1@2214:
    859	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    860	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    861	0343  74 12			     je	     short @1@2298
    862	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    863	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    864	034C  74 EB			     je	     short @1@2186
    865	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    866	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    867	0355  74 E2			     je	     short @1@2186
    868	0357			     @1@2298:
    869					;
    870					;			       if (*ptrline=='\0')
    871					;
    872	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    873	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    874	035E  75 03			     jne     short @1@2354
    875					;
    876					;				  break;
    877					;
    878	0360  E9 00B4			     jmp     @1@2718
    879	0363			     @1@2354:
    880					;
    881					;			       i = 0;
    882					;
    883	0363  33 FF			     xor     di,di
    884	0365  EB 0E			     jmp     short @1@2410
    885	0367			     @1@2382:
    886					;
    887					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    888					;				     palavra[i++] = *ptrline;
    889					;
    890	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    891	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    892	036D  88 85 05E9r		     mov     byte ptr DGROUP:palavra[di],al
    893	0371  47			     inc     di
    894					;
    895					;				     ++ptrline;
    896					;
    897	0372  FF 46 E6			     inc     word ptr [bp-26]
    898	0375			     @1@2410:
    899	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    901	037C  74 12			     je	     short @1@2494
    902	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    903	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    904	0385  74 09			     je	     short @1@2494
    905	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    906	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    907	038E  75 D7			     jne     short @1@2382
    908	0390			     @1@2494:
    909					;
    910					;			       }
    911					;			       palavra[i] = '\0';
    912					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 17
command.ASM



    913	0390  C6 85 05E9r 00		     mov     byte ptr DGROUP:palavra[di],0
    914					;
    915					;			       if (palavra[0]=='$')  {
    916					;
    917	0395  80 3E 05E9r 24		     cmp     byte ptr DGROUP:palavra,36
    918	039A  75 39			     jne     short @1@2606
    919					;
    920					;				  var =	command_var_value(&palavra[1]);
    921					;
    922	039C  1E			     push    ds
    923	039D  B8 05EAr			     mov     ax,offset DGROUP:palavra+1
    924	03A0  50			     push    ax
    925	03A1  E8 036B			     call    near ptr command_var_value
    926	03A4  59			     pop     cx
    927	03A5  59			     pop     cx
    928	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    929	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    930					;
    931					;				  if (var!=NULL)  {
    932					;
    933	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    934	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    935	03B2  74 1F			     je	     short @1@2578
    936					;
    937					;				     strcpy(palavra,var);
    938					;
    939	03B4  FF 76 E4			     push    word ptr [bp-28]
    940	03B7  FF 76 E2			     push    word ptr [bp-30]
    941	03BA  1E			     push    ds
    942	03BB  B8 05E9r			     mov     ax,offset DGROUP:palavra
    943	03BE  50			     push    ax
    944	03BF  E8 0000e			     call    near ptr _strcpy
    945	03C2  83 C4 08			     add     sp,8
    946					;
    947					;				     i = strlen(palavra);
    948					;
    949	03C5  1E			     push    ds
    950	03C6  B8 05E9r			     mov     ax,offset DGROUP:palavra
    951	03C9  50			     push    ax
    952	03CA  E8 0000e			     call    near ptr _strlen
    953	03CD  59			     pop     cx
    954	03CE  59			     pop     cx
    955	03CF  8B F8			     mov     di,ax
    956					;
    957					;				  }
    958					;
    959	03D1  EB 02			     jmp     short @1@2606
    960	03D3			     @1@2578:
    961					;
    962					;				  else
    963					;				     continue;
    964					;
    965	03D3  EB 3F			     jmp     short @1@2690
    966	03D5			     @1@2606:
    967					;
    968					;
    969					;			       }
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 18
command.ASM



    970					;			       strcpy(&argline[pos],palavra);
    971					;
    972	03D5  1E			     push    ds
    973	03D6  B8 05E9r			     mov     ax,offset DGROUP:palavra
    974	03D9  50			     push    ax
    975	03DA  1E			     push    ds
    976	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    977	03DE  05 038Ar			     add     ax,offset DGROUP:argline
    978	03E1  50			     push    ax
    979	03E2  E8 0000e			     call    near ptr _strcpy
    980	03E5  83 C4 08			     add     sp,8
    981					;
    982					;			       argv[argc++] = &argline[pos];
    983					;
    984	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    985	03EB  05 038Ar			     add     ax,offset DGROUP:argline
    986	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    987	03F1  B1 02			     mov     cl,2
    988	03F3  D3 E3			     shl     bx,cl
    989	03F5  8C 9F 034Cr		     mov     word ptr DGROUP:argv[bx+2],ds
    990	03F9  89 87 034Ar		     mov     word ptr DGROUP:argv[bx],ax
    991	03FD  FF 46 EA			     inc     word ptr [bp-22]
    992					;
    993					;			       pos+= (i+1);
    994					;
    995	0400  8B C7			     mov     ax,di
    996	0402  40			     inc     ax
    997	0403  01 46 F0			     add     word ptr [bp-16],ax
    998					;
    999					;			       if (*ptrline=='\0')
   1000					;
   1001	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1002	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1003	040D  75 02			     jne     short @1@2662
   1004					;
   1005					;				  break;
   1006					;
   1007	040F  EB 06			     jmp     short @1@2718
   1008	0411			     @1@2662:
   1009					;
   1010					;			       ++ptrline;
   1011					;
   1012	0411  FF 46 E6			     inc     word ptr [bp-26]
   1013	0414			     @1@2690:
   1014	0414  E9 FF20			     jmp     @1@2158
   1015	0417			     @1@2718:
   1016					;
   1017					;			 }
   1018					;			 /* Se È comando vazio n„o faz nada */
   1019					;			 if (argc==0)  {
   1020					;
   1021	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1022	041B  75 06			     jne     short @1@2774
   1023					;
   1024					;			    command_showprompt();
   1025					;
   1026	041D  E8 014F			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 19
command.ASM



   1027					;
   1028					;			    break;
   1029					;
   1030	0420  E9 00EE			     jmp     @1@3362
   1031	0423			     @1@2774:
   1032					;
   1033					;			 }
   1034					;			 /* Salva linha	de comando no histÛrico	*/
   1035					;			 strcpy	(history[history_nxt],cmdline);
   1036					;
   1037	0423  1E			     push    ds
   1038	0424  B8 0608r			     mov     ax,offset DGROUP:cmdline
   1039	0427  50			     push    ax
   1040	0428  1E			     push    ds
   1041	0429  A1 020Er			     mov     ax,word ptr DGROUP:history_nxt
   1042	042C  BA 001F			     mov     dx,31
   1043	042F  F7 EA			     imul    dx
   1044	0431  05 0214r			     add     ax,offset DGROUP:history
   1045	0434  50			     push    ax
   1046	0435  E8 0000e			     call    near ptr _strcpy
   1047	0438  83 C4 08			     add     sp,8
   1048					;
   1049					;			 if (history_len<MAXHISTORY)
   1050					;
   1051	043B  83 3E 0212r 0A		     cmp     word ptr DGROUP:history_len,10
   1052	0440  7D 06			     jge     short @1@2830
   1053					;
   1054					;			    ++history_len;
   1055					;
   1056	0442  FF 06 0212r		     inc     word ptr DGROUP:history_len
   1057	0446  EB 13			     jmp     short @1@2914
   1058	0448			     @1@2830:
   1059					;
   1060					;			 else  {
   1061					;			    if (history_ini==MAXHISTORY-1)
   1062					;
   1063	0448  83 3E 0210r 09		     cmp     word ptr DGROUP:history_ini,9
   1064	044D  75 08			     jne     short @1@2886
   1065					;
   1066					;			       history_ini = 0;
   1067					;
   1068	044F  C7 06 0210r 0000		     mov     word ptr DGROUP:history_ini,0
   1069	0455  EB 04			     jmp     short @1@2914
   1070	0457			     @1@2886:
   1071					;
   1072					;			    else
   1073					;			       ++history_ini;
   1074					;
   1075	0457  FF 06 0210r		     inc     word ptr DGROUP:history_ini
   1076	045B			     @1@2914:
   1077					;
   1078					;			 }
   1079					;			 if (history_nxt==MAXHISTORY-1)
   1080					;
   1081	045B  83 3E 020Er 09		     cmp     word ptr DGROUP:history_nxt,9
   1082	0460  75 08			     jne     short @1@2970
   1083					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 20
command.ASM



   1084					;			    history_nxt	= 0;
   1085					;
   1086	0462  C7 06 020Er 0000		     mov     word ptr DGROUP:history_nxt,0
   1087	0468  EB 04			     jmp     short @1@2998
   1088	046A			     @1@2970:
   1089					;
   1090					;			 else
   1091					;			    ++history_nxt;
   1092					;
   1093	046A  FF 06 020Er		     inc     word ptr DGROUP:history_nxt
   1094	046E			     @1@2998:
   1095					;
   1096					;			 /* Verifica qual È o comando ... */
   1097					;			 achou = 0;
   1098					;
   1099	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1100					;
   1101					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1102					;
   1103	0473  33 FF			     xor     di,di
   1104	0475  EB 28			     jmp     short @1@3110
   1105	0477			     @1@3026:
   1106					;
   1107					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1108					;
   1109	0477  1E			     push    ds
   1110	0478  8B C7			     mov     ax,di
   1111	047A  BA 0006			     mov     dx,6
   1112	047D  F7 EA			     imul    dx
   1113	047F  8B D8			     mov     bx,ax
   1114	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1115	0485  FF 36 034Cr		     push    word ptr DGROUP:argv+2
   1116	0489  FF 36 034Ar		     push    word ptr DGROUP:argv
   1117	048D  E8 0000e			     call    near ptr _strcmp
   1118	0490  83 C4 08			     add     sp,8
   1119	0493  0B C0			     or	     ax,ax
   1120	0495  75 07			     jne     short @1@3082
   1121					;
   1122					;				achou=1;
   1123					;
   1124	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1125					;
   1126					;				break;
   1127					;
   1128	049C  EB 06			     jmp     short @1@3138
   1129	049E			     @1@3082:
   1130	049E  47			     inc     di
   1131	049F			     @1@3110:
   1132	049F  83 FF 19			     cmp     di,25
   1133	04A2  7C D3			     jl	     short @1@3026
   1134	04A4			     @1@3138:
   1135					;
   1136					;			     }
   1137					;			 }
   1138					;
   1139					;			 /* Executa o comando */
   1140					;			 if (achou)  {
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 21
command.ASM



   1141					;
   1142	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1143	04A8  74 39			     je	     short @1@3194
   1144					;
   1145					;			    res	= commands[i].code(argc,argv);
   1146					;
   1147	04AA  B8 034Ar			     mov     ax,offset DGROUP:argv
   1148	04AD  50			     push    ax
   1149	04AE  FF 76 EA			     push    word ptr [bp-22]
   1150	04B1  8B C7			     mov     ax,di
   1151	04B3  BA 0006			     mov     dx,6
   1152	04B6  F7 EA			     imul    dx
   1153	04B8  8B D8			     mov     bx,ax
   1154	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1155	04BE  59			     pop     cx
   1156	04BF  59			     pop     cx
   1157	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1158					;
   1159					;			    inttostr(str,res);
   1160					;
   1161	04C3  FF 76 EC			     push    word ptr [bp-20]
   1162	04C6  16			     push    ss
   1163	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1164	04CA  50			     push    ax
   1165	04CB  E8 0000e			     call    near ptr _inttostr
   1166	04CE  83 C4 06			     add     sp,6
   1167					;
   1168					;			    command_var_set("ERRORLEVEL",str);
   1169					;
   1170	04D1  16			     push    ss
   1171	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1172	04D5  50			     push    ax
   1173	04D6  1E			     push    ds
   1174	04D7  B8 0617r			     mov     ax,offset DGROUP:s@+1403
   1175	04DA  50			     push    ax
   1176	04DB  E8 025E			     call    near ptr command_var_set
   1177	04DE  83 C4 08			     add     sp,8
   1178					;
   1179					;			 }
   1180					;
   1181	04E1  EB 0A			     jmp     short @1@3222
   1182	04E3			     @1@3194:
   1183					;
   1184					;			 else
   1185					;			    putstr("Erro: comando desconhecido!\n");
   1186					;
   1187	04E3  1E			     push    ds
   1188	04E4  B8 0622r			     mov     ax,offset DGROUP:s@+1414
   1189	04E7  50			     push    ax
   1190	04E8  E8 0000e			     call    near ptr _putstr
   1191	04EB  59			     pop     cx
   1192	04EC  59			     pop     cx
   1193	04ED			     @1@3222:
   1194					;
   1195					;
   1196					;			 if (!end_command)
   1197					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 22
command.ASM



   1198	04ED  83 3E 0627r 00		     cmp     word ptr DGROUP:end_command,0
   1199	04F2  75 03			     jne     short @1@3278
   1200					;
   1201					;			    command_showprompt();
   1202					;
   1203	04F4  E8 0078			     call    near ptr command_showprompt
   1204	04F7			     @1@3278:
   1205					;
   1206					;
   1207					;			 numcar=0;
   1208					;
   1209	04F7  33 F6			     xor     si,si
   1210					;
   1211					;			 break;
   1212					;
   1213	04F9  EB 16			     jmp     short @1@3362
   1214	04FB			     @1@3306:
   1215					;
   1216					;		    default:
   1217					;			 if (numcar<MAXLINE)  {
   1218					;
   1219	04FB  83 FE 1E			     cmp     si,30
   1220	04FE  7D 11			     jge     short @1@3362
   1221					;
   1222					;			    putch(car);
   1223					;
   1224	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1225	0503  98			     cbw
   1226	0504  50			     push    ax
   1227	0505  E8 0000e			     call    near ptr _putch
   1228	0508  59			     pop     cx
   1229					;
   1230					;			    cmdline[numcar++]=car;
   1231					;
   1232	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1233	050C  88 84 0608r		     mov     byte ptr DGROUP:cmdline[si],al
   1234	0510  46			     inc     si
   1235	0511			     @1@3362:
   1236	0511  83 3E 0627r 00		     cmp     word ptr DGROUP:end_command,0
   1237	0516  75 03			     jne     @@3
   1238	0518  E9 FBCF			     jmp     @1@58
   1239	051B			     @@3:
   1240					;
   1241					;			 }
   1242					;	     }
   1243					;      }
   1244					;
   1245					;    }
   1246					;
   1247	051B  5F			     pop     di
   1248	051C  5E			     pop     si
   1249	051D  8B E5			     mov     sp,bp
   1250	051F  5D			     pop     bp
   1251	0520  C3			     ret
   1252	0521			     _command	     endp
   1253	0521			     @1@C3330	     label   word
   1254	0521  41			     db	     65
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 23
command.ASM



   1255	0522  00			     db	     0
   1256	0523  48			     db	     72
   1257	0524  00			     db	     0
   1258	0525  4B			     db	     75
   1259	0526  00			     db	     0
   1260	0527  50			     db	     80
   1261	0528  00			     db	     0
   1262	0529  0153r			     dw	     @1@674
   1263	052B  01ABr			     dw	     @1@982
   1264	052D  01A0r			     dw	     @1@898
   1265	052F  027Br			     dw	     @1@1626
   1266	0531			     @1@C3234	     label   word
   1267	0531  00			     db	     0
   1268	0532  00			     db	     0
   1269	0533  08			     db	     8
   1270	0534  00			     db	     0
   1271	0535  09			     db	     9
   1272	0536  00			     db	     0
   1273	0537  0D			     db	     13
   1274	0538  00			     db	     0
   1275	0539  1B			     db	     27
   1276	053A  00			     db	     0
   1277	053B  012Cr			     dw	     @1@478
   1278	053D  0114r			     dw	     @1@282
   1279	053F  0111r			     dw	     @1@254
   1280	0541  0312r			     dw	     @1@2130
   1281	0543  011Fr			     dw	     @1@366
   1282					;
   1283					;    static void command_backspace()
   1284					;
   1285					     assume  cs:_TEXT
   1286	0545			     command_backspace	     proc    near
   1287	0545  55			     push    bp
   1288	0546  8B EC			     mov     bp,sp
   1289	0548  56			     push    si
   1290	0549  57			     push    di
   1291					;
   1292					;    {
   1293					;      int x,y;
   1294					;
   1295					;      x = wherex();
   1296					;
   1297	054A  E8 0000e			     call    near ptr _wherex
   1298	054D  8B F0			     mov     si,ax
   1299					;
   1300					;      y = wherey();
   1301					;
   1302	054F  E8 0000e			     call    near ptr _wherey
   1303	0552  8B F8			     mov     di,ax
   1304					;
   1305					;      --x;
   1306					;
   1307	0554  4E			     dec     si
   1308					;
   1309					;      gotoxy(x,y);
   1310					;
   1311	0555  57			     push    di
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 24
command.ASM



   1312	0556  56			     push    si
   1313	0557  E8 0000e			     call    near ptr _gotoxy
   1314	055A  59			     pop     cx
   1315	055B  59			     pop     cx
   1316					;
   1317					;      putch(' ');
   1318					;
   1319	055C  B8 0020			     mov     ax,32
   1320	055F  50			     push    ax
   1321	0560  E8 0000e			     call    near ptr _putch
   1322	0563  59			     pop     cx
   1323					;
   1324					;      gotoxy(x,y);
   1325					;
   1326	0564  57			     push    di
   1327	0565  56			     push    si
   1328	0566  E8 0000e			     call    near ptr _gotoxy
   1329	0569  59			     pop     cx
   1330	056A  59			     pop     cx
   1331					;
   1332					;    }
   1333					;
   1334	056B  5F			     pop     di
   1335	056C  5E			     pop     si
   1336	056D  5D			     pop     bp
   1337	056E  C3			     ret
   1338	056F			     command_backspace	     endp
   1339					;
   1340					;    static void command_showprompt()
   1341					;
   1342					     assume  cs:_TEXT
   1343	056F			     command_showprompt	     proc    near
   1344	056F  55			     push    bp
   1345	0570  8B EC			     mov     bp,sp
   1346	0572  83 EC 06			     sub     sp,6
   1347					;
   1348					;    {
   1349					;      char cor;
   1350					;      char far	*prompt;
   1351					;
   1352					;      prompt =	command_var_value("PROMPT");
   1353					;
   1354	0575  1E			     push    ds
   1355	0576  B8 063Fr			     mov     ax,offset DGROUP:s@+1443
   1356	0579  50			     push    ax
   1357	057A  E8 0192			     call    near ptr command_var_value
   1358	057D  59			     pop     cx
   1359	057E  59			     pop     cx
   1360	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1361	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1362					;
   1363					;      if (prompt!=NULL)  {
   1364					;
   1365	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1366	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1367	058B  74 22			     je	     short @3@86
   1368					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 25
command.ASM



   1369					;	  cor =	getcolor();
   1370					;
   1371	058D  E8 0000e			     call    near ptr _getcolor
   1372	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1373					;
   1374					;	  setcolor(PROMPTCOLOR);
   1375					;
   1376	0593  B8 0009			     mov     ax,9
   1377	0596  50			     push    ax
   1378	0597  E8 0000e			     call    near ptr _setcolor
   1379	059A  59			     pop     cx
   1380					;
   1381					;	  putstr(prompt);
   1382					;
   1383	059B  FF 76 FC			     push    word ptr [bp-4]
   1384	059E  FF 76 FA			     push    word ptr [bp-6]
   1385	05A1  E8 0000e			     call    near ptr _putstr
   1386	05A4  59			     pop     cx
   1387	05A5  59			     pop     cx
   1388					;
   1389					;	  setcolor(cor);
   1390					;
   1391	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1392	05A9  98			     cbw
   1393	05AA  50			     push    ax
   1394	05AB  E8 0000e			     call    near ptr _setcolor
   1395	05AE  59			     pop     cx
   1396	05AF			     @3@86:
   1397					;
   1398					;      }
   1399					;      putch(' ');
   1400					;
   1401	05AF  B8 0020			     mov     ax,32
   1402	05B2  50			     push    ax
   1403	05B3  E8 0000e			     call    near ptr _putch
   1404	05B6  59			     pop     cx
   1405					;
   1406					;    }
   1407					;
   1408	05B7  8B E5			     mov     sp,bp
   1409	05B9  5D			     pop     bp
   1410	05BA  C3			     ret
   1411	05BB			     command_showprompt	     endp
   1412					;
   1413					;    static void command_var_init()
   1414					;
   1415					     assume  cs:_TEXT
   1416	05BB			     command_var_init	     proc    near
   1417	05BB  55			     push    bp
   1418	05BC  8B EC			     mov     bp,sp
   1419					;
   1420					;    {
   1421					;      int i;
   1422					;
   1423					;      for (i=0;i<VAR_MAX;++i)	{
   1424					;
   1425	05BE  33 C9			     xor     cx,cx
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 26
command.ASM



   1426	05C0  EB 1D			     jmp     short @4@114
   1427	05C2			     @4@58:
   1428					;
   1429					;	   var[i].name[0]='\0';
   1430					;
   1431	05C2  8B C1			     mov     ax,cx
   1432	05C4  BA 0032			     mov     dx,50
   1433	05C7  F7 EA			     imul    dx
   1434	05C9  8B D8			     mov     bx,ax
   1435	05CB  C6 87 0018r 00		     mov     byte ptr DGROUP:var[bx],0
   1436					;
   1437					;	   var[i].value[0]='\0';
   1438					;
   1439	05D0  8B C1			     mov     ax,cx
   1440	05D2  BA 0032			     mov     dx,50
   1441	05D5  F7 EA			     imul    dx
   1442	05D7  8B D8			     mov     bx,ax
   1443	05D9  C6 87 0025r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1444	05DE  41			     inc     cx
   1445	05DF			     @4@114:
   1446	05DF  83 F9 0A			     cmp     cx,10
   1447	05E2  7C DE			     jl	     short @4@58
   1448					;
   1449					;      }
   1450					;      num_var = 0;
   1451					;
   1452	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1453					;
   1454					;    }
   1455					;
   1456	05EA  5D			     pop     bp
   1457	05EB  C3			     ret
   1458	05EC			     command_var_init	     endp
   1459					;
   1460					;    static int	command_var_nextfree()
   1461					;
   1462					     assume  cs:_TEXT
   1463	05EC			     command_var_nextfree    proc    near
   1464	05EC  55			     push    bp
   1465	05ED  8B EC			     mov     bp,sp
   1466					;
   1467					;    {
   1468					;      int i;
   1469					;
   1470					;      if (num_var>=VAR_MAX)
   1471					;
   1472	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1473	05F4  7C 05			     jl	     short @5@114
   1474	05F6			     @5@58:
   1475					;
   1476					;	  return -1;
   1477					;
   1478	05F6  B8 FFFF			     mov     ax,-1
   1479	05F9			     @5@86:
   1480	05F9  EB 20			     jmp     short @5@282
   1481	05FB			     @5@114:
   1482					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 27
command.ASM



   1483					;      for (i=0;i<VAR_MAX;++i)
   1484					;
   1485	05FB  33 C9			     xor     cx,cx
   1486	05FD  EB 15			     jmp     short @5@226
   1487	05FF			     @5@142:
   1488					;
   1489					;	   if (var[i].name[0]=='\0')
   1490					;
   1491	05FF  8B C1			     mov     ax,cx
   1492	0601  BA 0032			     mov     dx,50
   1493	0604  F7 EA			     imul    dx
   1494	0606  8B D8			     mov     bx,ax
   1495	0608  80 BF 0018r 00		     cmp     byte ptr DGROUP:var[bx],0
   1496	060D  75 04			     jne     short @5@198
   1497					;
   1498					;	      return i;
   1499					;
   1500	060F  8B C1			     mov     ax,cx
   1501	0611  EB E6			     jmp     short @5@86
   1502	0613			     @5@198:
   1503	0613  41			     inc     cx
   1504	0614			     @5@226:
   1505	0614  83 F9 0A			     cmp     cx,10
   1506	0617  7C E6			     jl	     short @5@142
   1507	0619  EB DB			     jmp     short @5@58
   1508	061B			     @5@282:
   1509					;
   1510					;      return -1;
   1511					;    }
   1512					;
   1513	061B  5D			     pop     bp
   1514	061C  C3			     ret
   1515	061D			     command_var_nextfree    endp
   1516					;
   1517					;    static void command_var_list()
   1518					;
   1519					     assume  cs:_TEXT
   1520	061D			     command_var_list	     proc    near
   1521	061D  55			     push    bp
   1522	061E  8B EC			     mov     bp,sp
   1523	0620  83 EC 02			     sub     sp,2
   1524	0623  56			     push    si
   1525					;
   1526					;    {
   1527					;      int i;
   1528					;      char cor;
   1529					;
   1530					;      cor = getcolor();
   1531					;
   1532	0624  E8 0000e			     call    near ptr _getcolor
   1533	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1534					;
   1535					;      for (i=0;i<VAR_MAX;++i)	{
   1536					;
   1537	062A  33 F6			     xor     si,si
   1538	062C  EB 54			     jmp     short @6@142
   1539	062E			     @6@58:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 28
command.ASM



   1540					;
   1541					;	   if (var[i].name[0]!='\0')  {
   1542					;
   1543	062E  8B C6			     mov     ax,si
   1544	0630  BA 0032			     mov     dx,50
   1545	0633  F7 EA			     imul    dx
   1546	0635  8B D8			     mov     bx,ax
   1547	0637  80 BF 0018r 00		     cmp     byte ptr DGROUP:var[bx],0
   1548	063C  74 43			     je	     short @6@114
   1549					;
   1550					;	      putstr(var[i].name);
   1551					;
   1552	063E  1E			     push    ds
   1553	063F  8B C6			     mov     ax,si
   1554	0641  BA 0032			     mov     dx,50
   1555	0644  F7 EA			     imul    dx
   1556	0646  05 0018r			     add     ax,offset DGROUP:var
   1557	0649  50			     push    ax
   1558	064A  E8 0000e			     call    near ptr _putstr
   1559	064D  59			     pop     cx
   1560	064E  59			     pop     cx
   1561					;
   1562					;	      putch('=');
   1563					;
   1564	064F  B8 003D			     mov     ax,61
   1565	0652  50			     push    ax
   1566	0653  E8 0000e			     call    near ptr _putch
   1567	0656  59			     pop     cx
   1568					;
   1569					;	      setcolor(VARCOLOR);
   1570					;
   1571	0657  B8 000E			     mov     ax,14
   1572	065A  50			     push    ax
   1573	065B  E8 0000e			     call    near ptr _setcolor
   1574	065E  59			     pop     cx
   1575					;
   1576					;	      putstr(var[i].value);
   1577					;
   1578	065F  1E			     push    ds
   1579	0660  8B C6			     mov     ax,si
   1580	0662  BA 0032			     mov     dx,50
   1581	0665  F7 EA			     imul    dx
   1582	0667  05 0025r			     add     ax,offset DGROUP:var+13
   1583	066A  50			     push    ax
   1584	066B  E8 0000e			     call    near ptr _putstr
   1585	066E  59			     pop     cx
   1586	066F  59			     pop     cx
   1587					;
   1588					;	      setcolor(cor);
   1589					;
   1590	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1591	0673  98			     cbw
   1592	0674  50			     push    ax
   1593	0675  E8 0000e			     call    near ptr _setcolor
   1594	0678  59			     pop     cx
   1595					;
   1596					;	      putch('\n');
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 29
command.ASM



   1597					;
   1598	0679  B8 000A			     mov     ax,10
   1599	067C  50			     push    ax
   1600	067D  E8 0000e			     call    near ptr _putch
   1601	0680  59			     pop     cx
   1602	0681			     @6@114:
   1603	0681  46			     inc     si
   1604	0682			     @6@142:
   1605	0682  83 FE 0A			     cmp     si,10
   1606	0685  7C A7			     jl	     short @6@58
   1607					;
   1608					;	   }
   1609					;      }
   1610					;    }
   1611					;
   1612	0687  5E			     pop     si
   1613	0688  8B E5			     mov     sp,bp
   1614	068A  5D			     pop     bp
   1615	068B  C3			     ret
   1616	068C			     command_var_list	     endp
   1617					;
   1618					;    static int	 command_var_search(char far *nome)
   1619					;
   1620					     assume  cs:_TEXT
   1621	068C			     command_var_search	     proc    near
   1622	068C  55			     push    bp
   1623	068D  8B EC			     mov     bp,sp
   1624	068F  56			     push    si
   1625					;
   1626					;    {
   1627					;      int i;
   1628					;
   1629					;      if (nome[0] == '\0')
   1630					;
   1631	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1632	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1633	0697  75 05			     jne     short @7@114
   1634	0699			     @7@58:
   1635					;
   1636					;	  return -1;
   1637					;
   1638	0699  B8 FFFF			     mov     ax,-1
   1639	069C			     @7@86:
   1640	069C  EB 2C			     jmp     short @7@282
   1641	069E			     @7@114:
   1642					;
   1643					;      for (i=0;i<VAR_MAX;++i)	{
   1644					;
   1645	069E  33 F6			     xor     si,si
   1646	06A0  EB 21			     jmp     short @7@226
   1647	06A2			     @7@142:
   1648					;
   1649					;	   if (strcmp(nome,var[i].name)==0)
   1650					;
   1651	06A2  1E			     push    ds
   1652	06A3  8B C6			     mov     ax,si
   1653	06A5  BA 0032			     mov     dx,50
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 30
command.ASM



   1654	06A8  F7 EA			     imul    dx
   1655	06AA  05 0018r			     add     ax,offset DGROUP:var
   1656	06AD  50			     push    ax
   1657	06AE  FF 76 06			     push    word ptr [bp+6]
   1658	06B1  FF 76 04			     push    word ptr [bp+4]
   1659	06B4  E8 0000e			     call    near ptr _strcmp
   1660	06B7  83 C4 08			     add     sp,8
   1661	06BA  0B C0			     or	     ax,ax
   1662	06BC  75 04			     jne     short @7@198
   1663					;
   1664					;	      return i;
   1665					;
   1666	06BE  8B C6			     mov     ax,si
   1667	06C0  EB DA			     jmp     short @7@86
   1668	06C2			     @7@198:
   1669	06C2  46			     inc     si
   1670	06C3			     @7@226:
   1671	06C3  83 FE 0A			     cmp     si,10
   1672	06C6  7C DA			     jl	     short @7@142
   1673	06C8  EB CF			     jmp     short @7@58
   1674	06CA			     @7@282:
   1675					;
   1676					;      }
   1677					;      return -1;
   1678					;    }
   1679					;
   1680	06CA  5E			     pop     si
   1681	06CB  5D			     pop     bp
   1682	06CC  C3			     ret
   1683	06CD			     command_var_search	     endp
   1684					;
   1685					;    static int	 command_var_unset(char	far *nome)
   1686					;
   1687					     assume  cs:_TEXT
   1688	06CD			     command_var_unset	     proc    near
   1689	06CD  55			     push    bp
   1690	06CE  8B EC			     mov     bp,sp
   1691	06D0  56			     push    si
   1692					;
   1693					;    {
   1694					;      int i;
   1695					;
   1696					;      i = command_var_search(nome);
   1697					;
   1698	06D1  FF 76 06			     push    word ptr [bp+6]
   1699	06D4  FF 76 04			     push    word ptr [bp+4]
   1700	06D7  E8 FFB2			     call    near ptr command_var_search
   1701	06DA  59			     pop     cx
   1702	06DB  59			     pop     cx
   1703	06DC  8B F0			     mov     si,ax
   1704					;
   1705					;      if (i==-1)
   1706					;
   1707	06DE  83 FE FF			     cmp     si,-1
   1708	06E1  75 05			     jne     short @8@114
   1709					;
   1710					;	  return -1;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 31
command.ASM



   1711					;
   1712	06E3  B8 FFFF			     mov     ax,-1
   1713	06E6			     @8@86:
   1714	06E6  EB 24			     jmp     short @8@142
   1715	06E8			     @8@114:
   1716					;
   1717					;      var[i].name[0]='\0';
   1718					;
   1719	06E8  8B C6			     mov     ax,si
   1720	06EA  BA 0032			     mov     dx,50
   1721	06ED  F7 EA			     imul    dx
   1722	06EF  8B D8			     mov     bx,ax
   1723	06F1  C6 87 0018r 00		     mov     byte ptr DGROUP:var[bx],0
   1724					;
   1725					;      var[i].value[0]='\0';
   1726					;
   1727	06F6  8B C6			     mov     ax,si
   1728	06F8  BA 0032			     mov     dx,50
   1729	06FB  F7 EA			     imul    dx
   1730	06FD  8B D8			     mov     bx,ax
   1731	06FF  C6 87 0025r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1732					;
   1733					;      --num_var;
   1734					;
   1735	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1736					;
   1737					;      return 0;
   1738					;
   1739	0708  33 C0			     xor     ax,ax
   1740	070A  EB DA			     jmp     short @8@86
   1741	070C			     @8@142:
   1742					;
   1743					;    }
   1744					;
   1745	070C  5E			     pop     si
   1746	070D  5D			     pop     bp
   1747	070E  C3			     ret
   1748	070F			     command_var_unset	     endp
   1749					;
   1750					;    static char far *command_var_value(char far *nome)
   1751					;
   1752					     assume  cs:_TEXT
   1753	070F			     command_var_value	     proc    near
   1754	070F  55			     push    bp
   1755	0710  8B EC			     mov     bp,sp
   1756	0712  56			     push    si
   1757					;
   1758					;    {
   1759					;      int i;
   1760					;
   1761					;      i = command_var_search(nome);
   1762					;
   1763	0713  FF 76 06			     push    word ptr [bp+6]
   1764	0716  FF 76 04			     push    word ptr [bp+4]
   1765	0719  E8 FF70			     call    near ptr command_var_search
   1766	071C  59			     pop     cx
   1767	071D  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 32
command.ASM



   1768	071E  8B F0			     mov     si,ax
   1769					;
   1770					;      if (i==-1)
   1771					;
   1772	0720  83 FE FF			     cmp     si,-1
   1773	0723  75 06			     jne     short @9@114
   1774					;
   1775					;	  return NULL;
   1776					;
   1777	0725  33 D2			     xor     dx,dx
   1778	0727  33 C0			     xor     ax,ax
   1779	0729			     @9@86:
   1780	0729  EB 0E			     jmp     short @9@142
   1781	072B			     @9@114:
   1782					;
   1783					;      return var[i].value;
   1784					;
   1785	072B  8B C6			     mov     ax,si
   1786	072D  BA 0032			     mov     dx,50
   1787	0730  F7 EA			     imul    dx
   1788	0732  05 0025r			     add     ax,offset DGROUP:var+13
   1789	0735  8C DA			     mov     dx,ds
   1790	0737  EB F0			     jmp     short @9@86
   1791	0739			     @9@142:
   1792					;
   1793					;    }
   1794					;
   1795	0739  5E			     pop     si
   1796	073A  5D			     pop     bp
   1797	073B  C3			     ret
   1798	073C			     command_var_value	     endp
   1799					;
   1800					;    static int	command_var_set(char far *nome,char far	*valor)
   1801					;
   1802					     assume  cs:_TEXT
   1803	073C			     command_var_set proc    near
   1804	073C  55			     push    bp
   1805	073D  8B EC			     mov     bp,sp
   1806	073F  56			     push    si
   1807					;
   1808					;    {
   1809					;      int i;
   1810					;
   1811					;      if (strlen(nome)>VAR_NOME_TAM)
   1812					;
   1813	0740  FF 76 06			     push    word ptr [bp+6]
   1814	0743  FF 76 04			     push    word ptr [bp+4]
   1815	0746  E8 0000e			     call    near ptr _strlen
   1816	0749  59			     pop     cx
   1817	074A  59			     pop     cx
   1818	074B  3D 000C			     cmp     ax,12
   1819	074E  76 05			     jbe     short @10@114
   1820					;
   1821					;	  return -3;
   1822					;
   1823	0750  B8 FFFD			     mov     ax,-3
   1824	0753			     @10@86:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 33
command.ASM



   1825	0753  EB 6A			     jmp     short @10@310
   1826	0755			     @10@114:
   1827					;
   1828					;      if (strlen(valor)>VAR_VALOR_TAM)
   1829					;
   1830	0755  FF 76 0A			     push    word ptr [bp+10]
   1831	0758  FF 76 08			     push    word ptr [bp+8]
   1832	075B  E8 0000e			     call    near ptr _strlen
   1833	075E  59			     pop     cx
   1834	075F  59			     pop     cx
   1835	0760  3D 0024			     cmp     ax,36
   1836	0763  76 05			     jbe     short @10@170
   1837					;
   1838					;	  return -4;
   1839					;
   1840	0765  B8 FFFC			     mov     ax,-4
   1841	0768  EB E9			     jmp     short @10@86
   1842	076A			     @10@170:
   1843					;
   1844					;      i = command_var_search(nome);
   1845					;
   1846	076A  FF 76 06			     push    word ptr [bp+6]
   1847	076D  FF 76 04			     push    word ptr [bp+4]
   1848	0770  E8 FF19			     call    near ptr command_var_search
   1849	0773  59			     pop     cx
   1850	0774  59			     pop     cx
   1851	0775  8B F0			     mov     si,ax
   1852					;
   1853					;      if (i==-1)  {
   1854					;
   1855	0777  83 FE FF			     cmp     si,-1
   1856	077A  75 27			     jne     short @10@282
   1857					;
   1858					;	  i = command_var_nextfree();
   1859					;
   1860	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1861	077F  8B F0			     mov     si,ax
   1862					;
   1863					;	  if (i==-1)
   1864					;
   1865	0781  83 FE FF			     cmp     si,-1
   1866	0784  75 05			     jne     short @10@254
   1867					;
   1868					;	     return -2;
   1869					;
   1870	0786  B8 FFFE			     mov     ax,-2
   1871	0789  EB C8			     jmp     short @10@86
   1872	078B			     @10@254:
   1873					;
   1874					;	  strcpy(var[i].name,nome);
   1875					;
   1876	078B  FF 76 06			     push    word ptr [bp+6]
   1877	078E  FF 76 04			     push    word ptr [bp+4]
   1878	0791  1E			     push    ds
   1879	0792  8B C6			     mov     ax,si
   1880	0794  BA 0032			     mov     dx,50
   1881	0797  F7 EA			     imul    dx
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 34
command.ASM



   1882	0799  05 0018r			     add     ax,offset DGROUP:var
   1883	079C  50			     push    ax
   1884	079D  E8 0000e			     call    near ptr _strcpy
   1885	07A0  83 C4 08			     add     sp,8
   1886	07A3			     @10@282:
   1887					;
   1888					;      }
   1889					;      strcpy(var[i].value,valor);
   1890					;
   1891	07A3  FF 76 0A			     push    word ptr [bp+10]
   1892	07A6  FF 76 08			     push    word ptr [bp+8]
   1893	07A9  1E			     push    ds
   1894	07AA  8B C6			     mov     ax,si
   1895	07AC  BA 0032			     mov     dx,50
   1896	07AF  F7 EA			     imul    dx
   1897	07B1  05 0025r			     add     ax,offset DGROUP:var+13
   1898	07B4  50			     push    ax
   1899	07B5  E8 0000e			     call    near ptr _strcpy
   1900	07B8  83 C4 08			     add     sp,8
   1901					;
   1902					;      return 0;
   1903					;
   1904	07BB  33 C0			     xor     ax,ax
   1905	07BD  EB 94			     jmp     short @10@86
   1906	07BF			     @10@310:
   1907					;
   1908					;    }
   1909					;
   1910	07BF  5E			     pop     si
   1911	07C0  5D			     pop     bp
   1912	07C1  C3			     ret
   1913	07C2			     command_var_set endp
   1914					;
   1915					;    int cmd_reboot(int	argc, char far *argv[])
   1916					;
   1917					     assume  cs:_TEXT
   1918	07C2			     _cmd_reboot     proc    near
   1919	07C2  55			     push    bp
   1920	07C3  8B EC			     mov     bp,sp
   1921	07C5  56			     push    si
   1922	07C6  57			     push    di
   1923	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1924	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1925					;
   1926					;    {
   1927					;      argc=argc;
   1928					;
   1929					;
   1930					;      argv=argv;
   1931					;
   1932					;
   1933					;      reboot();
   1934					;
   1935	07CD  E8 0000e			     call    near ptr _reboot
   1936					;
   1937					;      return 0;
   1938					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 35
command.ASM



   1939	07D0  33 C0			     xor     ax,ax
   1940	07D2  EB 00			     jmp     short @11@58
   1941	07D4			     @11@58:
   1942					;
   1943					;    }
   1944					;
   1945	07D4  5F			     pop     di
   1946	07D5  5E			     pop     si
   1947	07D6  5D			     pop     bp
   1948	07D7  C3			     ret
   1949	07D8			     _cmd_reboot     endp
   1950					;
   1951					;    int cmd_exit(int argc, char far *argv[])
   1952					;
   1953					     assume  cs:_TEXT
   1954	07D8			     _cmd_exit	     proc    near
   1955	07D8  55			     push    bp
   1956	07D9  8B EC			     mov     bp,sp
   1957	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1958	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1959					;
   1960					;    {
   1961					;      argc=argc;
   1962					;
   1963					;
   1964					;      argv=argv;
   1965					;
   1966					;
   1967					;      end_command = 1;
   1968					;
   1969	07E1  C7 06 0627r 0001		     mov     word ptr DGROUP:end_command,1
   1970					;
   1971					;      return 0;
   1972					;
   1973	07E7  33 C0			     xor     ax,ax
   1974	07E9  EB 00			     jmp     short @12@58
   1975	07EB			     @12@58:
   1976					;
   1977					;    }
   1978					;
   1979	07EB  5D			     pop     bp
   1980	07EC  C3			     ret
   1981	07ED			     _cmd_exit	     endp
   1982					;
   1983					;    int cmd_help(int argc, char far *argv[])
   1984					;
   1985					     assume  cs:_TEXT
   1986	07ED			     _cmd_help	     proc    near
   1987	07ED  55			     push    bp
   1988	07EE  8B EC			     mov     bp,sp
   1989	07F0  56			     push    si
   1990	07F1  57			     push    di
   1991	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   1992					;
   1993					;    {
   1994					;      int i;
   1995					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 36
command.ASM



   1996					;      argc=argc;
   1997					;
   1998					;
   1999					;      argv=argv;
   2000					;
   2001	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2002	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2003					;
   2004					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2005					;
   2006	07FB  1E			     push    ds
   2007	07FC  B8 0646r			     mov     ax,offset DGROUP:s@+1450
   2008	07FF  50			     push    ax
   2009	0800  E8 0000e			     call    near ptr _putstr
   2010	0803  59			     pop     cx
   2011	0804  59			     pop     cx
   2012					;
   2013					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2014					;
   2015	0805  33 F6			     xor     si,si
   2016	0807  EB 2F			     jmp     short @13@114
   2017	0809			     @13@58:
   2018					;
   2019					;	   putstr(commands[i].name);
   2020					;
   2021	0809  1E			     push    ds
   2022	080A  8B C6			     mov     ax,si
   2023	080C  BA 0006			     mov     dx,6
   2024	080F  F7 EA			     imul    dx
   2025	0811  8B D8			     mov     bx,ax
   2026	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2027	0817  E8 0000e			     call    near ptr _putstr
   2028	081A  59			     pop     cx
   2029	081B  59			     pop     cx
   2030					;
   2031					;	   putstr(commands[i].help);
   2032					;
   2033	081C  1E			     push    ds
   2034	081D  8B C6			     mov     ax,si
   2035	081F  BA 0006			     mov     dx,6
   2036	0822  F7 EA			     imul    dx
   2037	0824  8B D8			     mov     bx,ax
   2038	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2039	082A  E8 0000e			     call    near ptr _putstr
   2040	082D  59			     pop     cx
   2041	082E  59			     pop     cx
   2042					;
   2043					;	   putch('\n');
   2044					;
   2045	082F  B8 000A			     mov     ax,10
   2046	0832  50			     push    ax
   2047	0833  E8 0000e			     call    near ptr _putch
   2048	0836  59			     pop     cx
   2049	0837  46			     inc     si
   2050	0838			     @13@114:
   2051	0838  83 FE 19			     cmp     si,25
   2052	083B  7C CC			     jl	     short @13@58
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 37
command.ASM



   2053					;
   2054					;      }
   2055					;      return 0;
   2056					;
   2057	083D  33 C0			     xor     ax,ax
   2058	083F  EB 00			     jmp     short @13@170
   2059	0841			     @13@170:
   2060					;
   2061					;    }
   2062					;
   2063	0841  5F			     pop     di
   2064	0842  5E			     pop     si
   2065	0843  5D			     pop     bp
   2066	0844  C3			     ret
   2067	0845			     _cmd_help	     endp
   2068					;
   2069					;    int cmd_date(int argc, char far *argv[])
   2070					;
   2071					     assume  cs:_TEXT
   2072	0845			     _cmd_date	     proc    near
   2073	0845  55			     push    bp
   2074	0846  8B EC			     mov     bp,sp
   2075	0848  83 EC 18			     sub     sp,24
   2076	084B  56			     push    si
   2077	084C  57			     push    di
   2078	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2079	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2080					;
   2081					;    {
   2082					;      struct date d;
   2083					;      char str[20];
   2084					;
   2085					;      argc=argc;
   2086					;
   2087					;
   2088					;      argv=argv;
   2089					;
   2090					;
   2091					;
   2092					;
   2093					;
   2094					;      getdate(&d);
   2095					;
   2096	0853  16			     push    ss
   2097	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2098	0857  50			     push    ax
   2099	0858  E8 0000e			     call    near ptr _getdate
   2100	085B  59			     pop     cx
   2101	085C  59			     pop     cx
   2102					;
   2103					;      unsignedtostr(str,d.da_day,2,'0');
   2104					;
   2105	085D  B0 30			     mov     al,48
   2106	085F  50			     push    ax
   2107	0860  B8 0002			     mov     ax,2
   2108	0863  50			     push    ax
   2109	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 38
command.ASM



   2110	0867  98			     cbw
   2111	0868  50			     push    ax
   2112	0869  16			     push    ss
   2113	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2114	086D  50			     push    ax
   2115	086E  E8 0000e			     call    near ptr _unsignedtostr
   2116	0871  83 C4 0A			     add     sp,10
   2117					;
   2118					;      putstr(str);
   2119					;
   2120	0874  16			     push    ss
   2121	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2122	0878  50			     push    ax
   2123	0879  E8 0000e			     call    near ptr _putstr
   2124	087C  59			     pop     cx
   2125	087D  59			     pop     cx
   2126					;
   2127					;      putch('/');
   2128					;
   2129	087E  B8 002F			     mov     ax,47
   2130	0881  50			     push    ax
   2131	0882  E8 0000e			     call    near ptr _putch
   2132	0885  59			     pop     cx
   2133					;
   2134					;      unsignedtostr(str,d.da_mon,2,'0');
   2135					;
   2136	0886  B0 30			     mov     al,48
   2137	0888  50			     push    ax
   2138	0889  B8 0002			     mov     ax,2
   2139	088C  50			     push    ax
   2140	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2141	0890  98			     cbw
   2142	0891  50			     push    ax
   2143	0892  16			     push    ss
   2144	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2145	0896  50			     push    ax
   2146	0897  E8 0000e			     call    near ptr _unsignedtostr
   2147	089A  83 C4 0A			     add     sp,10
   2148					;
   2149					;      putstr(str);
   2150					;
   2151	089D  16			     push    ss
   2152	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2153	08A1  50			     push    ax
   2154	08A2  E8 0000e			     call    near ptr _putstr
   2155	08A5  59			     pop     cx
   2156	08A6  59			     pop     cx
   2157					;
   2158					;      putch('/');
   2159					;
   2160	08A7  B8 002F			     mov     ax,47
   2161	08AA  50			     push    ax
   2162	08AB  E8 0000e			     call    near ptr _putch
   2163	08AE  59			     pop     cx
   2164					;
   2165					;      unsignedtostr(str,d.da_year,4,'0');
   2166					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 39
command.ASM



   2167	08AF  B0 30			     mov     al,48
   2168	08B1  50			     push    ax
   2169	08B2  B8 0004			     mov     ax,4
   2170	08B5  50			     push    ax
   2171	08B6  FF 76 FC			     push    word ptr [bp-4]
   2172	08B9  16			     push    ss
   2173	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2174	08BD  50			     push    ax
   2175	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2176	08C1  83 C4 0A			     add     sp,10
   2177					;
   2178					;      putstr(str);
   2179					;
   2180	08C4  16			     push    ss
   2181	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2182	08C8  50			     push    ax
   2183	08C9  E8 0000e			     call    near ptr _putstr
   2184	08CC  59			     pop     cx
   2185	08CD  59			     pop     cx
   2186					;
   2187					;      putch('\n');
   2188					;
   2189	08CE  B8 000A			     mov     ax,10
   2190	08D1  50			     push    ax
   2191	08D2  E8 0000e			     call    near ptr _putch
   2192	08D5  59			     pop     cx
   2193					;
   2194					;      return 0;
   2195					;
   2196	08D6  33 C0			     xor     ax,ax
   2197	08D8  EB 00			     jmp     short @14@58
   2198	08DA			     @14@58:
   2199					;
   2200					;    }
   2201					;
   2202	08DA  5F			     pop     di
   2203	08DB  5E			     pop     si
   2204	08DC  8B E5			     mov     sp,bp
   2205	08DE  5D			     pop     bp
   2206	08DF  C3			     ret
   2207	08E0			     _cmd_date	     endp
   2208					;
   2209					;    int cmd_time(int argc, char far *argv[])
   2210					;
   2211					     assume  cs:_TEXT
   2212	08E0			     _cmd_time	     proc    near
   2213	08E0  55			     push    bp
   2214	08E1  8B EC			     mov     bp,sp
   2215	08E3  83 EC 18			     sub     sp,24
   2216	08E6  56			     push    si
   2217	08E7  57			     push    di
   2218	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2219	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2220					;
   2221					;    {
   2222					;      struct time t;
   2223					;      char str[20];
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 40
command.ASM



   2224					;
   2225					;      argc=argc;
   2226					;
   2227					;
   2228					;      argv=argv;
   2229					;
   2230					;
   2231					;      gettime(&t);
   2232					;
   2233	08EE  16			     push    ss
   2234	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2235	08F2  50			     push    ax
   2236	08F3  E8 0000e			     call    near ptr _gettime
   2237	08F6  59			     pop     cx
   2238	08F7  59			     pop     cx
   2239					;
   2240					;      unsignedtostr(str,t.ti_hour,2,'0');
   2241					;
   2242	08F8  B0 30			     mov     al,48
   2243	08FA  50			     push    ax
   2244	08FB  B8 0002			     mov     ax,2
   2245	08FE  50			     push    ax
   2246	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2247	0902  B4 00			     mov     ah,0
   2248	0904  50			     push    ax
   2249	0905  16			     push    ss
   2250	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2251	0909  50			     push    ax
   2252	090A  E8 0000e			     call    near ptr _unsignedtostr
   2253	090D  83 C4 0A			     add     sp,10
   2254					;
   2255					;      putstr(str);
   2256					;
   2257	0910  16			     push    ss
   2258	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2259	0914  50			     push    ax
   2260	0915  E8 0000e			     call    near ptr _putstr
   2261	0918  59			     pop     cx
   2262	0919  59			     pop     cx
   2263					;
   2264					;      putch(':');
   2265					;
   2266	091A  B8 003A			     mov     ax,58
   2267	091D  50			     push    ax
   2268	091E  E8 0000e			     call    near ptr _putch
   2269	0921  59			     pop     cx
   2270					;
   2271					;
   2272					;
   2273					;      unsignedtostr(str,t.ti_min,2,'0');
   2274					;
   2275	0922  B0 30			     mov     al,48
   2276	0924  50			     push    ax
   2277	0925  B8 0002			     mov     ax,2
   2278	0928  50			     push    ax
   2279	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2280	092C  B4 00			     mov     ah,0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 41
command.ASM



   2281	092E  50			     push    ax
   2282	092F  16			     push    ss
   2283	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2284	0933  50			     push    ax
   2285	0934  E8 0000e			     call    near ptr _unsignedtostr
   2286	0937  83 C4 0A			     add     sp,10
   2287					;
   2288					;      putstr(str);
   2289					;
   2290	093A  16			     push    ss
   2291	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2292	093E  50			     push    ax
   2293	093F  E8 0000e			     call    near ptr _putstr
   2294	0942  59			     pop     cx
   2295	0943  59			     pop     cx
   2296					;
   2297					;      putch(':');
   2298					;
   2299	0944  B8 003A			     mov     ax,58
   2300	0947  50			     push    ax
   2301	0948  E8 0000e			     call    near ptr _putch
   2302	094B  59			     pop     cx
   2303					;
   2304					;      unsignedtostr(str,t.ti_sec,2,'0');
   2305					;
   2306	094C  B0 30			     mov     al,48
   2307	094E  50			     push    ax
   2308	094F  B8 0002			     mov     ax,2
   2309	0952  50			     push    ax
   2310	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2311	0956  B4 00			     mov     ah,0
   2312	0958  50			     push    ax
   2313	0959  16			     push    ss
   2314	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2315	095D  50			     push    ax
   2316	095E  E8 0000e			     call    near ptr _unsignedtostr
   2317	0961  83 C4 0A			     add     sp,10
   2318					;
   2319					;      putstr(str);
   2320					;
   2321	0964  16			     push    ss
   2322	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2323	0968  50			     push    ax
   2324	0969  E8 0000e			     call    near ptr _putstr
   2325	096C  59			     pop     cx
   2326	096D  59			     pop     cx
   2327					;
   2328					;      putch('\n');
   2329					;
   2330	096E  B8 000A			     mov     ax,10
   2331	0971  50			     push    ax
   2332	0972  E8 0000e			     call    near ptr _putch
   2333	0975  59			     pop     cx
   2334					;
   2335					;      return 0;
   2336					;
   2337	0976  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 42
command.ASM



   2338	0978  EB 00			     jmp     short @15@58
   2339	097A			     @15@58:
   2340					;
   2341					;    }
   2342					;
   2343	097A  5F			     pop     di
   2344	097B  5E			     pop     si
   2345	097C  8B E5			     mov     sp,bp
   2346	097E  5D			     pop     bp
   2347	097F  C3			     ret
   2348	0980			     _cmd_time	     endp
   2349					;
   2350					;    int cmd_cls(int argc, char	far *argv[])
   2351					;
   2352					     assume  cs:_TEXT
   2353	0980			     _cmd_cls	     proc    near
   2354	0980  55			     push    bp
   2355	0981  8B EC			     mov     bp,sp
   2356	0983  56			     push    si
   2357	0984  57			     push    di
   2358	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2359	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2360					;
   2361					;    {
   2362					;      argc=argc;
   2363					;
   2364					;
   2365					;      argv=argv;
   2366					;
   2367					;
   2368					;      clrscr();
   2369					;
   2370	098B  E8 0000e			     call    near ptr _clrscr
   2371					;
   2372					;      return 0;
   2373					;
   2374	098E  33 C0			     xor     ax,ax
   2375	0990  EB 00			     jmp     short @16@58
   2376	0992			     @16@58:
   2377					;
   2378					;    }
   2379					;
   2380	0992  5F			     pop     di
   2381	0993  5E			     pop     si
   2382	0994  5D			     pop     bp
   2383	0995  C3			     ret
   2384	0996			     _cmd_cls	     endp
   2385					;
   2386					;    int cmd_ver(int argc, char	far *argv[])
   2387					;
   2388					     assume  cs:_TEXT
   2389	0996			     _cmd_ver	     proc    near
   2390	0996  55			     push    bp
   2391	0997  8B EC			     mov     bp,sp
   2392	0999  56			     push    si
   2393	099A  57			     push    di
   2394	099B  8B 76 04			     mov     si,word ptr [bp+4]
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 43
command.ASM



   2395	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2396					;
   2397					;    {
   2398					;      argc=argc;
   2399					;
   2400					;
   2401					;      argv=argv;
   2402					;
   2403					;
   2404					;      putstr("minisSistema Operacional	- Vs ");
   2405					;
   2406	09A1  1E			     push    ds
   2407	09A2  B8 066Dr			     mov     ax,offset DGROUP:s@+1489
   2408	09A5  50			     push    ax
   2409	09A6  E8 0000e			     call    near ptr _putstr
   2410	09A9  59			     pop     cx
   2411	09AA  59			     pop     cx
   2412					;
   2413					;      putstr(miniSO_VERSION);
   2414					;
   2415	09AB  1E			     push    ds
   2416	09AC  B8 068Cr			     mov     ax,offset DGROUP:s@+1520
   2417	09AF  50			     push    ax
   2418	09B0  E8 0000e			     call    near ptr _putstr
   2419	09B3  59			     pop     cx
   2420	09B4  59			     pop     cx
   2421					;
   2422					;      putch('\n');
   2423					;
   2424	09B5  B8 000A			     mov     ax,10
   2425	09B8  50			     push    ax
   2426	09B9  E8 0000e			     call    near ptr _putch
   2427	09BC  59			     pop     cx
   2428					;
   2429					;      return 0;
   2430					;
   2431	09BD  33 C0			     xor     ax,ax
   2432	09BF  EB 00			     jmp     short @17@58
   2433	09C1			     @17@58:
   2434					;
   2435					;    }
   2436					;
   2437	09C1  5F			     pop     di
   2438	09C2  5E			     pop     si
   2439	09C3  5D			     pop     bp
   2440	09C4  C3			     ret
   2441	09C5			     _cmd_ver	     endp
   2442	09C5			     _TEXT   ends
   2443	0000			     _BSS    segment word public 'BSS'
   2444	0000  14*(??)			     db	     20	dup (?)
   2445	0014			     _BSS    ends
   2446	09C5			     _TEXT   segment byte public 'CODE'
   2447					;
   2448					;    int cmd_ps(int argc, char far *argv[])
   2449					;
   2450					     assume  cs:_TEXT
   2451	09C5			     _cmd_ps proc    near
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 44
command.ASM



   2452	09C5  55			     push    bp
   2453	09C6  8B EC			     mov     bp,sp
   2454	09C8  56			     push    si
   2455	09C9  57			     push    di
   2456					;
   2457					;    {
   2458					;      int i,l;
   2459					;      static char str[20];
   2460					;      extern miniSO_PCB miniSO_thread[];
   2461					;
   2462					;      argc=argc;
   2463					;
   2464	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2465	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2466					;
   2467					;      argv=argv;
   2468					;
   2469	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2470	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2471					;
   2472					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2473					;
   2474	09D6  1E			     push    ds
   2475	09D7  B8 0691r			     mov     ax,offset DGROUP:s@+1525
   2476	09DA  50			     push    ax
   2477	09DB  E8 0000e			     call    near ptr _putstr
   2478	09DE  59			     pop     cx
   2479	09DF  59			     pop     cx
   2480					;
   2481					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2482					;
   2483	09E0  33 FF			     xor     di,di
   2484	09E2  E9 0260			     jmp     @18@1066
   2485	09E5			     @18@58:
   2486					;
   2487					;	   if (miniSO_thread[i].status!=FREE)  {
   2488					;
   2489	09E5  8B C7			     mov     ax,di
   2490	09E7  BA 001A			     mov     dx,26
   2491	09EA  F7 EA			     imul    dx
   2492	09EC  8B D8			     mov     bx,ax
   2493	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2494	09F3  75 03			     jne     @@4
   2495	09F5  E9 024C			     jmp     @18@1038
   2496	09F8			     @@4:
   2497					;
   2498					;	      inttostr(str,i);
   2499					;
   2500	09F8  57			     push    di
   2501	09F9  1E			     push    ds
   2502	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2503	09FD  50			     push    ax
   2504	09FE  E8 0000e			     call    near ptr _inttostr
   2505	0A01  83 C4 06			     add     sp,6
   2506					;
   2507					;	      l=strlen(str);
   2508					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 45
command.ASM



   2509	0A04  1E			     push    ds
   2510	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2511	0A08  50			     push    ax
   2512	0A09  E8 0000e			     call    near ptr _strlen
   2513	0A0C  59			     pop     cx
   2514	0A0D  59			     pop     cx
   2515	0A0E  8B F0			     mov     si,ax
   2516	0A10  EB 08			     jmp     short @18@142
   2517	0A12			     @18@114:
   2518					;
   2519					;	      while (l++<3)
   2520					;		    putch(' ');
   2521					;
   2522	0A12  B8 0020			     mov     ax,32
   2523	0A15  50			     push    ax
   2524	0A16  E8 0000e			     call    near ptr _putch
   2525	0A19  59			     pop     cx
   2526	0A1A			     @18@142:
   2527	0A1A  8B C6			     mov     ax,si
   2528	0A1C  46			     inc     si
   2529	0A1D  3D 0003			     cmp     ax,3
   2530	0A20  7C F0			     jl	     short @18@114
   2531					;
   2532					;	      putstr(str);
   2533					;
   2534	0A22  1E			     push    ds
   2535	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2536	0A26  50			     push    ax
   2537	0A27  E8 0000e			     call    near ptr _putstr
   2538	0A2A  59			     pop     cx
   2539	0A2B  59			     pop     cx
   2540					;
   2541					;	      putstr("	");
   2542					;
   2543	0A2C  1E			     push    ds
   2544	0A2D  B8 06C8r			     mov     ax,offset DGROUP:s@+1580
   2545	0A30  50			     push    ax
   2546	0A31  E8 0000e			     call    near ptr _putstr
   2547	0A34  59			     pop     cx
   2548	0A35  59			     pop     cx
   2549					;
   2550					;	      inttostr(str,miniSO_thread[i].pid);
   2551					;
   2552	0A36  8B C7			     mov     ax,di
   2553	0A38  BA 001A			     mov     dx,26
   2554	0A3B  F7 EA			     imul    dx
   2555	0A3D  8B D8			     mov     bx,ax
   2556	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2557	0A43  1E			     push    ds
   2558	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2559	0A47  50			     push    ax
   2560	0A48  E8 0000e			     call    near ptr _inttostr
   2561	0A4B  83 C4 06			     add     sp,6
   2562					;
   2563					;	      l=strlen(str);
   2564					;
   2565	0A4E  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 46
command.ASM



   2566	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2567	0A52  50			     push    ax
   2568	0A53  E8 0000e			     call    near ptr _strlen
   2569	0A56  59			     pop     cx
   2570	0A57  59			     pop     cx
   2571	0A58  8B F0			     mov     si,ax
   2572	0A5A  EB 08			     jmp     short @18@226
   2573	0A5C			     @18@198:
   2574					;
   2575					;	      while (l++<5)
   2576					;		    putch(' ');
   2577					;
   2578	0A5C  B8 0020			     mov     ax,32
   2579	0A5F  50			     push    ax
   2580	0A60  E8 0000e			     call    near ptr _putch
   2581	0A63  59			     pop     cx
   2582	0A64			     @18@226:
   2583	0A64  8B C6			     mov     ax,si
   2584	0A66  46			     inc     si
   2585	0A67  3D 0005			     cmp     ax,5
   2586	0A6A  7C F0			     jl	     short @18@198
   2587					;
   2588					;	      putstr(str);
   2589					;
   2590	0A6C  1E			     push    ds
   2591	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2592	0A70  50			     push    ax
   2593	0A71  E8 0000e			     call    near ptr _putstr
   2594	0A74  59			     pop     cx
   2595	0A75  59			     pop     cx
   2596					;
   2597					;	      putstr("	");
   2598					;
   2599	0A76  1E			     push    ds
   2600	0A77  B8 06CBr			     mov     ax,offset DGROUP:s@+1583
   2601	0A7A  50			     push    ax
   2602	0A7B  E8 0000e			     call    near ptr _putstr
   2603	0A7E  59			     pop     cx
   2604	0A7F  59			     pop     cx
   2605					;
   2606					;	      inttostr(str,miniSO_thread[i].ppid);
   2607					;
   2608	0A80  8B C7			     mov     ax,di
   2609	0A82  BA 001A			     mov     dx,26
   2610	0A85  F7 EA			     imul    dx
   2611	0A87  8B D8			     mov     bx,ax
   2612	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2613	0A8D  1E			     push    ds
   2614	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2615	0A91  50			     push    ax
   2616	0A92  E8 0000e			     call    near ptr _inttostr
   2617	0A95  83 C4 06			     add     sp,6
   2618					;
   2619					;	      l=strlen(str);
   2620					;
   2621	0A98  1E			     push    ds
   2622	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 47
command.ASM



   2623	0A9C  50			     push    ax
   2624	0A9D  E8 0000e			     call    near ptr _strlen
   2625	0AA0  59			     pop     cx
   2626	0AA1  59			     pop     cx
   2627	0AA2  8B F0			     mov     si,ax
   2628	0AA4  EB 08			     jmp     short @18@310
   2629	0AA6			     @18@282:
   2630					;
   2631					;	      while (l++<5)
   2632					;		    putch(' ');
   2633					;
   2634	0AA6  B8 0020			     mov     ax,32
   2635	0AA9  50			     push    ax
   2636	0AAA  E8 0000e			     call    near ptr _putch
   2637	0AAD  59			     pop     cx
   2638	0AAE			     @18@310:
   2639	0AAE  8B C6			     mov     ax,si
   2640	0AB0  46			     inc     si
   2641	0AB1  3D 0005			     cmp     ax,5
   2642	0AB4  7C F0			     jl	     short @18@282
   2643					;
   2644					;	      putstr(str);
   2645					;
   2646	0AB6  1E			     push    ds
   2647	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2648	0ABA  50			     push    ax
   2649	0ABB  E8 0000e			     call    near ptr _putstr
   2650	0ABE  59			     pop     cx
   2651	0ABF  59			     pop     cx
   2652					;
   2653					;	      putstr("	");
   2654					;
   2655	0AC0  1E			     push    ds
   2656	0AC1  B8 06CEr			     mov     ax,offset DGROUP:s@+1586
   2657	0AC4  50			     push    ax
   2658	0AC5  E8 0000e			     call    near ptr _putstr
   2659	0AC8  59			     pop     cx
   2660	0AC9  59			     pop     cx
   2661					;
   2662					;	      switch(miniSO_thread[i].status)  {
   2663					;
   2664	0ACA  8B C7			     mov     ax,di
   2665	0ACC  BA 001A			     mov     dx,26
   2666	0ACF  F7 EA			     imul    dx
   2667	0AD1  8B D8			     mov     bx,ax
   2668	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2669	0AD7  43			     inc     bx
   2670	0AD8  83 FB 06			     cmp     bx,6
   2671	0ADB  77 37			     ja	     short @18@674
   2672	0ADD  D1 E3			     shl     bx,1
   2673	0ADF  2E: FF A7	0C55r		     jmp     word ptr cs:@18@C1234[bx]
   2674	0AE4			     @18@450:
   2675					;
   2676					;		    case FREE:	  putstr(strFREE);    break;
   2677					;
   2678	0AE4  1E			     push    ds
   2679	0AE5  B8 06D1r			     mov     ax,offset DGROUP:s@+1589
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 48
command.ASM



   2680	0AE8			     @18@478:
   2681	0AE8  50			     push    ax
   2682	0AE9  E8 0000e			     call    near ptr _putstr
   2683	0AEC  59			     pop     cx
   2684	0AED  59			     pop     cx
   2685	0AEE  EB 24			     jmp     short @18@674
   2686	0AF0			     @18@506:
   2687					;
   2688					;		    case READY:	  putstr(strREADY);   break;
   2689					;
   2690	0AF0  1E			     push    ds
   2691	0AF1  B8 06D9r			     mov     ax,offset DGROUP:s@+1597
   2692	0AF4  EB F2			     jmp     short @18@478
   2693	0AF6			     @18@534:
   2694					;
   2695					;		    case RUNNING: putstr(strRUNNING); break;
   2696					;
   2697	0AF6  1E			     push    ds
   2698	0AF7  B8 06E1r			     mov     ax,offset DGROUP:s@+1605
   2699	0AFA  EB EC			     jmp     short @18@478
   2700	0AFC			     @18@562:
   2701					;
   2702					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2703					;
   2704	0AFC  1E			     push    ds
   2705	0AFD  B8 06E9r			     mov     ax,offset DGROUP:s@+1613
   2706	0B00  EB E6			     jmp     short @18@478
   2707	0B02			     @18@590:
   2708					;
   2709					;		    case WAIT:	  putstr(strWAIT);    break;
   2710					;
   2711	0B02  1E			     push    ds
   2712	0B03  B8 06F1r			     mov     ax,offset DGROUP:s@+1621
   2713	0B06  EB E0			     jmp     short @18@478
   2714	0B08			     @18@618:
   2715					;
   2716					;		    case WAITSIG: putstr(strWAITSIG); break;
   2717					;
   2718	0B08  1E			     push    ds
   2719	0B09  B8 06F9r			     mov     ax,offset DGROUP:s@+1629
   2720	0B0C  EB DA			     jmp     short @18@478
   2721	0B0E			     @18@646:
   2722					;
   2723					;		    case WAITSEM: putstr(strWAITSEM); break;
   2724					;
   2725	0B0E  1E			     push    ds
   2726	0B0F  B8 0701r			     mov     ax,offset DGROUP:s@+1637
   2727	0B12  EB D4			     jmp     short @18@478
   2728	0B14			     @18@674:
   2729					;
   2730					;	      }
   2731					;	      putstr("	");
   2732					;
   2733	0B14  1E			     push    ds
   2734	0B15  B8 0709r			     mov     ax,offset DGROUP:s@+1645
   2735	0B18  50			     push    ax
   2736	0B19  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 49
command.ASM



   2737	0B1C  59			     pop     cx
   2738	0B1D  59			     pop     cx
   2739					;
   2740					;	      inttostr(str,miniSO_thread[i].wait);
   2741					;
   2742	0B1E  8B C7			     mov     ax,di
   2743	0B20  BA 001A			     mov     dx,26
   2744	0B23  F7 EA			     imul    dx
   2745	0B25  8B D8			     mov     bx,ax
   2746	0B27  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2747	0B2B  1E			     push    ds
   2748	0B2C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2749	0B2F  50			     push    ax
   2750	0B30  E8 0000e			     call    near ptr _inttostr
   2751	0B33  83 C4 06			     add     sp,6
   2752					;
   2753					;	      l=strlen(str);
   2754					;
   2755	0B36  1E			     push    ds
   2756	0B37  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2757	0B3A  50			     push    ax
   2758	0B3B  E8 0000e			     call    near ptr _strlen
   2759	0B3E  59			     pop     cx
   2760	0B3F  59			     pop     cx
   2761	0B40  8B F0			     mov     si,ax
   2762	0B42  EB 08			     jmp     short @18@730
   2763	0B44			     @18@702:
   2764					;
   2765					;	      while (l++<5)
   2766					;		    putch(' ');
   2767					;
   2768	0B44  B8 0020			     mov     ax,32
   2769	0B47  50			     push    ax
   2770	0B48  E8 0000e			     call    near ptr _putch
   2771	0B4B  59			     pop     cx
   2772	0B4C			     @18@730:
   2773	0B4C  8B C6			     mov     ax,si
   2774	0B4E  46			     inc     si
   2775	0B4F  3D 0005			     cmp     ax,5
   2776	0B52  7C F0			     jl	     short @18@702
   2777					;
   2778					;	      putstr(str);
   2779					;
   2780	0B54  1E			     push    ds
   2781	0B55  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2782	0B58  50			     push    ax
   2783	0B59  E8 0000e			     call    near ptr _putstr
   2784	0B5C  59			     pop     cx
   2785	0B5D  59			     pop     cx
   2786					;
   2787					;
   2788					;	      putstr("	");
   2789					;
   2790	0B5E  1E			     push    ds
   2791	0B5F  B8 070Cr			     mov     ax,offset DGROUP:s@+1648
   2792	0B62  50			     push    ax
   2793	0B63  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 50
command.ASM



   2794	0B66  59			     pop     cx
   2795	0B67  59			     pop     cx
   2796					;
   2797					;	      inttostr(str,miniSO_thread[i].zombies);
   2798					;
   2799	0B68  8B C7			     mov     ax,di
   2800	0B6A  BA 001A			     mov     dx,26
   2801	0B6D  F7 EA			     imul    dx
   2802	0B6F  8B D8			     mov     bx,ax
   2803	0B71  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2804	0B75  1E			     push    ds
   2805	0B76  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2806	0B79  50			     push    ax
   2807	0B7A  E8 0000e			     call    near ptr _inttostr
   2808	0B7D  83 C4 06			     add     sp,6
   2809					;
   2810					;	      l=strlen(str);
   2811					;
   2812	0B80  1E			     push    ds
   2813	0B81  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2814	0B84  50			     push    ax
   2815	0B85  E8 0000e			     call    near ptr _strlen
   2816	0B88  59			     pop     cx
   2817	0B89  59			     pop     cx
   2818	0B8A  8B F0			     mov     si,ax
   2819	0B8C  EB 08			     jmp     short @18@814
   2820	0B8E			     @18@786:
   2821					;
   2822					;	      while (l++<5)
   2823					;		    putch(' ');
   2824					;
   2825	0B8E  B8 0020			     mov     ax,32
   2826	0B91  50			     push    ax
   2827	0B92  E8 0000e			     call    near ptr _putch
   2828	0B95  59			     pop     cx
   2829	0B96			     @18@814:
   2830	0B96  8B C6			     mov     ax,si
   2831	0B98  46			     inc     si
   2832	0B99  3D 0005			     cmp     ax,5
   2833	0B9C  7C F0			     jl	     short @18@786
   2834					;
   2835					;	      putstr(str);
   2836					;
   2837	0B9E  1E			     push    ds
   2838	0B9F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2839	0BA2  50			     push    ax
   2840	0BA3  E8 0000e			     call    near ptr _putstr
   2841	0BA6  59			     pop     cx
   2842	0BA7  59			     pop     cx
   2843					;
   2844					;
   2845					;	      putstr(" ");
   2846					;
   2847	0BA8  1E			     push    ds
   2848	0BA9  B8 070Fr			     mov     ax,offset DGROUP:s@+1651
   2849	0BAC  50			     push    ax
   2850	0BAD  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 51
command.ASM



   2851	0BB0  59			     pop     cx
   2852	0BB1  59			     pop     cx
   2853					;
   2854					;	      inttostr(str,miniSO_thread[i].prev);
   2855					;
   2856	0BB2  8B C7			     mov     ax,di
   2857	0BB4  BA 001A			     mov     dx,26
   2858	0BB7  F7 EA			     imul    dx
   2859	0BB9  8B D8			     mov     bx,ax
   2860	0BBB  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2861	0BBF  1E			     push    ds
   2862	0BC0  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2863	0BC3  50			     push    ax
   2864	0BC4  E8 0000e			     call    near ptr _inttostr
   2865	0BC7  83 C4 06			     add     sp,6
   2866					;
   2867					;	      l=strlen(str);
   2868					;
   2869	0BCA  1E			     push    ds
   2870	0BCB  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2871	0BCE  50			     push    ax
   2872	0BCF  E8 0000e			     call    near ptr _strlen
   2873	0BD2  59			     pop     cx
   2874	0BD3  59			     pop     cx
   2875	0BD4  8B F0			     mov     si,ax
   2876	0BD6  EB 08			     jmp     short @18@898
   2877	0BD8			     @18@870:
   2878					;
   2879					;	      while (l++<5)
   2880					;		    putch(' ');
   2881					;
   2882	0BD8  B8 0020			     mov     ax,32
   2883	0BDB  50			     push    ax
   2884	0BDC  E8 0000e			     call    near ptr _putch
   2885	0BDF  59			     pop     cx
   2886	0BE0			     @18@898:
   2887	0BE0  8B C6			     mov     ax,si
   2888	0BE2  46			     inc     si
   2889	0BE3  3D 0005			     cmp     ax,5
   2890	0BE6  7C F0			     jl	     short @18@870
   2891					;
   2892					;	      putstr(str);
   2893					;
   2894	0BE8  1E			     push    ds
   2895	0BE9  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2896	0BEC  50			     push    ax
   2897	0BED  E8 0000e			     call    near ptr _putstr
   2898	0BF0  59			     pop     cx
   2899	0BF1  59			     pop     cx
   2900					;
   2901					;
   2902					;	      putstr("	");
   2903					;
   2904	0BF2  1E			     push    ds
   2905	0BF3  B8 0711r			     mov     ax,offset DGROUP:s@+1653
   2906	0BF6  50			     push    ax
   2907	0BF7  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 52
command.ASM



   2908	0BFA  59			     pop     cx
   2909	0BFB  59			     pop     cx
   2910					;
   2911					;	      inttostr(str,miniSO_thread[i].next);
   2912					;
   2913	0BFC  8B C7			     mov     ax,di
   2914	0BFE  BA 001A			     mov     dx,26
   2915	0C01  F7 EA			     imul    dx
   2916	0C03  8B D8			     mov     bx,ax
   2917	0C05  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2918	0C09  1E			     push    ds
   2919	0C0A  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2920	0C0D  50			     push    ax
   2921	0C0E  E8 0000e			     call    near ptr _inttostr
   2922	0C11  83 C4 06			     add     sp,6
   2923					;
   2924					;	      l=strlen(str);
   2925					;
   2926	0C14  1E			     push    ds
   2927	0C15  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2928	0C18  50			     push    ax
   2929	0C19  E8 0000e			     call    near ptr _strlen
   2930	0C1C  59			     pop     cx
   2931	0C1D  59			     pop     cx
   2932	0C1E  8B F0			     mov     si,ax
   2933	0C20  EB 08			     jmp     short @18@982
   2934	0C22			     @18@954:
   2935					;
   2936					;	      while (l++<5)
   2937					;		    putch(' ');
   2938					;
   2939	0C22  B8 0020			     mov     ax,32
   2940	0C25  50			     push    ax
   2941	0C26  E8 0000e			     call    near ptr _putch
   2942	0C29  59			     pop     cx
   2943	0C2A			     @18@982:
   2944	0C2A  8B C6			     mov     ax,si
   2945	0C2C  46			     inc     si
   2946	0C2D  3D 0005			     cmp     ax,5
   2947	0C30  7C F0			     jl	     short @18@954
   2948					;
   2949					;	      putstr(str);
   2950					;
   2951	0C32  1E			     push    ds
   2952	0C33  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2953	0C36  50			     push    ax
   2954	0C37  E8 0000e			     call    near ptr _putstr
   2955	0C3A  59			     pop     cx
   2956	0C3B  59			     pop     cx
   2957					;
   2958					;	      putch('\n');
   2959					;
   2960	0C3C  B8 000A			     mov     ax,10
   2961	0C3F  50			     push    ax
   2962	0C40  E8 0000e			     call    near ptr _putch
   2963	0C43  59			     pop     cx
   2964	0C44			     @18@1038:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 53
command.ASM



   2965	0C44  47			     inc     di
   2966	0C45			     @18@1066:
   2967	0C45  83 FF 10			     cmp     di,16
   2968	0C48  7D 03			     jge     @@5
   2969	0C4A  E9 FD98			     jmp     @18@58
   2970	0C4D			     @@5:
   2971					;
   2972					;	   }
   2973					;      }
   2974					;      return 0;
   2975					;
   2976	0C4D  33 C0			     xor     ax,ax
   2977	0C4F  EB 00			     jmp     short @18@1122
   2978	0C51			     @18@1122:
   2979					;
   2980					;    }
   2981					;
   2982	0C51  5F			     pop     di
   2983	0C52  5E			     pop     si
   2984	0C53  5D			     pop     bp
   2985	0C54  C3			     ret
   2986	0C55			     _cmd_ps endp
   2987	0C55			     @18@C1234	     label   word
   2988	0C55  0AE4r			     dw	     @18@450
   2989	0C57  0AF0r			     dw	     @18@506
   2990	0C59  0AF6r			     dw	     @18@534
   2991	0C5B  0AFCr			     dw	     @18@562
   2992	0C5D  0B02r			     dw	     @18@590
   2993	0C5F  0B08r			     dw	     @18@618
   2994	0C61  0B0Er			     dw	     @18@646
   2995					;
   2996					;    int cmd_kill(int argc, char far *argv[])
   2997					;
   2998					     assume  cs:_TEXT
   2999	0C63			     _cmd_kill	     proc    near
   3000	0C63  55			     push    bp
   3001	0C64  8B EC			     mov     bp,sp
   3002	0C66  56			     push    si
   3003	0C67  57			     push    di
   3004					;
   3005					;    {
   3006					;      int t=0;
   3007					;
   3008	0C68  33 F6			     xor     si,si
   3009					;
   3010					;      pid_t pid=0;
   3011					;
   3012	0C6A  33 FF			     xor     di,di
   3013					;
   3014					;      char str[10];
   3015					;
   3016					;      if (argc<=1)  {
   3017					;
   3018	0C6C  83 7E 04 01		     cmp     word ptr [bp+4],1
   3019	0C70  7F 0F			     jg	     short @19@142
   3020					;
   3021					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 54
command.ASM



   3022					;
   3023	0C72  1E			     push    ds
   3024	0C73  B8 0714r			     mov     ax,offset DGROUP:s@+1656
   3025	0C76			     @19@86:
   3026	0C76  50			     push    ax
   3027	0C77  E8 0000e			     call    near ptr _putstr
   3028	0C7A  59			     pop     cx
   3029	0C7B  59			     pop     cx
   3030					;
   3031					;	  return 1;
   3032					;
   3033	0C7C  B8 0001			     mov     ax,1
   3034	0C7F			     @19@114:
   3035	0C7F  EB 26			     jmp     short @19@226
   3036	0C81			     @19@142:
   3037					;
   3038					;      }
   3039					;      pid = atoi(argv[1]);
   3040					;
   3041	0C81  8B 5E 06			     mov     bx,word ptr [bp+6]
   3042	0C84  FF 77 06			     push    word ptr [bx+6]
   3043	0C87  FF 77 04			     push    word ptr [bx+4]
   3044	0C8A  E8 0000e			     call    near ptr _atoi
   3045	0C8D  59			     pop     cx
   3046	0C8E  59			     pop     cx
   3047	0C8F  8B F8			     mov     di,ax
   3048					;
   3049					;      t = kill(pid);
   3050					;
   3051	0C91  57			     push    di
   3052	0C92  E8 0000e			     call    near ptr _kill
   3053	0C95  59			     pop     cx
   3054	0C96  8B F0			     mov     si,ax
   3055					;
   3056					;      if (t==miniSO_ERROR)  {
   3057					;
   3058	0C98  83 FE FF			     cmp     si,-1
   3059	0C9B  75 06			     jne     short @19@198
   3060					;
   3061					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3062					;
   3063	0C9D  1E			     push    ds
   3064	0C9E  B8 073Cr			     mov     ax,offset DGROUP:s@+1696
   3065	0CA1  EB D3			     jmp     short @19@86
   3066	0CA3			     @19@198:
   3067					;
   3068					;	  return 1;
   3069					;      }
   3070					;      return 0;
   3071					;
   3072	0CA3  33 C0			     xor     ax,ax
   3073	0CA5  EB D8			     jmp     short @19@114
   3074	0CA7			     @19@226:
   3075					;
   3076					;    }
   3077					;
   3078	0CA7  5F			     pop     di
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 55
command.ASM



   3079	0CA8  5E			     pop     si
   3080	0CA9  5D			     pop     bp
   3081	0CAA  C3			     ret
   3082	0CAB			     _cmd_kill	     endp
   3083					;
   3084					;    int cmd_set(int argc, char	far *argv[])
   3085					;
   3086					     assume  cs:_TEXT
   3087	0CAB			     _cmd_set	     proc    near
   3088	0CAB  55			     push    bp
   3089	0CAC  8B EC			     mov     bp,sp
   3090	0CAE  83 EC 02			     sub     sp,2
   3091	0CB1  56			     push    si
   3092	0CB2  57			     push    di
   3093	0CB3  8B 76 04			     mov     si,word ptr [bp+4]
   3094	0CB6  8B 7E 06			     mov     di,word ptr [bp+6]
   3095					;
   3096					;    {
   3097					;      int res;
   3098					;
   3099					;      if (argc	== 1)  {
   3100					;
   3101	0CB9  83 FE 01			     cmp     si,1
   3102	0CBC  75 07			     jne     short @20@142
   3103					;
   3104					;	  command_var_list();
   3105					;
   3106	0CBE  E8 F95C			     call    near ptr command_var_list
   3107					;
   3108					;	  return 0;
   3109					;
   3110	0CC1			     @20@86:
   3111	0CC1  33 C0			     xor     ax,ax
   3112	0CC3			     @20@114:
   3113	0CC3  EB 71			     jmp     short @20@534
   3114	0CC5			     @20@142:
   3115					;
   3116					;      }
   3117					;      if (argc	== 2)
   3118					;
   3119	0CC5  83 FE 02			     cmp     si,2
   3120	0CC8  75 16			     jne     short @20@198
   3121					;
   3122					;	  res =	command_var_set(argv[1],"");
   3123					;
   3124	0CCA  1E			     push    ds
   3125	0CCB  B8 0766r			     mov     ax,offset DGROUP:s@+1738
   3126	0CCE  50			     push    ax
   3127	0CCF  FF 75 06			     push    word ptr [di+6]
   3128	0CD2  FF 75 04			     push    word ptr [di+4]
   3129	0CD5  E8 FA64			     call    near ptr command_var_set
   3130	0CD8  83 C4 08			     add     sp,8
   3131	0CDB  89 46 FE			     mov     word ptr [bp-2],ax
   3132	0CDE  EB 21			     jmp     short @20@282
   3133	0CE0			     @20@198:
   3134					;
   3135					;      else if (argc ==	3)
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 56
command.ASM



   3136					;
   3137	0CE0  83 FE 03			     cmp     si,3
   3138	0CE3  75 17			     jne     short @20@254
   3139					;
   3140					;	    res	= command_var_set(argv[1],argv[2]);
   3141					;
   3142	0CE5  FF 75 0A			     push    word ptr [di+10]
   3143	0CE8  FF 75 08			     push    word ptr [di+8]
   3144	0CEB  FF 75 06			     push    word ptr [di+6]
   3145	0CEE  FF 75 04			     push    word ptr [di+4]
   3146	0CF1  E8 FA48			     call    near ptr command_var_set
   3147	0CF4  83 C4 08			     add     sp,8
   3148	0CF7  89 46 FE			     mov     word ptr [bp-2],ax
   3149	0CFA  EB 05			     jmp     short @20@282
   3150	0CFC			     @20@254:
   3151					;
   3152					;      else
   3153					;	  res =	-5;
   3154					;
   3155	0CFC  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3156	0D01			     @20@282:
   3157					;
   3158					;      switch (res)  {
   3159					;
   3160	0D01  8B 5E FE			     mov     bx,word ptr [bp-2]
   3161	0D04  83 EB FB			     sub     bx,-5
   3162	0D07  83 FB 03			     cmp     bx,3
   3163	0D0A  77 28			     ja	     short @20@506
   3164	0D0C  D1 E3			     shl     bx,1
   3165	0D0E  2E: FF A7	0D3Cr		     jmp     word ptr cs:@20@C482[bx]
   3166	0D13			     @20@366:
   3167					;
   3168					;	      case -2:
   3169					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3170					;
   3171	0D13  1E			     push    ds
   3172	0D14  B8 0767r			     mov     ax,offset DGROUP:s@+1739
   3173	0D17  EB 10			     jmp     short @20@478
   3174	0D19			     @20@394:
   3175					;
   3176					;		   return 1;
   3177					;	      case -3:
   3178					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3179					;
   3180	0D19  1E			     push    ds
   3181	0D1A  B8 0799r			     mov     ax,offset DGROUP:s@+1789
   3182	0D1D  EB 0A			     jmp     short @20@478
   3183	0D1F			     @20@422:
   3184					;
   3185					;		   return 1;
   3186					;	      case -4:
   3187					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3188				     grande!\n");
   3189					;
   3190	0D1F  1E			     push    ds
   3191	0D20  B8 07D5r			     mov     ax,offset DGROUP:s@+1849
   3192	0D23  EB 04			     jmp     short @20@478
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 57
command.ASM



   3193	0D25			     @20@450:
   3194					;
   3195					;		   return 1;
   3196					;	      case -5:
   3197					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3198					;
   3199	0D25  1E			     push    ds
   3200	0D26  B8 0815r			     mov     ax,offset DGROUP:s@+1913
   3201	0D29			     @20@478:
   3202	0D29  50			     push    ax
   3203	0D2A  E8 0000e			     call    near ptr _putstr
   3204	0D2D  59			     pop     cx
   3205	0D2E  59			     pop     cx
   3206					;
   3207					;		   return 1;
   3208					;
   3209	0D2F  B8 0001			     mov     ax,1
   3210	0D32  EB 8F			     jmp     short @20@114
   3211	0D34			     @20@506:
   3212	0D34  EB 8B			     jmp     short @20@86
   3213	0D36			     @20@534:
   3214					;
   3215					;      }
   3216					;      return 0;
   3217					;    }
   3218					;
   3219	0D36  5F			     pop     di
   3220	0D37  5E			     pop     si
   3221	0D38  8B E5			     mov     sp,bp
   3222	0D3A  5D			     pop     bp
   3223	0D3B  C3			     ret
   3224	0D3C			     _cmd_set	     endp
   3225	0D3C			     @20@C482	     label   word
   3226	0D3C  0D25r			     dw	     @20@450
   3227	0D3E  0D1Fr			     dw	     @20@422
   3228	0D40  0D19r			     dw	     @20@394
   3229	0D42  0D13r			     dw	     @20@366
   3230					;
   3231					;    int cmd_unset(int argc, char far *argv[])
   3232					;
   3233					     assume  cs:_TEXT
   3234	0D44			     _cmd_unset	     proc    near
   3235	0D44  55			     push    bp
   3236	0D45  8B EC			     mov     bp,sp
   3237	0D47  83 EC 02			     sub     sp,2
   3238					;
   3239					;    {
   3240					;      int res;
   3241					;
   3242					;      if (argc	!= 2)  {
   3243					;
   3244	0D4A  83 7E 04 02		     cmp     word ptr [bp+4],2
   3245	0D4E  74 0F			     je	     short @21@142
   3246					;
   3247					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3248					;
   3249	0D50  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 58
command.ASM



   3250	0D51  B8 084Ar			     mov     ax,offset DGROUP:s@+1966
   3251	0D54			     @21@86:
   3252	0D54  50			     push    ax
   3253	0D55  E8 0000e			     call    near ptr _putstr
   3254	0D58  59			     pop     cx
   3255	0D59  59			     pop     cx
   3256					;
   3257					;	  return 1;
   3258					;
   3259	0D5A  B8 0001			     mov     ax,1
   3260	0D5D			     @21@114:
   3261	0D5D  EB 21			     jmp     short @21@226
   3262	0D5F			     @21@142:
   3263					;
   3264					;      }
   3265					;      res = command_var_unset(argv[1]);
   3266					;
   3267	0D5F  8B 5E 06			     mov     bx,word ptr [bp+6]
   3268	0D62  FF 77 06			     push    word ptr [bx+6]
   3269	0D65  FF 77 04			     push    word ptr [bx+4]
   3270	0D68  E8 F962			     call    near ptr command_var_unset
   3271	0D6B  59			     pop     cx
   3272	0D6C  59			     pop     cx
   3273	0D6D  89 46 FE			     mov     word ptr [bp-2],ax
   3274					;
   3275					;      if (res == -1)  {
   3276					;
   3277	0D70  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3278	0D74  75 06			     jne     short @21@198
   3279					;
   3280					;	  putstr("Erro em unset: variavel inexistente!\n");
   3281					;
   3282	0D76  1E			     push    ds
   3283	0D77  B8 0879r			     mov     ax,offset DGROUP:s@+2013
   3284	0D7A  EB D8			     jmp     short @21@86
   3285	0D7C			     @21@198:
   3286					;
   3287					;	  return 1;
   3288					;      }
   3289					;      return 0;
   3290					;
   3291	0D7C  33 C0			     xor     ax,ax
   3292	0D7E  EB DD			     jmp     short @21@114
   3293	0D80			     @21@226:
   3294					;
   3295					;    }
   3296					;
   3297	0D80  8B E5			     mov     sp,bp
   3298	0D82  5D			     pop     bp
   3299	0D83  C3			     ret
   3300	0D84			     _cmd_unset	     endp
   3301					;
   3302					;    int cmd_echo(int argc, char far *argv[])
   3303					;
   3304					     assume  cs:_TEXT
   3305	0D84			     _cmd_echo	     proc    near
   3306	0D84  55			     push    bp
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 59
command.ASM



   3307	0D85  8B EC			     mov     bp,sp
   3308	0D87  83 EC 02			     sub     sp,2
   3309	0D8A  56			     push    si
   3310	0D8B  57			     push    di
   3311	0D8C  8B 7E 06			     mov     di,word ptr [bp+6]
   3312					;
   3313					;    {
   3314					;      int i,control_n=1;
   3315					;
   3316	0D8F  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3317					;
   3318					;
   3319					;      if (argc>1)  {
   3320					;
   3321	0D94  83 7E 04 01		     cmp     word ptr [bp+4],1
   3322	0D98  7E 55			     jle     short @22@338
   3323					;
   3324					;	  if (strcmp(argv[1],"-n")==0)
   3325					;
   3326	0D9A  1E			     push    ds
   3327	0D9B  B8 089Fr			     mov     ax,offset DGROUP:s@+2051
   3328	0D9E  50			     push    ax
   3329	0D9F  FF 75 06			     push    word ptr [di+6]
   3330	0DA2  FF 75 04			     push    word ptr [di+4]
   3331	0DA5  E8 0000e			     call    near ptr _strcmp
   3332	0DA8  83 C4 08			     add     sp,8
   3333	0DAB  0B C0			     or	     ax,ax
   3334	0DAD  75 07			     jne     short @22@114
   3335					;
   3336					;	     control_n = 0;
   3337					;
   3338	0DAF  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3339	0DB4  EB 0B			     jmp     short @22@142
   3340	0DB6			     @22@114:
   3341					;
   3342					;	  else
   3343					;	     putstr(argv[1]);
   3344					;
   3345	0DB6  FF 75 06			     push    word ptr [di+6]
   3346	0DB9  FF 75 04			     push    word ptr [di+4]
   3347	0DBC  E8 0000e			     call    near ptr _putstr
   3348	0DBF  59			     pop     cx
   3349	0DC0  59			     pop     cx
   3350	0DC1			     @22@142:
   3351					;
   3352					;	  for (i=2;i<argc;++i)	{
   3353					;
   3354	0DC1  BE 0002			     mov     si,2
   3355	0DC4  EB 24			     jmp     short @22@310
   3356	0DC6			     @22@170:
   3357					;
   3358					;	      if (i!=2 || control_n)
   3359					;
   3360	0DC6  83 FE 02			     cmp     si,2
   3361	0DC9  75 06			     jne     short @22@226
   3362	0DCB  83 7E FE 00		     cmp     word ptr [bp-2],0
   3363	0DCF  74 08			     je	     short @22@254
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 60
command.ASM



   3364	0DD1			     @22@226:
   3365					;
   3366					;		 putch(' ');
   3367					;
   3368	0DD1  B8 0020			     mov     ax,32
   3369	0DD4  50			     push    ax
   3370	0DD5  E8 0000e			     call    near ptr _putch
   3371	0DD8  59			     pop     cx
   3372	0DD9			     @22@254:
   3373					;
   3374					;	      putstr(argv[i]);
   3375					;
   3376	0DD9  8B DE			     mov     bx,si
   3377	0DDB  B1 02			     mov     cl,2
   3378	0DDD  D3 E3			     shl     bx,cl
   3379	0DDF  FF 71 02			     push    word ptr [bx+di+2]
   3380	0DE2  FF 31			     push    word ptr [bx+di]
   3381	0DE4  E8 0000e			     call    near ptr _putstr
   3382	0DE7  59			     pop     cx
   3383	0DE8  59			     pop     cx
   3384	0DE9  46			     inc     si
   3385	0DEA			     @22@310:
   3386	0DEA  3B 76 04			     cmp     si,word ptr [bp+4]
   3387	0DED  7C D7			     jl	     short @22@170
   3388	0DEF			     @22@338:
   3389					;
   3390					;	  }
   3391					;      }
   3392					;      if (control_n)
   3393					;
   3394	0DEF  83 7E FE 00		     cmp     word ptr [bp-2],0
   3395	0DF3  74 08			     je	     short @22@394
   3396					;
   3397					;	  putch('\n');
   3398					;
   3399	0DF5  B8 000A			     mov     ax,10
   3400	0DF8  50			     push    ax
   3401	0DF9  E8 0000e			     call    near ptr _putch
   3402	0DFC  59			     pop     cx
   3403	0DFD			     @22@394:
   3404					;
   3405					;      return 0;
   3406					;
   3407	0DFD  33 C0			     xor     ax,ax
   3408	0DFF  EB 00			     jmp     short @22@422
   3409	0E01			     @22@422:
   3410					;
   3411					;    }
   3412					;
   3413	0E01  5F			     pop     di
   3414	0E02  5E			     pop     si
   3415	0E03  8B E5			     mov     sp,bp
   3416	0E05  5D			     pop     bp
   3417	0E06  C3			     ret
   3418	0E07			     _cmd_echo	     endp
   3419	0E07			     _TEXT   ends
   3420	0098			     _DATA   segment word public 'DATA'
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 61
command.ASM



   3421	0098			     demo_linha	     label   word
   3422	0098  FC			     db	     252
   3423	0099  FF			     db	     255
   3424	009A			     exitcode	     label   word
*Warning* command.ASM(3431) Reserved word used as symbol: EXITCODE
   3425	009A  00			     db	     0
   3426	009B  00			     db	     0
   3427	009C			     _DATA   ends
   3428	0E07			     _TEXT   segment byte public 'CODE'
   3429					;
   3430					;    void demo()
   3431					;
   3432					     assume  cs:_TEXT
   3433	0E07			     demo    proc    near
   3434	0E07  55			     push    bp
   3435	0E08  8B EC			     mov     bp,sp
   3436	0E0A  83 EC 16			     sub     sp,22
   3437	0E0D  56			     push    si
   3438	0E0E  57			     push    di
   3439					;
   3440					;    {
   3441					;      extern int demo_linha;
   3442					;      extern int exitcode;
   3443					;      unsigned	i;
   3444					;      int ini = demo_linha;
   3445					;
   3446	0E0F  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   3447					;
   3448					;      char str[20];
   3449					;      int ec =	exitcode;
   3450					;
   3451	0E13  A1 009Ar			     mov     ax,word ptr DGROUP:exitcode
   3452	0E16  89 46 FE			     mov     word ptr [bp-2],ax
   3453					;
   3454					;
   3455					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3456					;
   3457	0E19  1E			     push    ds
   3458	0E1A  B8 08A2r			     mov     ax,offset DGROUP:s@+2054
   3459	0E1D  50			     push    ax
   3460	0E1E  57			     push    di
   3461	0E1F  B8 0041			     mov     ax,65
   3462	0E22  50			     push    ax
   3463	0E23  E8 0000e			     call    near ptr _putstrxy
   3464	0E26  83 C4 08			     add     sp,8
   3465					;
   3466					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3467					;
   3468	0E29  1E			     push    ds
   3469	0E2A  B8 08B3r			     mov     ax,offset DGROUP:s@+2071
   3470	0E2D  50			     push    ax
   3471	0E2E  8B C7			     mov     ax,di
   3472	0E30  40			     inc     ax
   3473	0E31  50			     push    ax
   3474	0E32  B8 0041			     mov     ax,65
   3475	0E35  50			     push    ax
   3476	0E36  E8 0000e			     call    near ptr _putstrxy
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 62
command.ASM



   3477	0E39  83 C4 08			     add     sp,8
   3478					;
   3479					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3480					;
   3481	0E3C  1E			     push    ds
   3482	0E3D  B8 08C4r			     mov     ax,offset DGROUP:s@+2088
   3483	0E40  50			     push    ax
   3484	0E41  8B C7			     mov     ax,di
   3485	0E43  05 0002			     add     ax,2
   3486	0E46  50			     push    ax
   3487	0E47  B8 0041			     mov     ax,65
   3488	0E4A  50			     push    ax
   3489	0E4B  E8 0000e			     call    near ptr _putstrxy
   3490	0E4E  83 C4 08			     add     sp,8
   3491					;
   3492					;      putstrxy(65,ini+3,"≥		 ≥");
   3493					;
   3494	0E51  1E			     push    ds
   3495	0E52  B8 08D5r			     mov     ax,offset DGROUP:s@+2105
   3496	0E55  50			     push    ax
   3497	0E56  8B C7			     mov     ax,di
   3498	0E58  05 0003			     add     ax,3
   3499	0E5B  50			     push    ax
   3500	0E5C  B8 0041			     mov     ax,65
   3501	0E5F  50			     push    ax
   3502	0E60  E8 0000e			     call    near ptr _putstrxy
   3503	0E63  83 C4 08			     add     sp,8
   3504					;
   3505					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3506					;
   3507	0E66  1E			     push    ds
   3508	0E67  B8 08E6r			     mov     ax,offset DGROUP:s@+2122
   3509	0E6A  50			     push    ax
   3510	0E6B  8B C7			     mov     ax,di
   3511	0E6D  05 0004			     add     ax,4
   3512	0E70  50			     push    ax
   3513	0E71  B8 0041			     mov     ax,65
   3514	0E74  50			     push    ax
   3515	0E75  E8 0000e			     call    near ptr _putstrxy
   3516	0E78  83 C4 08			     add     sp,8
   3517					;
   3518					;
   3519					;      inttostr(str,getpid());
   3520					;
   3521	0E7B  E8 0000e			     call    near ptr _getpid
   3522	0E7E  50			     push    ax
   3523	0E7F  16			     push    ss
   3524	0E80  8D 46 EA			     lea     ax,word ptr [bp-22]
   3525	0E83  50			     push    ax
   3526	0E84  E8 0000e			     call    near ptr _inttostr
   3527	0E87  83 C4 06			     add     sp,6
   3528					;
   3529					;      putstrxy(74,ini+1,str);
   3530					;
   3531	0E8A  16			     push    ss
   3532	0E8B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3533	0E8E  50			     push    ax
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 63
command.ASM



   3534	0E8F  8B C7			     mov     ax,di
   3535	0E91  40			     inc     ax
   3536	0E92  50			     push    ax
   3537	0E93  B8 004A			     mov     ax,74
   3538	0E96  50			     push    ax
   3539	0E97  E8 0000e			     call    near ptr _putstrxy
   3540	0E9A  83 C4 08			     add     sp,8
   3541					;
   3542					;
   3543					;      for (i=0;i<60000U;++i)  {
   3544					;
   3545	0E9D  33 F6			     xor     si,si
   3546	0E9F  EB 29			     jmp     short @23@114
   3547	0EA1			     @23@58:
   3548					;
   3549					;	   unsignedtostr(str,i,5,'0');
   3550					;
   3551	0EA1  B0 30			     mov     al,48
   3552	0EA3  50			     push    ax
   3553	0EA4  B8 0005			     mov     ax,5
   3554	0EA7  50			     push    ax
   3555	0EA8  56			     push    si
   3556	0EA9  16			     push    ss
   3557	0EAA  8D 46 EA			     lea     ax,word ptr [bp-22]
   3558	0EAD  50			     push    ax
   3559	0EAE  E8 0000e			     call    near ptr _unsignedtostr
   3560	0EB1  83 C4 0A			     add     sp,10
   3561					;
   3562					;	   putstrxy(70,ini+3,str);
   3563					;
   3564	0EB4  16			     push    ss
   3565	0EB5  8D 46 EA			     lea     ax,word ptr [bp-22]
   3566	0EB8  50			     push    ax
   3567	0EB9  8B C7			     mov     ax,di
   3568	0EBB  05 0003			     add     ax,3
   3569	0EBE  50			     push    ax
   3570	0EBF  B8 0046			     mov     ax,70
   3571	0EC2  50			     push    ax
   3572	0EC3  E8 0000e			     call    near ptr _putstrxy
   3573	0EC6  83 C4 08			     add     sp,8
   3574	0EC9  46			     inc     si
   3575	0ECA			     @23@114:
   3576	0ECA  81 FE EA60		     cmp     si,-5536
   3577	0ECE  72 D1			     jb	     short @23@58
   3578					;
   3579					;      }
   3580					;      for (i=0;i<60000U;++i)  {
   3581					;
   3582	0ED0  33 F6			     xor     si,si
   3583	0ED2  EB 29			     jmp     short @23@226
   3584	0ED4			     @23@170:
   3585					;
   3586					;	   unsignedtostr(str,i,5,'0');
   3587					;
   3588	0ED4  B0 30			     mov     al,48
   3589	0ED6  50			     push    ax
   3590	0ED7  B8 0005			     mov     ax,5
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 64
command.ASM



   3591	0EDA  50			     push    ax
   3592	0EDB  56			     push    si
   3593	0EDC  16			     push    ss
   3594	0EDD  8D 46 EA			     lea     ax,word ptr [bp-22]
   3595	0EE0  50			     push    ax
   3596	0EE1  E8 0000e			     call    near ptr _unsignedtostr
   3597	0EE4  83 C4 0A			     add     sp,10
   3598					;
   3599					;	   putstrxy(70,ini+3,str);
   3600					;
   3601	0EE7  16			     push    ss
   3602	0EE8  8D 46 EA			     lea     ax,word ptr [bp-22]
   3603	0EEB  50			     push    ax
   3604	0EEC  8B C7			     mov     ax,di
   3605	0EEE  05 0003			     add     ax,3
   3606	0EF1  50			     push    ax
   3607	0EF2  B8 0046			     mov     ax,70
   3608	0EF5  50			     push    ax
   3609	0EF6  E8 0000e			     call    near ptr _putstrxy
   3610	0EF9  83 C4 08			     add     sp,8
   3611	0EFC  46			     inc     si
   3612	0EFD			     @23@226:
   3613	0EFD  81 FE EA60		     cmp     si,-5536
   3614	0F01  72 D1			     jb	     short @23@170
   3615					;
   3616					;      }
   3617					;      for (i=0;i<60000U;++i)  {
   3618					;
   3619	0F03  33 F6			     xor     si,si
   3620	0F05  EB 29			     jmp     short @23@338
   3621	0F07			     @23@282:
   3622					;
   3623					;	   unsignedtostr(str,i,5,'0');
   3624					;
   3625	0F07  B0 30			     mov     al,48
   3626	0F09  50			     push    ax
   3627	0F0A  B8 0005			     mov     ax,5
   3628	0F0D  50			     push    ax
   3629	0F0E  56			     push    si
   3630	0F0F  16			     push    ss
   3631	0F10  8D 46 EA			     lea     ax,word ptr [bp-22]
   3632	0F13  50			     push    ax
   3633	0F14  E8 0000e			     call    near ptr _unsignedtostr
   3634	0F17  83 C4 0A			     add     sp,10
   3635					;
   3636					;	   putstrxy(70,ini+3,str);
   3637					;
   3638	0F1A  16			     push    ss
   3639	0F1B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3640	0F1E  50			     push    ax
   3641	0F1F  8B C7			     mov     ax,di
   3642	0F21  05 0003			     add     ax,3
   3643	0F24  50			     push    ax
   3644	0F25  B8 0046			     mov     ax,70
   3645	0F28  50			     push    ax
   3646	0F29  E8 0000e			     call    near ptr _putstrxy
   3647	0F2C  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 65
command.ASM



   3648	0F2F  46			     inc     si
   3649	0F30			     @23@338:
   3650	0F30  81 FE EA60		     cmp     si,-5536
   3651	0F34  72 D1			     jb	     short @23@282
   3652					;
   3653					;      }
   3654					;      for (i=0;i<60000U;++i)  {
   3655					;
   3656	0F36  33 F6			     xor     si,si
   3657	0F38  EB 29			     jmp     short @23@450
   3658	0F3A			     @23@394:
   3659					;
   3660					;	   unsignedtostr(str,i,5,'0');
   3661					;
   3662	0F3A  B0 30			     mov     al,48
   3663	0F3C  50			     push    ax
   3664	0F3D  B8 0005			     mov     ax,5
   3665	0F40  50			     push    ax
   3666	0F41  56			     push    si
   3667	0F42  16			     push    ss
   3668	0F43  8D 46 EA			     lea     ax,word ptr [bp-22]
   3669	0F46  50			     push    ax
   3670	0F47  E8 0000e			     call    near ptr _unsignedtostr
   3671	0F4A  83 C4 0A			     add     sp,10
   3672					;
   3673					;	   putstrxy(70,ini+3,str);
   3674					;
   3675	0F4D  16			     push    ss
   3676	0F4E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3677	0F51  50			     push    ax
   3678	0F52  8B C7			     mov     ax,di
   3679	0F54  05 0003			     add     ax,3
   3680	0F57  50			     push    ax
   3681	0F58  B8 0046			     mov     ax,70
   3682	0F5B  50			     push    ax
   3683	0F5C  E8 0000e			     call    near ptr _putstrxy
   3684	0F5F  83 C4 08			     add     sp,8
   3685	0F62  46			     inc     si
   3686	0F63			     @23@450:
   3687	0F63  81 FE EA60		     cmp     si,-5536
   3688	0F67  72 D1			     jb	     short @23@394
   3689					;
   3690					;      }
   3691					;      for (i=0;i<60000U;++i)  {
   3692					;
   3693	0F69  33 F6			     xor     si,si
   3694	0F6B  EB 29			     jmp     short @23@562
   3695	0F6D			     @23@506:
   3696					;
   3697					;	   unsignedtostr(str,i,5,'0');
   3698					;
   3699	0F6D  B0 30			     mov     al,48
   3700	0F6F  50			     push    ax
   3701	0F70  B8 0005			     mov     ax,5
   3702	0F73  50			     push    ax
   3703	0F74  56			     push    si
   3704	0F75  16			     push    ss
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 66
command.ASM



   3705	0F76  8D 46 EA			     lea     ax,word ptr [bp-22]
   3706	0F79  50			     push    ax
   3707	0F7A  E8 0000e			     call    near ptr _unsignedtostr
   3708	0F7D  83 C4 0A			     add     sp,10
   3709					;
   3710					;	   putstrxy(70,ini+3,str);
   3711					;
   3712	0F80  16			     push    ss
   3713	0F81  8D 46 EA			     lea     ax,word ptr [bp-22]
   3714	0F84  50			     push    ax
   3715	0F85  8B C7			     mov     ax,di
   3716	0F87  05 0003			     add     ax,3
   3717	0F8A  50			     push    ax
   3718	0F8B  B8 0046			     mov     ax,70
   3719	0F8E  50			     push    ax
   3720	0F8F  E8 0000e			     call    near ptr _putstrxy
   3721	0F92  83 C4 08			     add     sp,8
   3722	0F95  46			     inc     si
   3723	0F96			     @23@562:
   3724	0F96  81 FE EA60		     cmp     si,-5536
   3725	0F9A  72 D1			     jb	     short @23@506
   3726					;
   3727					;      }
   3728					;      for (i=0;i<60000U;++i)  {
   3729					;
   3730	0F9C  33 F6			     xor     si,si
   3731	0F9E  EB 29			     jmp     short @23@674
   3732	0FA0			     @23@618:
   3733					;
   3734					;	   unsignedtostr(str,i,5,'0');
   3735					;
   3736	0FA0  B0 30			     mov     al,48
   3737	0FA2  50			     push    ax
   3738	0FA3  B8 0005			     mov     ax,5
   3739	0FA6  50			     push    ax
   3740	0FA7  56			     push    si
   3741	0FA8  16			     push    ss
   3742	0FA9  8D 46 EA			     lea     ax,word ptr [bp-22]
   3743	0FAC  50			     push    ax
   3744	0FAD  E8 0000e			     call    near ptr _unsignedtostr
   3745	0FB0  83 C4 0A			     add     sp,10
   3746					;
   3747					;	   putstrxy(70,ini+3,str);
   3748					;
   3749	0FB3  16			     push    ss
   3750	0FB4  8D 46 EA			     lea     ax,word ptr [bp-22]
   3751	0FB7  50			     push    ax
   3752	0FB8  8B C7			     mov     ax,di
   3753	0FBA  05 0003			     add     ax,3
   3754	0FBD  50			     push    ax
   3755	0FBE  B8 0046			     mov     ax,70
   3756	0FC1  50			     push    ax
   3757	0FC2  E8 0000e			     call    near ptr _putstrxy
   3758	0FC5  83 C4 08			     add     sp,8
   3759	0FC8  46			     inc     si
   3760	0FC9			     @23@674:
   3761	0FC9  81 FE EA60		     cmp     si,-5536
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 67
command.ASM



   3762	0FCD  72 D1			     jb	     short @23@618
   3763					;
   3764					;      }
   3765					;      exit(ec);
   3766					;
   3767	0FCF  FF 76 FE			     push    word ptr [bp-2]
   3768	0FD2  E8 0000e			     call    near ptr _exit
   3769	0FD5  59			     pop     cx
   3770					;
   3771					;    }
   3772					;
   3773	0FD6  5F			     pop     di
   3774	0FD7  5E			     pop     si
   3775	0FD8  8B E5			     mov     sp,bp
   3776	0FDA  5D			     pop     bp
   3777	0FDB  C3			     ret
   3778	0FDC			     demo    endp
   3779					;
   3780					;    int cmd_demo(int argc, char far *argv[])
   3781					;
   3782					     assume  cs:_TEXT
   3783	0FDC			     _cmd_demo	     proc    near
   3784	0FDC  55			     push    bp
   3785	0FDD  8B EC			     mov     bp,sp
   3786					;
   3787					;    {
   3788					;	     extern int	demo_linha;
   3789					;
   3790					;	     if	     (argc != 2)  {
   3791					;
   3792	0FDF  83 7E 04 02		     cmp     word ptr [bp+4],2
   3793	0FE3  74 0F			     je	     short @24@142
   3794					;
   3795					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3796					;
   3797	0FE5  1E			     push    ds
   3798	0FE6  B8 08F7r			     mov     ax,offset DGROUP:s@+2139
   3799	0FE9			     @24@86:
   3800	0FE9  50			     push    ax
   3801	0FEA  E8 0000e			     call    near ptr _putstr
   3802	0FED  59			     pop     cx
   3803	0FEE  59			     pop     cx
   3804					;
   3805					;		     return 1;
   3806					;
   3807	0FEF  B8 0001			     mov     ax,1
   3808	0FF2			     @24@114:
   3809	0FF2  EB 3A			     jmp     short @24@282
   3810	0FF4			     @24@142:
   3811					;
   3812					;	     }
   3813					;	     demo_linha	+= 5;
   3814					;
   3815	0FF4  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   3816					;
   3817					;	     if	     (demo_linha >21)
   3818					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 68
command.ASM



   3819	0FF9  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   3820	0FFE  7E 06			     jle     short @24@198
   3821					;
   3822					;		     demo_linha	= 1;
   3823					;
   3824	1000  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   3825	1006			     @24@198:
   3826					;
   3827					;	     exitcode =	atoi(argv[1]);
   3828					;
   3829	1006  8B 5E 06			     mov     bx,word ptr [bp+6]
   3830	1009  FF 77 06			     push    word ptr [bx+6]
   3831	100C  FF 77 04			     push    word ptr [bx+4]
   3832	100F  E8 0000e			     call    near ptr _atoi
   3833	1012  59			     pop     cx
   3834	1013  59			     pop     cx
   3835	1014  A3 009Ar			     mov     word ptr DGROUP:exitcode,ax
   3836					;
   3837					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3838					;
   3839	1017  B8 0E07r			     mov     ax,offset demo
   3840	101A  50			     push    ax
   3841	101B  E8 0000e			     call    near ptr _fork
   3842	101E  59			     pop     cx
   3843	101F  3D FFFF			     cmp     ax,-1
   3844	1022  75 06			     jne     short @24@254
   3845					;
   3846					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3847					;
   3848	1024  1E			     push    ds
   3849	1025  B8 0925r			     mov     ax,offset DGROUP:s@+2185
   3850	1028  EB BF			     jmp     short @24@86
   3851	102A			     @24@254:
   3852					;
   3853					;		     return 1;
   3854					;	     }
   3855					;	     return 0;
   3856					;
   3857	102A  33 C0			     xor     ax,ax
   3858	102C  EB C4			     jmp     short @24@114
   3859	102E			     @24@282:
   3860					;
   3861					;    }
   3862					;
   3863	102E  5D			     pop     bp
   3864	102F  C3			     ret
   3865	1030			     _cmd_demo	     endp
   3866					;
   3867					;    int cmd_waitpid(int argc, char far	*argv[])
   3868					;
   3869					     assume  cs:_TEXT
   3870	1030			     _cmd_waitpid    proc    near
   3871	1030  55			     push    bp
   3872	1031  8B EC			     mov     bp,sp
   3873	1033  83 EC 16			     sub     sp,22
   3874	1036  56			     push    si
   3875					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 69
command.ASM



   3876					;    {
   3877					;	     int     status;
   3878					;	     pid_t   pid;
   3879					;	     char    str[20];
   3880					;
   3881					;	     if	     (argc != 2)  {
   3882					;
   3883	1037  83 7E 04 02		     cmp     word ptr [bp+4],2
   3884	103B  74 0F			     je	     short @25@114
   3885					;
   3886					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3887					;
   3888	103D  1E			     push    ds
   3889	103E  B8 0957r			     mov     ax,offset DGROUP:s@+2235
   3890	1041  50			     push    ax
   3891	1042  E8 0000e			     call    near ptr _putstr
   3892	1045  59			     pop     cx
   3893	1046  59			     pop     cx
   3894					;
   3895					;		     return 1;
   3896					;
   3897	1047  B8 0001			     mov     ax,1
   3898	104A			     @25@86:
   3899	104A  EB 6E			     jmp     short @25@142
   3900	104C			     @25@114:
   3901					;
   3902					;	     }
   3903					;	     pid = atoi(argv[1]);
   3904					;
   3905	104C  8B 5E 06			     mov     bx,word ptr [bp+6]
   3906	104F  FF 77 06			     push    word ptr [bx+6]
   3907	1052  FF 77 04			     push    word ptr [bx+4]
   3908	1055  E8 0000e			     call    near ptr _atoi
   3909	1058  59			     pop     cx
   3910	1059  59			     pop     cx
   3911	105A  8B F0			     mov     si,ax
   3912					;
   3913					;	     pid = waitpid(pid,&status);
   3914					;
   3915	105C  16			     push    ss
   3916	105D  8D 46 FE			     lea     ax,word ptr [bp-2]
   3917	1060  50			     push    ax
   3918	1061  56			     push    si
   3919	1062  E8 0000e			     call    near ptr _waitpid
   3920	1065  83 C4 06			     add     sp,6
   3921	1068  8B F0			     mov     si,ax
   3922					;
   3923					;	     putstr("Processo ");
   3924					;
   3925	106A  1E			     push    ds
   3926	106B  B8 0988r			     mov     ax,offset DGROUP:s@+2284
   3927	106E  50			     push    ax
   3928	106F  E8 0000e			     call    near ptr _putstr
   3929	1072  59			     pop     cx
   3930	1073  59			     pop     cx
   3931					;
   3932					;	     inttostr(str,pid);
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 70
command.ASM



   3933					;
   3934	1074  56			     push    si
   3935	1075  16			     push    ss
   3936	1076  8D 46 EA			     lea     ax,word ptr [bp-22]
   3937	1079  50			     push    ax
   3938	107A  E8 0000e			     call    near ptr _inttostr
   3939	107D  83 C4 06			     add     sp,6
   3940					;
   3941					;	     putstr(str);
   3942					;
   3943	1080  16			     push    ss
   3944	1081  8D 46 EA			     lea     ax,word ptr [bp-22]
   3945	1084  50			     push    ax
   3946	1085  E8 0000e			     call    near ptr _putstr
   3947	1088  59			     pop     cx
   3948	1089  59			     pop     cx
   3949					;
   3950					;	     putstr(" encerrado	com codigo de fim ");
   3951					;
   3952	108A  1E			     push    ds
   3953	108B  B8 0992r			     mov     ax,offset DGROUP:s@+2294
   3954	108E  50			     push    ax
   3955	108F  E8 0000e			     call    near ptr _putstr
   3956	1092  59			     pop     cx
   3957	1093  59			     pop     cx
   3958					;
   3959					;	     inttostr(str,status);
   3960					;
   3961	1094  FF 76 FE			     push    word ptr [bp-2]
   3962	1097  16			     push    ss
   3963	1098  8D 46 EA			     lea     ax,word ptr [bp-22]
   3964	109B  50			     push    ax
   3965	109C  E8 0000e			     call    near ptr _inttostr
   3966	109F  83 C4 06			     add     sp,6
   3967					;
   3968					;	     putstr(str);
   3969					;
   3970	10A2  16			     push    ss
   3971	10A3  8D 46 EA			     lea     ax,word ptr [bp-22]
   3972	10A6  50			     push    ax
   3973	10A7  E8 0000e			     call    near ptr _putstr
   3974	10AA  59			     pop     cx
   3975	10AB  59			     pop     cx
   3976					;
   3977					;	     putstr("!\n");
   3978					;
   3979	10AC  1E			     push    ds
   3980	10AD  B8 09B0r			     mov     ax,offset DGROUP:s@+2324
   3981	10B0  50			     push    ax
   3982	10B1  E8 0000e			     call    near ptr _putstr
   3983	10B4  59			     pop     cx
   3984	10B5  59			     pop     cx
   3985					;
   3986					;	     return 0;
   3987					;
   3988	10B6  33 C0			     xor     ax,ax
   3989	10B8  EB 90			     jmp     short @25@86
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 71
command.ASM



   3990	10BA			     @25@142:
   3991					;
   3992					;    }
   3993					;
   3994	10BA  5E			     pop     si
   3995	10BB  8B E5			     mov     sp,bp
   3996	10BD  5D			     pop     bp
   3997	10BE  C3			     ret
   3998	10BF			     _cmd_waitpid    endp
   3999					;
   4000					;    int cmd_wait(int argc, char far *argv[])
   4001					;
   4002					     assume  cs:_TEXT
   4003	10BF			     _cmd_wait	     proc    near
   4004	10BF  55			     push    bp
   4005	10C0  8B EC			     mov     bp,sp
   4006	10C2  83 EC 18			     sub     sp,24
   4007	10C5  56			     push    si
   4008	10C6  57			     push    di
   4009	10C7  8B 76 04			     mov     si,word ptr [bp+4]
   4010	10CA  8B 7E 06			     mov     di,word ptr [bp+6]
   4011					;
   4012					;    {
   4013					;	     int     status=123;
   4014					;
   4015	10CD  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4016					;
   4017					;	     pid_t   pid;
   4018					;	     char    str[20];
   4019					;
   4020					;	     argc=argc;
   4021					;
   4022					;
   4023					;	     argv=argv;
   4024					;
   4025					;
   4026					;	     pid = wait(&status);
   4027					;
   4028	10D2  16			     push    ss
   4029	10D3  8D 46 FE			     lea     ax,word ptr [bp-2]
   4030	10D6  50			     push    ax
   4031	10D7  E8 0000e			     call    near ptr _wait
   4032	10DA  59			     pop     cx
   4033	10DB  59			     pop     cx
   4034	10DC  89 46 FC			     mov     word ptr [bp-4],ax
   4035					;
   4036					;	     putstr("Processo ");
   4037					;
   4038	10DF  1E			     push    ds
   4039	10E0  B8 09B3r			     mov     ax,offset DGROUP:s@+2327
   4040	10E3  50			     push    ax
   4041	10E4  E8 0000e			     call    near ptr _putstr
   4042	10E7  59			     pop     cx
   4043	10E8  59			     pop     cx
   4044					;
   4045					;	     inttostr(str,pid);
   4046					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 72
command.ASM



   4047	10E9  FF 76 FC			     push    word ptr [bp-4]
   4048	10EC  16			     push    ss
   4049	10ED  8D 46 E8			     lea     ax,word ptr [bp-24]
   4050	10F0  50			     push    ax
   4051	10F1  E8 0000e			     call    near ptr _inttostr
   4052	10F4  83 C4 06			     add     sp,6
   4053					;
   4054					;	     putstr(str);
   4055					;
   4056	10F7  16			     push    ss
   4057	10F8  8D 46 E8			     lea     ax,word ptr [bp-24]
   4058	10FB  50			     push    ax
   4059	10FC  E8 0000e			     call    near ptr _putstr
   4060	10FF  59			     pop     cx
   4061	1100  59			     pop     cx
   4062					;
   4063					;	     putstr(" encerrado	com codigo de fim ");
   4064					;
   4065	1101  1E			     push    ds
   4066	1102  B8 09BDr			     mov     ax,offset DGROUP:s@+2337
   4067	1105  50			     push    ax
   4068	1106  E8 0000e			     call    near ptr _putstr
   4069	1109  59			     pop     cx
   4070	110A  59			     pop     cx
   4071					;
   4072					;	     inttostr(str,status);
   4073					;
   4074	110B  FF 76 FE			     push    word ptr [bp-2]
   4075	110E  16			     push    ss
   4076	110F  8D 46 E8			     lea     ax,word ptr [bp-24]
   4077	1112  50			     push    ax
   4078	1113  E8 0000e			     call    near ptr _inttostr
   4079	1116  83 C4 06			     add     sp,6
   4080					;
   4081					;	     putstr(str);
   4082					;
   4083	1119  16			     push    ss
   4084	111A  8D 46 E8			     lea     ax,word ptr [bp-24]
   4085	111D  50			     push    ax
   4086	111E  E8 0000e			     call    near ptr _putstr
   4087	1121  59			     pop     cx
   4088	1122  59			     pop     cx
   4089					;
   4090					;	     putstr("!\n");
   4091					;
   4092	1123  1E			     push    ds
   4093	1124  B8 09DBr			     mov     ax,offset DGROUP:s@+2367
   4094	1127  50			     push    ax
   4095	1128  E8 0000e			     call    near ptr _putstr
   4096	112B  59			     pop     cx
   4097	112C  59			     pop     cx
   4098					;
   4099					;	     return 0;
   4100					;
   4101	112D  33 C0			     xor     ax,ax
   4102	112F  EB 00			     jmp     short @26@58
   4103	1131			     @26@58:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 73
command.ASM



   4104					;
   4105					;    }
   4106					;
   4107	1131  5F			     pop     di
   4108	1132  5E			     pop     si
   4109	1133  8B E5			     mov     sp,bp
   4110	1135  5D			     pop     bp
   4111	1136  C3			     ret
   4112	1137			     _cmd_wait	     endp
   4113					;
   4114					;    int cmd_semls(int argc, char far *argv[])
   4115					;
   4116					     assume  cs:_TEXT
   4117	1137			     _cmd_semls	     proc    near
   4118	1137  55			     push    bp
   4119	1138  8B EC			     mov     bp,sp
   4120	113A  83 EC 14			     sub     sp,20
   4121	113D  56			     push    si
   4122	113E  57			     push    di
   4123					;
   4124					;    {
   4125					;	     int i,n=0;
   4126					;
   4127	113F  33 FF			     xor     di,di
   4128					;
   4129					;	     char str[20];
   4130					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4131					;
   4132					;	     argc=argc;
   4133					;
   4134	1141  8B 46 04			     mov     ax,word ptr [bp+4]
   4135	1144  89 46 04			     mov     word ptr [bp+4],ax
   4136					;
   4137					;	     argv=argv;
   4138					;
   4139	1147  8B 46 06			     mov     ax,word ptr [bp+6]
   4140	114A  89 46 06			     mov     word ptr [bp+6],ax
   4141					;
   4142					;	     putstr("Semaphores:\n");
   4143					;
   4144	114D  1E			     push    ds
   4145	114E  B8 09DEr			     mov     ax,offset DGROUP:s@+2370
   4146	1151  50			     push    ax
   4147	1152  E8 0000e			     call    near ptr _putstr
   4148	1155  59			     pop     cx
   4149	1156  59			     pop     cx
   4150					;
   4151					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4152					;
   4153	1157  33 F6			     xor     si,si
   4154	1159  E9 0095			     jmp     @27@142
   4155	115C			     @27@58:
   4156					;
   4157					;		     if	     (miniSO_sem[i].status!=FREE) {
   4158					;
   4159	115C  8B DE			     mov     bx,si
   4160	115E  B1 03			     mov     cl,3
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 74
command.ASM



   4161	1160  D3 E3			     shl     bx,cl
   4162	1162  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4163	1167  75 03			     jne     @@6
   4164	1169  E9 0084			     jmp     @27@114
   4165	116C			     @@6:
   4166					;
   4167					;			     putstr("- id=");
   4168					;
   4169	116C  1E			     push    ds
   4170	116D  B8 09EBr			     mov     ax,offset DGROUP:s@+2383
   4171	1170  50			     push    ax
   4172	1171  E8 0000e			     call    near ptr _putstr
   4173	1174  59			     pop     cx
   4174	1175  59			     pop     cx
   4175					;
   4176					;			     inttostr(str,miniSO_sem[i].semid);
   4177					;
   4178	1176  8B DE			     mov     bx,si
   4179	1178  B1 03			     mov     cl,3
   4180	117A  D3 E3			     shl     bx,cl
   4181	117C  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4182	1180  16			     push    ss
   4183	1181  8D 46 EC			     lea     ax,word ptr [bp-20]
   4184	1184  50			     push    ax
   4185	1185  E8 0000e			     call    near ptr _inttostr
   4186	1188  83 C4 06			     add     sp,6
   4187					;
   4188					;			     putstr(str);
   4189					;
   4190	118B  16			     push    ss
   4191	118C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4192	118F  50			     push    ax
   4193	1190  E8 0000e			     call    near ptr _putstr
   4194	1193  59			     pop     cx
   4195	1194  59			     pop     cx
   4196					;
   4197					;			     putstr(" value=");
   4198					;
   4199	1195  1E			     push    ds
   4200	1196  B8 09F1r			     mov     ax,offset DGROUP:s@+2389
   4201	1199  50			     push    ax
   4202	119A  E8 0000e			     call    near ptr _putstr
   4203	119D  59			     pop     cx
   4204	119E  59			     pop     cx
   4205					;
   4206					;			     inttostr(str,miniSO_sem[i].value);
   4207					;
   4208	119F  8B DE			     mov     bx,si
   4209	11A1  B1 03			     mov     cl,3
   4210	11A3  D3 E3			     shl     bx,cl
   4211	11A5  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4212	11A9  16			     push    ss
   4213	11AA  8D 46 EC			     lea     ax,word ptr [bp-20]
   4214	11AD  50			     push    ax
   4215	11AE  E8 0000e			     call    near ptr _inttostr
   4216	11B1  83 C4 06			     add     sp,6
   4217					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 75
command.ASM



   4218					;			     putstr(str);
   4219					;
   4220	11B4  16			     push    ss
   4221	11B5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4222	11B8  50			     push    ax
   4223	11B9  E8 0000e			     call    near ptr _putstr
   4224	11BC  59			     pop     cx
   4225	11BD  59			     pop     cx
   4226					;
   4227					;			     putstr(" queue=");
   4228					;
   4229	11BE  1E			     push    ds
   4230	11BF  B8 09F9r			     mov     ax,offset DGROUP:s@+2397
   4231	11C2  50			     push    ax
   4232	11C3  E8 0000e			     call    near ptr _putstr
   4233	11C6  59			     pop     cx
   4234	11C7  59			     pop     cx
   4235					;
   4236					;			     inttostr(str,miniSO_sem[i].queue);
   4237					;
   4238	11C8  8B DE			     mov     bx,si
   4239	11CA  B1 03			     mov     cl,3
   4240	11CC  D3 E3			     shl     bx,cl
   4241	11CE  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4242	11D2  16			     push    ss
   4243	11D3  8D 46 EC			     lea     ax,word ptr [bp-20]
   4244	11D6  50			     push    ax
   4245	11D7  E8 0000e			     call    near ptr _inttostr
   4246	11DA  83 C4 06			     add     sp,6
   4247					;
   4248					;			     putstr(str);
   4249					;
   4250	11DD  16			     push    ss
   4251	11DE  8D 46 EC			     lea     ax,word ptr [bp-20]
   4252	11E1  50			     push    ax
   4253	11E2  E8 0000e			     call    near ptr _putstr
   4254	11E5  59			     pop     cx
   4255	11E6  59			     pop     cx
   4256					;
   4257					;			     putch('\n');
   4258					;
   4259	11E7  B8 000A			     mov     ax,10
   4260	11EA  50			     push    ax
   4261	11EB  E8 0000e			     call    near ptr _putch
   4262	11EE  59			     pop     cx
   4263					;
   4264					;			     ++n;
   4265					;
   4266	11EF  47			     inc     di
   4267	11F0			     @27@114:
   4268	11F0  46			     inc     si
   4269	11F1			     @27@142:
   4270	11F1  83 FE 0A			     cmp     si,10
   4271	11F4  7D 03			     jge     @@7
   4272	11F6  E9 FF63			     jmp     @27@58
   4273	11F9			     @@7:
   4274					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 76
command.ASM



   4275					;		     }
   4276					;	     putstr("TOTAL=");
   4277					;
   4278	11F9  1E			     push    ds
   4279	11FA  B8 0A01r			     mov     ax,offset DGROUP:s@+2405
   4280	11FD  50			     push    ax
   4281	11FE  E8 0000e			     call    near ptr _putstr
   4282	1201  59			     pop     cx
   4283	1202  59			     pop     cx
   4284					;
   4285					;	     inttostr(str,n);
   4286					;
   4287	1203  57			     push    di
   4288	1204  16			     push    ss
   4289	1205  8D 46 EC			     lea     ax,word ptr [bp-20]
   4290	1208  50			     push    ax
   4291	1209  E8 0000e			     call    near ptr _inttostr
   4292	120C  83 C4 06			     add     sp,6
   4293					;
   4294					;	     putstr(str);
   4295					;
   4296	120F  16			     push    ss
   4297	1210  8D 46 EC			     lea     ax,word ptr [bp-20]
   4298	1213  50			     push    ax
   4299	1214  E8 0000e			     call    near ptr _putstr
   4300	1217  59			     pop     cx
   4301	1218  59			     pop     cx
   4302					;
   4303					;	     putstr("\n\n");
   4304					;
   4305	1219  1E			     push    ds
   4306	121A  B8 0A08r			     mov     ax,offset DGROUP:s@+2412
   4307	121D  50			     push    ax
   4308	121E  E8 0000e			     call    near ptr _putstr
   4309	1221  59			     pop     cx
   4310	1222  59			     pop     cx
   4311					;
   4312					;	     return 0;
   4313					;
   4314	1223  33 C0			     xor     ax,ax
   4315	1225  EB 00			     jmp     short @27@198
   4316	1227			     @27@198:
   4317					;
   4318					;    }
   4319					;
   4320	1227  5F			     pop     di
   4321	1228  5E			     pop     si
   4322	1229  8B E5			     mov     sp,bp
   4323	122B  5D			     pop     bp
   4324	122C  C3			     ret
   4325	122D			     _cmd_semls	     endp
   4326					;
   4327					;    int cmd_semcreate(int argc, char far *argv[])
   4328					;
   4329					     assume  cs:_TEXT
   4330	122D			     _cmd_semcreate  proc    near
   4331	122D  55			     push    bp
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 77
command.ASM



   4332	122E  8B EC			     mov     bp,sp
   4333	1230  83 EC 14			     sub     sp,20
   4334	1233  56			     push    si
   4335	1234  57			     push    di
   4336					;
   4337					;    {
   4338					;	     int     res,value;
   4339					;	     semid_t semid;
   4340					;	     char    str[20];
   4341					;
   4342					;	     if	     (argc != 2)     {
   4343					;
   4344	1235  83 7E 04 02		     cmp     word ptr [bp+4],2
   4345	1239  74 0F			     je	     short @28@142
   4346					;
   4347					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4348					;
   4349	123B  1E			     push    ds
   4350	123C  B8 0A0Br			     mov     ax,offset DGROUP:s@+2415
   4351	123F  50			     push    ax
   4352	1240  E8 0000e			     call    near ptr _putstr
   4353	1243  59			     pop     cx
   4354	1244  59			     pop     cx
   4355					;
   4356					;		     return 1;
   4357					;
   4358	1245			     @28@86:
   4359	1245  B8 0001			     mov     ax,1
   4360	1248			     @28@114:
   4361	1248  EB 6C			     jmp     short @28@226
   4362	124A			     @28@142:
   4363					;
   4364					;	     }
   4365					;	     value = atoi(argv[1]);
   4366					;
   4367	124A  8B 5E 06			     mov     bx,word ptr [bp+6]
   4368	124D  FF 77 06			     push    word ptr [bx+6]
   4369	1250  FF 77 04			     push    word ptr [bx+4]
   4370	1253  E8 0000e			     call    near ptr _atoi
   4371	1256  59			     pop     cx
   4372	1257  59			     pop     cx
   4373	1258  8B F0			     mov     si,ax
   4374					;
   4375					;	     semid = semcreate(value);
   4376					;
   4377	125A  56			     push    si
   4378	125B  E8 0000e			     call    near ptr _semcreate
   4379	125E  59			     pop     cx
   4380	125F  8B F8			     mov     di,ax
   4381					;
   4382					;	     if	     (semid==miniSO_ERROR)
   4383					;
   4384	1261  83 FF FF			     cmp     di,-1
   4385	1264  75 02			     jne     short @28@198
   4386	1266  EB DD			     jmp     short @28@86
   4387	1268			     @28@198:
   4388					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 78
command.ASM



   4389					;		     return 1;
   4390					;	     putstr("Semaforo id=");
   4391					;
   4392	1268  1E			     push    ds
   4393	1269  B8 0A3Er			     mov     ax,offset DGROUP:s@+2466
   4394	126C  50			     push    ax
   4395	126D  E8 0000e			     call    near ptr _putstr
   4396	1270  59			     pop     cx
   4397	1271  59			     pop     cx
   4398					;
   4399					;	     inttostr(str,semid);
   4400					;
   4401	1272  57			     push    di
   4402	1273  16			     push    ss
   4403	1274  8D 46 EC			     lea     ax,word ptr [bp-20]
   4404	1277  50			     push    ax
   4405	1278  E8 0000e			     call    near ptr _inttostr
   4406	127B  83 C4 06			     add     sp,6
   4407					;
   4408					;	     putstr(str);
   4409					;
   4410	127E  16			     push    ss
   4411	127F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4412	1282  50			     push    ax
   4413	1283  E8 0000e			     call    near ptr _putstr
   4414	1286  59			     pop     cx
   4415	1287  59			     pop     cx
   4416					;
   4417					;	     putstr(" criado (value=");
   4418					;
   4419	1288  1E			     push    ds
   4420	1289  B8 0A4Br			     mov     ax,offset DGROUP:s@+2479
   4421	128C  50			     push    ax
   4422	128D  E8 0000e			     call    near ptr _putstr
   4423	1290  59			     pop     cx
   4424	1291  59			     pop     cx
   4425					;
   4426					;	     inttostr(str,value);
   4427					;
   4428	1292  56			     push    si
   4429	1293  16			     push    ss
   4430	1294  8D 46 EC			     lea     ax,word ptr [bp-20]
   4431	1297  50			     push    ax
   4432	1298  E8 0000e			     call    near ptr _inttostr
   4433	129B  83 C4 06			     add     sp,6
   4434					;
   4435					;	     putstr(str);
   4436					;
   4437	129E  16			     push    ss
   4438	129F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4439	12A2  50			     push    ax
   4440	12A3  E8 0000e			     call    near ptr _putstr
   4441	12A6  59			     pop     cx
   4442	12A7  59			     pop     cx
   4443					;
   4444					;	     putstr(")\n");
   4445					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 79
command.ASM



   4446	12A8  1E			     push    ds
   4447	12A9  B8 0A5Br			     mov     ax,offset DGROUP:s@+2495
   4448	12AC  50			     push    ax
   4449	12AD  E8 0000e			     call    near ptr _putstr
   4450	12B0  59			     pop     cx
   4451	12B1  59			     pop     cx
   4452					;
   4453					;	     return 0;
   4454					;
   4455	12B2  33 C0			     xor     ax,ax
   4456	12B4  EB 92			     jmp     short @28@114
   4457	12B6			     @28@226:
   4458					;
   4459					;    }
   4460					;
   4461	12B6  5F			     pop     di
   4462	12B7  5E			     pop     si
   4463	12B8  8B E5			     mov     sp,bp
   4464	12BA  5D			     pop     bp
   4465	12BB  C3			     ret
   4466	12BC			     _cmd_semcreate  endp
   4467					;
   4468					;    void sem_aplic()
   4469					;
   4470					     assume  cs:_TEXT
   4471	12BC			     _sem_aplic	     proc    near
   4472	12BC  55			     push    bp
   4473	12BD  8B EC			     mov     bp,sp
   4474	12BF  83 EC 14			     sub     sp,20
   4475	12C2  56			     push    si
   4476	12C3  57			     push    di
   4477					;
   4478					;    {
   4479					;	     extern int	demo_linha;
   4480					;	     extern semid_t semid;
   4481					;	     unsigned i;
   4482					;	     int ini = demo_linha;
   4483					;
   4484	12C4  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   4485					;
   4486					;	     char str[20];
   4487					;
   4488					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4489					;
   4490	12C8  1E			     push    ds
   4491	12C9  B8 0A5Er			     mov     ax,offset DGROUP:s@+2498
   4492	12CC  50			     push    ax
   4493	12CD  57			     push    di
   4494	12CE  B8 0041			     mov     ax,65
   4495	12D1  50			     push    ax
   4496	12D2  E8 0000e			     call    near ptr _putstrxy
   4497	12D5  83 C4 08			     add     sp,8
   4498					;
   4499					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4500					;
   4501	12D8  1E			     push    ds
   4502	12D9  B8 0A6Fr			     mov     ax,offset DGROUP:s@+2515
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 80
command.ASM



   4503	12DC  50			     push    ax
   4504	12DD  8B C7			     mov     ax,di
   4505	12DF  40			     inc     ax
   4506	12E0  50			     push    ax
   4507	12E1  B8 0041			     mov     ax,65
   4508	12E4  50			     push    ax
   4509	12E5  E8 0000e			     call    near ptr _putstrxy
   4510	12E8  83 C4 08			     add     sp,8
   4511					;
   4512					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4513					;
   4514	12EB  1E			     push    ds
   4515	12EC  B8 0A80r			     mov     ax,offset DGROUP:s@+2532
   4516	12EF  50			     push    ax
   4517	12F0  8B C7			     mov     ax,di
   4518	12F2  05 0002			     add     ax,2
   4519	12F5  50			     push    ax
   4520	12F6  B8 0041			     mov     ax,65
   4521	12F9  50			     push    ax
   4522	12FA  E8 0000e			     call    near ptr _putstrxy
   4523	12FD  83 C4 08			     add     sp,8
   4524					;
   4525					;	     putstrxy(65,ini+3,"≥	       ≥");
   4526					;
   4527	1300  1E			     push    ds
   4528	1301  B8 0A91r			     mov     ax,offset DGROUP:s@+2549
   4529	1304  50			     push    ax
   4530	1305  8B C7			     mov     ax,di
   4531	1307  05 0003			     add     ax,3
   4532	130A  50			     push    ax
   4533	130B  B8 0041			     mov     ax,65
   4534	130E  50			     push    ax
   4535	130F  E8 0000e			     call    near ptr _putstrxy
   4536	1312  83 C4 08			     add     sp,8
   4537					;
   4538					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4539					;
   4540	1315  1E			     push    ds
   4541	1316  B8 0AA2r			     mov     ax,offset DGROUP:s@+2566
   4542	1319  50			     push    ax
   4543	131A  8B C7			     mov     ax,di
   4544	131C  05 0004			     add     ax,4
   4545	131F  50			     push    ax
   4546	1320  B8 0041			     mov     ax,65
   4547	1323  50			     push    ax
   4548	1324  E8 0000e			     call    near ptr _putstrxy
   4549	1327  83 C4 08			     add     sp,8
   4550					;
   4551					;
   4552					;	     inttostr(str,getpid());
   4553					;
   4554	132A  E8 0000e			     call    near ptr _getpid
   4555	132D  50			     push    ax
   4556	132E  16			     push    ss
   4557	132F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4558	1332  50			     push    ax
   4559	1333  E8 0000e			     call    near ptr _inttostr
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 81
command.ASM



   4560	1336  83 C4 06			     add     sp,6
   4561					;
   4562					;	     putstrxy(74,ini+1,str);
   4563					;
   4564	1339  16			     push    ss
   4565	133A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4566	133D  50			     push    ax
   4567	133E  8B C7			     mov     ax,di
   4568	1340  40			     inc     ax
   4569	1341  50			     push    ax
   4570	1342  B8 004A			     mov     ax,74
   4571	1345  50			     push    ax
   4572	1346  E8 0000e			     call    near ptr _putstrxy
   4573	1349  83 C4 08			     add     sp,8
   4574					;
   4575					;	     for     (i=0;i<30000U;++i)	 {
   4576					;
   4577	134C  33 F6			     xor     si,si
   4578	134E  EB 29			     jmp     short @29@114
   4579	1350			     @29@58:
   4580					;
   4581					;		     unsignedtostr(str,i,5,'0');
   4582					;
   4583	1350  B0 30			     mov     al,48
   4584	1352  50			     push    ax
   4585	1353  B8 0005			     mov     ax,5
   4586	1356  50			     push    ax
   4587	1357  56			     push    si
   4588	1358  16			     push    ss
   4589	1359  8D 46 EC			     lea     ax,word ptr [bp-20]
   4590	135C  50			     push    ax
   4591	135D  E8 0000e			     call    near ptr _unsignedtostr
   4592	1360  83 C4 0A			     add     sp,10
   4593					;
   4594					;		     putstrxy(70,ini+3,str);
   4595					;
   4596	1363  16			     push    ss
   4597	1364  8D 46 EC			     lea     ax,word ptr [bp-20]
   4598	1367  50			     push    ax
   4599	1368  8B C7			     mov     ax,di
   4600	136A  05 0003			     add     ax,3
   4601	136D  50			     push    ax
   4602	136E  B8 0046			     mov     ax,70
   4603	1371  50			     push    ax
   4604	1372  E8 0000e			     call    near ptr _putstrxy
   4605	1375  83 C4 08			     add     sp,8
   4606	1378  46			     inc     si
   4607	1379			     @29@114:
   4608	1379  81 FE 7530		     cmp     si,30000
   4609	137D  72 D1			     jb	     short @29@58
   4610					;
   4611					;	     }
   4612					;	     semdown(semid);
   4613					;
   4614	137F  FF 36 0016r		     push    word ptr DGROUP:_semid
   4615	1383  E8 0000e			     call    near ptr _semdown
   4616	1386  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 82
command.ASM



   4617	1387  EB 29			     jmp     short @29@226
   4618	1389			     @29@170:
   4619					;
   4620					;	     for     (;i<60000U;++i)  {
   4621					;		     unsignedtostr(str,i,5,'0');
   4622					;
   4623	1389  B0 30			     mov     al,48
   4624	138B  50			     push    ax
   4625	138C  B8 0005			     mov     ax,5
   4626	138F  50			     push    ax
   4627	1390  56			     push    si
   4628	1391  16			     push    ss
   4629	1392  8D 46 EC			     lea     ax,word ptr [bp-20]
   4630	1395  50			     push    ax
   4631	1396  E8 0000e			     call    near ptr _unsignedtostr
   4632	1399  83 C4 0A			     add     sp,10
   4633					;
   4634					;		     putstrxy(70,ini+3,str);
   4635					;
   4636	139C  16			     push    ss
   4637	139D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4638	13A0  50			     push    ax
   4639	13A1  8B C7			     mov     ax,di
   4640	13A3  05 0003			     add     ax,3
   4641	13A6  50			     push    ax
   4642	13A7  B8 0046			     mov     ax,70
   4643	13AA  50			     push    ax
   4644	13AB  E8 0000e			     call    near ptr _putstrxy
   4645	13AE  83 C4 08			     add     sp,8
   4646	13B1  46			     inc     si
   4647	13B2			     @29@226:
   4648	13B2  81 FE EA60		     cmp     si,-5536
   4649	13B6  72 D1			     jb	     short @29@170
   4650					;
   4651					;	     }
   4652					;	     exit(0);
   4653					;
   4654	13B8  33 C0			     xor     ax,ax
   4655	13BA  50			     push    ax
   4656	13BB  E8 0000e			     call    near ptr _exit
   4657	13BE  59			     pop     cx
   4658					;
   4659					;    }
   4660					;
   4661	13BF  5F			     pop     di
   4662	13C0  5E			     pop     si
   4663	13C1  8B E5			     mov     sp,bp
   4664	13C3  5D			     pop     bp
   4665	13C4  C3			     ret
   4666	13C5			     _sem_aplic	     endp
   4667					;
   4668					;    int cmd_semtest(int argc, char far	*argv[])
   4669					;
   4670					     assume  cs:_TEXT
   4671	13C5			     _cmd_semtest    proc    near
   4672	13C5  55			     push    bp
   4673	13C6  8B EC			     mov     bp,sp
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 83
command.ASM



   4674					;
   4675					;    {
   4676					;	     extern int	demo_linha;
   4677					;	     extern semid_t semid;
   4678					;
   4679					;	     if	     (argc != 2)     {
   4680					;
   4681	13C8  83 7E 04 02		     cmp     word ptr [bp+4],2
   4682	13CC  74 0F			     je	     short @30@142
   4683					;
   4684					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4685					;
   4686	13CE  1E			     push    ds
   4687	13CF  B8 0AB3r			     mov     ax,offset DGROUP:s@+2583
   4688	13D2			     @30@86:
   4689	13D2  50			     push    ax
   4690	13D3  E8 0000e			     call    near ptr _putstr
   4691	13D6  59			     pop     cx
   4692	13D7  59			     pop     cx
   4693					;
   4694					;		     return 1;
   4695					;
   4696	13D8  B8 0001			     mov     ax,1
   4697	13DB			     @30@114:
   4698	13DB  EB 3A			     jmp     short @30@282
   4699	13DD			     @30@142:
   4700					;
   4701					;	     }
   4702					;	     semid = atoi(argv[1]);
   4703					;
   4704	13DD  8B 5E 06			     mov     bx,word ptr [bp+6]
   4705	13E0  FF 77 06			     push    word ptr [bx+6]
   4706	13E3  FF 77 04			     push    word ptr [bx+4]
   4707	13E6  E8 0000e			     call    near ptr _atoi
   4708	13E9  59			     pop     cx
   4709	13EA  59			     pop     cx
   4710	13EB  A3 0016r			     mov     word ptr DGROUP:_semid,ax
   4711					;
   4712					;	     demo_linha	+= 5;
   4713					;
   4714	13EE  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   4715					;
   4716					;	     if	     (demo_linha >21)
   4717					;
   4718	13F3  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   4719	13F8  7E 06			     jle     short @30@198
   4720					;
   4721					;		     demo_linha	= 1;
   4722					;
   4723	13FA  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   4724	1400			     @30@198:
   4725					;
   4726					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4727					;
   4728	1400  B8 12BCr			     mov     ax,offset _sem_aplic
   4729	1403  50			     push    ax
   4730	1404  E8 0000e			     call    near ptr _fork
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 84
command.ASM



   4731	1407  59			     pop     cx
   4732	1408  3D FFFF			     cmp     ax,-1
   4733	140B  75 06			     jne     short @30@254
   4734					;
   4735					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4736					;
   4737	140D  1E			     push    ds
   4738	140E  B8 0AE4r			     mov     ax,offset DGROUP:s@+2632
   4739	1411  EB BF			     jmp     short @30@86
   4740	1413			     @30@254:
   4741					;
   4742					;		     return 1;
   4743					;	     }
   4744					;	     return 0;
   4745					;
   4746	1413  33 C0			     xor     ax,ax
   4747	1415  EB C4			     jmp     short @30@114
   4748	1417			     @30@282:
   4749					;
   4750					;    }
   4751					;
   4752	1417  5D			     pop     bp
   4753	1418  C3			     ret
   4754	1419			     _cmd_semtest    endp
   4755					;
   4756					;    int cmd_semup(int argc, char far *argv[])
   4757					;
   4758					     assume  cs:_TEXT
   4759	1419			     _cmd_semup	     proc    near
   4760	1419  55			     push    bp
   4761	141A  8B EC			     mov     bp,sp
   4762	141C  83 EC 02			     sub     sp,2
   4763					;
   4764					;    {
   4765					;	     semid_t semid;
   4766					;
   4767					;	     if	     (argc != 2)     {
   4768					;
   4769	141F  83 7E 04 02		     cmp     word ptr [bp+4],2
   4770	1423  74 0F			     je	     short @31@114
   4771					;
   4772					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4773					;
   4774	1425  1E			     push    ds
   4775	1426  B8 0B16r			     mov     ax,offset DGROUP:s@+2682
   4776	1429  50			     push    ax
   4777	142A  E8 0000e			     call    near ptr _putstr
   4778	142D  59			     pop     cx
   4779	142E  59			     pop     cx
   4780					;
   4781					;		     return 1;
   4782					;
   4783	142F  B8 0001			     mov     ax,1
   4784	1432			     @31@86:
   4785	1432  EB 1A			     jmp     short @31@142
   4786	1434			     @31@114:
   4787					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 85
command.ASM



   4788					;	     }
   4789					;	     semid = atoi(argv[1]);
   4790					;
   4791	1434  8B 5E 06			     mov     bx,word ptr [bp+6]
   4792	1437  FF 77 06			     push    word ptr [bx+6]
   4793	143A  FF 77 04			     push    word ptr [bx+4]
   4794	143D  E8 0000e			     call    near ptr _atoi
   4795	1440  59			     pop     cx
   4796	1441  59			     pop     cx
   4797	1442  89 46 FE			     mov     word ptr [bp-2],ax
   4798					;
   4799					;	     return semup(semid);
   4800					;
   4801	1445  FF 76 FE			     push    word ptr [bp-2]
   4802	1448  E8 0000e			     call    near ptr _semup
   4803	144B  59			     pop     cx
   4804	144C  EB E4			     jmp     short @31@86
   4805	144E			     @31@142:
   4806					;
   4807					;    }
   4808					;
   4809	144E  8B E5			     mov     sp,bp
   4810	1450  5D			     pop     bp
   4811	1451  C3			     ret
   4812	1452			     _cmd_semup	     endp
   4813					;
   4814					;    int cmd_semdestroy(int argc, char far *argv[])
   4815					;
   4816					     assume  cs:_TEXT
   4817	1452			     _cmd_semdestroy proc    near
   4818	1452  55			     push    bp
   4819	1453  8B EC			     mov     bp,sp
   4820	1455  83 EC 02			     sub     sp,2
   4821					;
   4822					;    {
   4823					;	     semid_t semid;
   4824					;
   4825					;	     if	     (argc != 2)     {
   4826					;
   4827	1458  83 7E 04 02		     cmp     word ptr [bp+4],2
   4828	145C  74 0F			     je	     short @32@114
   4829					;
   4830					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4831					;
   4832	145E  1E			     push    ds
   4833	145F  B8 0B47r			     mov     ax,offset DGROUP:s@+2731
   4834	1462  50			     push    ax
   4835	1463  E8 0000e			     call    near ptr _putstr
   4836	1466  59			     pop     cx
   4837	1467  59			     pop     cx
   4838					;
   4839					;		     return 1;
   4840					;
   4841	1468  B8 0001			     mov     ax,1
   4842	146B			     @32@86:
   4843	146B  EB 1A			     jmp     short @32@142
   4844	146D			     @32@114:
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 86
command.ASM



   4845					;
   4846					;	     }
   4847					;	     semid = atoi(argv[1]);
   4848					;
   4849	146D  8B 5E 06			     mov     bx,word ptr [bp+6]
   4850	1470  FF 77 06			     push    word ptr [bx+6]
   4851	1473  FF 77 04			     push    word ptr [bx+4]
   4852	1476  E8 0000e			     call    near ptr _atoi
   4853	1479  59			     pop     cx
   4854	147A  59			     pop     cx
   4855	147B  89 46 FE			     mov     word ptr [bp-2],ax
   4856					;
   4857					;	     return semdestroy(semid);
   4858					;
   4859	147E  FF 76 FE			     push    word ptr [bp-2]
   4860	1481  E8 0000e			     call    near ptr _semdestroy
   4861	1484  59			     pop     cx
   4862	1485  EB E4			     jmp     short @32@86
   4863	1487			     @32@142:
   4864					;
   4865					;    }
   4866					;
   4867	1487  8B E5			     mov     sp,bp
   4868	1489  5D			     pop     bp
   4869	148A  C3			     ret
   4870	148B			     _cmd_semdestroy endp
   4871					;
   4872					;    void create()
   4873					;
   4874					     assume  cs:_TEXT
   4875	148B			     _create proc    near
   4876	148B  55			     push    bp
   4877	148C  8B EC			     mov     bp,sp
   4878	148E  83 EC 16			     sub     sp,22
   4879	1491  56			     push    si
   4880	1492  57			     push    di
   4881					;
   4882					;    {
   4883					;      extern int demo_linha;
   4884					;      extern int exitcode;
   4885					;      unsigned	i;
   4886					;      int ini = 1 + (getpid()%4) * 5;
   4887					;
   4888	1493  E8 0000e			     call    near ptr _getpid
   4889	1496  BB 0004			     mov     bx,4
   4890	1499  99			     cwd
   4891	149A  F7 FB			     idiv    bx
   4892	149C  BB 0005			     mov     bx,5
   4893	149F  8B C2			     mov     ax,dx
   4894	14A1  F7 EB			     imul    bx
   4895	14A3  40			     inc     ax
   4896	14A4  8B F8			     mov     di,ax
   4897					;
   4898					;      char str[20];
   4899					;      int ec =	exitcode;
   4900					;
   4901	14A6  A1 009Ar			     mov     ax,word ptr DGROUP:exitcode
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 87
command.ASM



   4902	14A9  89 46 FE			     mov     word ptr [bp-2],ax
   4903					;
   4904					;
   4905					;      semdown(broadcast_sem_id);
   4906					;
   4907	14AC  FF 36 0014r		     push    word ptr DGROUP:broadcast_sem_id
   4908	14B0  E8 0000e			     call    near ptr _semdown
   4909	14B3  59			     pop     cx
   4910					;
   4911					;
   4912					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4913					;
   4914	14B4  1E			     push    ds
   4915	14B5  B8 0B78r			     mov     ax,offset DGROUP:s@+2780
   4916	14B8  50			     push    ax
   4917	14B9  57			     push    di
   4918	14BA  B8 0041			     mov     ax,65
   4919	14BD  50			     push    ax
   4920	14BE  E8 0000e			     call    near ptr _putstrxy
   4921	14C1  83 C4 08			     add     sp,8
   4922					;
   4923					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   4924					;
   4925	14C4  1E			     push    ds
   4926	14C5  B8 0B89r			     mov     ax,offset DGROUP:s@+2797
   4927	14C8  50			     push    ax
   4928	14C9  8B C7			     mov     ax,di
   4929	14CB  40			     inc     ax
   4930	14CC  50			     push    ax
   4931	14CD  B8 0041			     mov     ax,65
   4932	14D0  50			     push    ax
   4933	14D1  E8 0000e			     call    near ptr _putstrxy
   4934	14D4  83 C4 08			     add     sp,8
   4935					;
   4936					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   4937					;
   4938	14D7  1E			     push    ds
   4939	14D8  B8 0B9Ar			     mov     ax,offset DGROUP:s@+2814
   4940	14DB  50			     push    ax
   4941	14DC  8B C7			     mov     ax,di
   4942	14DE  05 0002			     add     ax,2
   4943	14E1  50			     push    ax
   4944	14E2  B8 0041			     mov     ax,65
   4945	14E5  50			     push    ax
   4946	14E6  E8 0000e			     call    near ptr _putstrxy
   4947	14E9  83 C4 08			     add     sp,8
   4948					;
   4949					;      putstrxy(65,ini+3,"≥		 ≥");
   4950					;
   4951	14EC  1E			     push    ds
   4952	14ED  B8 0BABr			     mov     ax,offset DGROUP:s@+2831
   4953	14F0  50			     push    ax
   4954	14F1  8B C7			     mov     ax,di
   4955	14F3  05 0003			     add     ax,3
   4956	14F6  50			     push    ax
   4957	14F7  B8 0041			     mov     ax,65
   4958	14FA  50			     push    ax
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 88
command.ASM



   4959	14FB  E8 0000e			     call    near ptr _putstrxy
   4960	14FE  83 C4 08			     add     sp,8
   4961					;
   4962					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4963					;
   4964	1501  1E			     push    ds
   4965	1502  B8 0BBCr			     mov     ax,offset DGROUP:s@+2848
   4966	1505  50			     push    ax
   4967	1506  8B C7			     mov     ax,di
   4968	1508  05 0004			     add     ax,4
   4969	150B  50			     push    ax
   4970	150C  B8 0041			     mov     ax,65
   4971	150F  50			     push    ax
   4972	1510  E8 0000e			     call    near ptr _putstrxy
   4973	1513  83 C4 08			     add     sp,8
   4974					;
   4975					;
   4976					;      inttostr(str,getpid());
   4977					;
   4978	1516  E8 0000e			     call    near ptr _getpid
   4979	1519  50			     push    ax
   4980	151A  16			     push    ss
   4981	151B  8D 46 EA			     lea     ax,word ptr [bp-22]
   4982	151E  50			     push    ax
   4983	151F  E8 0000e			     call    near ptr _inttostr
   4984	1522  83 C4 06			     add     sp,6
   4985					;
   4986					;      putstrxy(74,ini+1,str);
   4987					;
   4988	1525  16			     push    ss
   4989	1526  8D 46 EA			     lea     ax,word ptr [bp-22]
   4990	1529  50			     push    ax
   4991	152A  8B C7			     mov     ax,di
   4992	152C  40			     inc     ax
   4993	152D  50			     push    ax
   4994	152E  B8 004A			     mov     ax,74
   4995	1531  50			     push    ax
   4996	1532  E8 0000e			     call    near ptr _putstrxy
   4997	1535  83 C4 08			     add     sp,8
   4998					;
   4999					;
   5000					;      for (i=0;i<60000U;++i)  {
   5001					;
   5002	1538  33 F6			     xor     si,si
   5003	153A  EB 29			     jmp     short @33@114
   5004	153C			     @33@58:
   5005					;
   5006					;	   unsignedtostr(str,i,5,'0');
   5007					;
   5008	153C  B0 30			     mov     al,48
   5009	153E  50			     push    ax
   5010	153F  B8 0005			     mov     ax,5
   5011	1542  50			     push    ax
   5012	1543  56			     push    si
   5013	1544  16			     push    ss
   5014	1545  8D 46 EA			     lea     ax,word ptr [bp-22]
   5015	1548  50			     push    ax
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 89
command.ASM



   5016	1549  E8 0000e			     call    near ptr _unsignedtostr
   5017	154C  83 C4 0A			     add     sp,10
   5018					;
   5019					;	   putstrxy(70,ini+3,str);
   5020					;
   5021	154F  16			     push    ss
   5022	1550  8D 46 EA			     lea     ax,word ptr [bp-22]
   5023	1553  50			     push    ax
   5024	1554  8B C7			     mov     ax,di
   5025	1556  05 0003			     add     ax,3
   5026	1559  50			     push    ax
   5027	155A  B8 0046			     mov     ax,70
   5028	155D  50			     push    ax
   5029	155E  E8 0000e			     call    near ptr _putstrxy
   5030	1561  83 C4 08			     add     sp,8
   5031	1564  46			     inc     si
   5032	1565			     @33@114:
   5033	1565  81 FE EA60		     cmp     si,-5536
   5034	1569  72 D1			     jb	     short @33@58
   5035					;
   5036					;      }
   5037					;      for (i=0;i<60000U;++i)  {
   5038					;
   5039	156B  33 F6			     xor     si,si
   5040	156D  EB 29			     jmp     short @33@226
   5041	156F			     @33@170:
   5042					;
   5043					;	   unsignedtostr(str,i,5,'0');
   5044					;
   5045	156F  B0 30			     mov     al,48
   5046	1571  50			     push    ax
   5047	1572  B8 0005			     mov     ax,5
   5048	1575  50			     push    ax
   5049	1576  56			     push    si
   5050	1577  16			     push    ss
   5051	1578  8D 46 EA			     lea     ax,word ptr [bp-22]
   5052	157B  50			     push    ax
   5053	157C  E8 0000e			     call    near ptr _unsignedtostr
   5054	157F  83 C4 0A			     add     sp,10
   5055					;
   5056					;	   putstrxy(70,ini+3,str);
   5057					;
   5058	1582  16			     push    ss
   5059	1583  8D 46 EA			     lea     ax,word ptr [bp-22]
   5060	1586  50			     push    ax
   5061	1587  8B C7			     mov     ax,di
   5062	1589  05 0003			     add     ax,3
   5063	158C  50			     push    ax
   5064	158D  B8 0046			     mov     ax,70
   5065	1590  50			     push    ax
   5066	1591  E8 0000e			     call    near ptr _putstrxy
   5067	1594  83 C4 08			     add     sp,8
   5068	1597  46			     inc     si
   5069	1598			     @33@226:
   5070	1598  81 FE EA60		     cmp     si,-5536
   5071	159C  72 D1			     jb	     short @33@170
   5072					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 90
command.ASM



   5073					;      }
   5074					;      for (i=0;i<60000U;++i)  {
   5075					;
   5076	159E  33 F6			     xor     si,si
   5077	15A0  EB 29			     jmp     short @33@338
   5078	15A2			     @33@282:
   5079					;
   5080					;	   unsignedtostr(str,i,5,'0');
   5081					;
   5082	15A2  B0 30			     mov     al,48
   5083	15A4  50			     push    ax
   5084	15A5  B8 0005			     mov     ax,5
   5085	15A8  50			     push    ax
   5086	15A9  56			     push    si
   5087	15AA  16			     push    ss
   5088	15AB  8D 46 EA			     lea     ax,word ptr [bp-22]
   5089	15AE  50			     push    ax
   5090	15AF  E8 0000e			     call    near ptr _unsignedtostr
   5091	15B2  83 C4 0A			     add     sp,10
   5092					;
   5093					;	   putstrxy(70,ini+3,str);
   5094					;
   5095	15B5  16			     push    ss
   5096	15B6  8D 46 EA			     lea     ax,word ptr [bp-22]
   5097	15B9  50			     push    ax
   5098	15BA  8B C7			     mov     ax,di
   5099	15BC  05 0003			     add     ax,3
   5100	15BF  50			     push    ax
   5101	15C0  B8 0046			     mov     ax,70
   5102	15C3  50			     push    ax
   5103	15C4  E8 0000e			     call    near ptr _putstrxy
   5104	15C7  83 C4 08			     add     sp,8
   5105	15CA  46			     inc     si
   5106	15CB			     @33@338:
   5107	15CB  81 FE EA60		     cmp     si,-5536
   5108	15CF  72 D1			     jb	     short @33@282
   5109					;
   5110					;      }
   5111					;      for (i=0;i<60000U;++i)  {
   5112					;
   5113	15D1  33 F6			     xor     si,si
   5114	15D3  EB 29			     jmp     short @33@450
   5115	15D5			     @33@394:
   5116					;
   5117					;	   unsignedtostr(str,i,5,'0');
   5118					;
   5119	15D5  B0 30			     mov     al,48
   5120	15D7  50			     push    ax
   5121	15D8  B8 0005			     mov     ax,5
   5122	15DB  50			     push    ax
   5123	15DC  56			     push    si
   5124	15DD  16			     push    ss
   5125	15DE  8D 46 EA			     lea     ax,word ptr [bp-22]
   5126	15E1  50			     push    ax
   5127	15E2  E8 0000e			     call    near ptr _unsignedtostr
   5128	15E5  83 C4 0A			     add     sp,10
   5129					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 91
command.ASM



   5130					;	   putstrxy(70,ini+3,str);
   5131					;
   5132	15E8  16			     push    ss
   5133	15E9  8D 46 EA			     lea     ax,word ptr [bp-22]
   5134	15EC  50			     push    ax
   5135	15ED  8B C7			     mov     ax,di
   5136	15EF  05 0003			     add     ax,3
   5137	15F2  50			     push    ax
   5138	15F3  B8 0046			     mov     ax,70
   5139	15F6  50			     push    ax
   5140	15F7  E8 0000e			     call    near ptr _putstrxy
   5141	15FA  83 C4 08			     add     sp,8
   5142	15FD  46			     inc     si
   5143	15FE			     @33@450:
   5144	15FE  81 FE EA60		     cmp     si,-5536
   5145	1602  72 D1			     jb	     short @33@394
   5146					;
   5147					;      }
   5148					;      for (i=0;i<60000U;++i)  {
   5149					;
   5150	1604  33 F6			     xor     si,si
   5151	1606  EB 29			     jmp     short @33@562
   5152	1608			     @33@506:
   5153					;
   5154					;	   unsignedtostr(str,i,5,'0');
   5155					;
   5156	1608  B0 30			     mov     al,48
   5157	160A  50			     push    ax
   5158	160B  B8 0005			     mov     ax,5
   5159	160E  50			     push    ax
   5160	160F  56			     push    si
   5161	1610  16			     push    ss
   5162	1611  8D 46 EA			     lea     ax,word ptr [bp-22]
   5163	1614  50			     push    ax
   5164	1615  E8 0000e			     call    near ptr _unsignedtostr
   5165	1618  83 C4 0A			     add     sp,10
   5166					;
   5167					;	   putstrxy(70,ini+3,str);
   5168					;
   5169	161B  16			     push    ss
   5170	161C  8D 46 EA			     lea     ax,word ptr [bp-22]
   5171	161F  50			     push    ax
   5172	1620  8B C7			     mov     ax,di
   5173	1622  05 0003			     add     ax,3
   5174	1625  50			     push    ax
   5175	1626  B8 0046			     mov     ax,70
   5176	1629  50			     push    ax
   5177	162A  E8 0000e			     call    near ptr _putstrxy
   5178	162D  83 C4 08			     add     sp,8
   5179	1630  46			     inc     si
   5180	1631			     @33@562:
   5181	1631  81 FE EA60		     cmp     si,-5536
   5182	1635  72 D1			     jb	     short @33@506
   5183					;
   5184					;      }
   5185					;      for (i=0;i<60000U;++i)  {
   5186					;
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 92
command.ASM



   5187	1637  33 F6			     xor     si,si
   5188	1639  EB 29			     jmp     short @33@674
   5189	163B			     @33@618:
   5190					;
   5191					;	   unsignedtostr(str,i,5,'0');
   5192					;
   5193	163B  B0 30			     mov     al,48
   5194	163D  50			     push    ax
   5195	163E  B8 0005			     mov     ax,5
   5196	1641  50			     push    ax
   5197	1642  56			     push    si
   5198	1643  16			     push    ss
   5199	1644  8D 46 EA			     lea     ax,word ptr [bp-22]
   5200	1647  50			     push    ax
   5201	1648  E8 0000e			     call    near ptr _unsignedtostr
   5202	164B  83 C4 0A			     add     sp,10
   5203					;
   5204					;	   putstrxy(70,ini+3,str);
   5205					;
   5206	164E  16			     push    ss
   5207	164F  8D 46 EA			     lea     ax,word ptr [bp-22]
   5208	1652  50			     push    ax
   5209	1653  8B C7			     mov     ax,di
   5210	1655  05 0003			     add     ax,3
   5211	1658  50			     push    ax
   5212	1659  B8 0046			     mov     ax,70
   5213	165C  50			     push    ax
   5214	165D  E8 0000e			     call    near ptr _putstrxy
   5215	1660  83 C4 08			     add     sp,8
   5216	1663  46			     inc     si
   5217	1664			     @33@674:
   5218	1664  81 FE EA60		     cmp     si,-5536
   5219	1668  72 D1			     jb	     short @33@618
   5220					;
   5221					;      }
   5222					;      exit(ec);
   5223					;
   5224	166A  FF 76 FE			     push    word ptr [bp-2]
   5225	166D  E8 0000e			     call    near ptr _exit
   5226	1670  59			     pop     cx
   5227					;
   5228					;    }
   5229					;
   5230	1671  5F			     pop     di
   5231	1672  5E			     pop     si
   5232	1673  8B E5			     mov     sp,bp
   5233	1675  5D			     pop     bp
   5234	1676  C3			     ret
   5235	1677			     _create endp
   5236					;
   5237					;    int cmd_create(int	argc, char far *argv[])
   5238					;
   5239					     assume  cs:_TEXT
   5240	1677			     _cmd_create     proc    near
   5241	1677  55			     push    bp
   5242	1678  8B EC			     mov     bp,sp
   5243	167A  83 EC 16			     sub     sp,22
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 93
command.ASM



   5244	167D  56			     push    si
   5245	167E  57			     push    di
   5246					;
   5247					;    {
   5248					;	     extern int	demo_linha;
   5249					;	     extern int	broadcast_sem_id;
   5250					;
   5251					;	     int contador;
   5252					;	     int     res,value;
   5253					;	     semid_t semid;
   5254					;	     char    str[20];
   5255					;
   5256					;	     if	     (argc != 1)     {
   5257					;
   5258	167F  83 7E 04 01		     cmp     word ptr [bp+4],1
   5259	1683  74 10			     je	     short @34@170
   5260					;
   5261					;		     putstr("Erro em semcreate:	nao e necessario argumentos!\n");
   5262					;
   5263	1685  1E			     push    ds
   5264	1686  B8 0BCDr			     mov     ax,offset DGROUP:s@+2865
   5265	1689			     @34@86:
   5266	1689  50			     push    ax
   5267	168A  E8 0000e			     call    near ptr _putstr
   5268	168D  59			     pop     cx
   5269	168E  59			     pop     cx
   5270					;
   5271					;		     return 1;
   5272					;
   5273	168F			     @34@114:
   5274	168F  B8 0001			     mov     ax,1
   5275	1692			     @34@142:
   5276	1692  E9 00AC			     jmp     @34@450
   5277	1695			     @34@170:
   5278					;
   5279					;	     }
   5280					;
   5281					;	     value = 0;
   5282					;
   5283	1695  C7 46 FE 0000		     mov     word ptr [bp-2],0
   5284					;
   5285					;	     semid = semcreate(value);
   5286					;
   5287	169A  FF 76 FE			     push    word ptr [bp-2]
   5288	169D  E8 0000e			     call    near ptr _semcreate
   5289	16A0  59			     pop     cx
   5290	16A1  8B F8			     mov     di,ax
   5291					;
   5292					;	     if	     (semid==miniSO_ERROR)
   5293					;
   5294	16A3  83 FF FF			     cmp     di,-1
   5295	16A6  75 02			     jne     short @34@226
   5296	16A8  EB E5			     jmp     short @34@114
   5297	16AA			     @34@226:
   5298					;
   5299					;		     return 1;
   5300					;	     putstr("Semaforo id=");
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 94
command.ASM



   5301					;
   5302	16AA  1E			     push    ds
   5303	16AB  B8 0BFEr			     mov     ax,offset DGROUP:s@+2914
   5304	16AE  50			     push    ax
   5305	16AF  E8 0000e			     call    near ptr _putstr
   5306	16B2  59			     pop     cx
   5307	16B3  59			     pop     cx
   5308					;
   5309					;	     inttostr(str,semid);
   5310					;
   5311	16B4  57			     push    di
   5312	16B5  16			     push    ss
   5313	16B6  8D 46 EA			     lea     ax,word ptr [bp-22]
   5314	16B9  50			     push    ax
   5315	16BA  E8 0000e			     call    near ptr _inttostr
   5316	16BD  83 C4 06			     add     sp,6
   5317					;
   5318					;	     putstr(str);
   5319					;
   5320	16C0  16			     push    ss
   5321	16C1  8D 46 EA			     lea     ax,word ptr [bp-22]
   5322	16C4  50			     push    ax
   5323	16C5  E8 0000e			     call    near ptr _putstr
   5324	16C8  59			     pop     cx
   5325	16C9  59			     pop     cx
   5326					;
   5327					;	     putstr(" criado (value=");
   5328					;
   5329	16CA  1E			     push    ds
   5330	16CB  B8 0C0Br			     mov     ax,offset DGROUP:s@+2927
   5331	16CE  50			     push    ax
   5332	16CF  E8 0000e			     call    near ptr _putstr
   5333	16D2  59			     pop     cx
   5334	16D3  59			     pop     cx
   5335					;
   5336					;	     inttostr(str,value);
   5337					;
   5338	16D4  FF 76 FE			     push    word ptr [bp-2]
   5339	16D7  16			     push    ss
   5340	16D8  8D 46 EA			     lea     ax,word ptr [bp-22]
   5341	16DB  50			     push    ax
   5342	16DC  E8 0000e			     call    near ptr _inttostr
   5343	16DF  83 C4 06			     add     sp,6
   5344					;
   5345					;	     putstr(str);
   5346					;
   5347	16E2  16			     push    ss
   5348	16E3  8D 46 EA			     lea     ax,word ptr [bp-22]
   5349	16E6  50			     push    ax
   5350	16E7  E8 0000e			     call    near ptr _putstr
   5351	16EA  59			     pop     cx
   5352	16EB  59			     pop     cx
   5353					;
   5354					;	     putstr(")\n");
   5355					;
   5356	16EC  1E			     push    ds
   5357	16ED  B8 0C1Br			     mov     ax,offset DGROUP:s@+2943
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 95
command.ASM



   5358	16F0  50			     push    ax
   5359	16F1  E8 0000e			     call    near ptr _putstr
   5360	16F4  59			     pop     cx
   5361	16F5  59			     pop     cx
   5362					;
   5363					;	     broadcast_sem_id =	semid;
   5364					;
   5365	16F6  89 3E 0014r		     mov     word ptr DGROUP:broadcast_sem_id,di
   5366					;
   5367					;
   5368					;	     demo_linha	+= 5;
   5369					;
   5370	16FA  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   5371					;
   5372					;	     if	     (demo_linha >21)
   5373					;
   5374	16FF  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   5375	1704  7E 06			     jle     short @34@282
   5376					;
   5377					;		     demo_linha	= 1;
   5378					;
   5379	1706  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   5380	170C			     @34@282:
   5381					;
   5382					;	     exitcode =	atoi(argv[1]);
   5383					;
   5384	170C  8B 5E 06			     mov     bx,word ptr [bp+6]
   5385	170F  FF 77 06			     push    word ptr [bx+6]
   5386	1712  FF 77 04			     push    word ptr [bx+4]
   5387	1715  E8 0000e			     call    near ptr _atoi
   5388	1718  59			     pop     cx
   5389	1719  59			     pop     cx
   5390	171A  A3 009Ar			     mov     word ptr DGROUP:exitcode,ax
   5391					;
   5392					;
   5393					;	     for(contador = 1; contador	<= 4; contador++) {
   5394					;
   5395	171D  BE 0001			     mov     si,1
   5396	1720  EB 15			     jmp     short @34@394
   5397	1722			     @34@310:
   5398					;
   5399					;		     if	     (fork(create)==miniSO_ERROR)  {
   5400					;
   5401	1722  B8 148Br			     mov     ax,offset _create
   5402	1725  50			     push    ax
   5403	1726  E8 0000e			     call    near ptr _fork
   5404	1729  59			     pop     cx
   5405	172A  3D FFFF			     cmp     ax,-1
   5406	172D  75 07			     jne     short @34@366
   5407					;
   5408					;			     putstr("Erro em create: fork() nao	conseguiu criar	thread!\n");
   5409					;
   5410	172F  1E			     push    ds
   5411	1730  B8 0C1Er			     mov     ax,offset DGROUP:s@+2946
   5412	1733  E9 FF53			     jmp     @34@86
   5413	1736			     @34@366:
   5414	1736  46			     inc     si
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 96
command.ASM



   5415	1737			     @34@394:
   5416	1737  83 FE 04			     cmp     si,4
   5417	173A  7E E6			     jle     short @34@310
   5418					;
   5419					;			     return 1;
   5420					;		     }
   5421					;	     }
   5422					;
   5423					;	     return 0;
   5424					;
   5425	173C  33 C0			     xor     ax,ax
   5426	173E  E9 FF51			     jmp     @34@142
   5427	1741			     @34@450:
   5428					;
   5429					;    }
   5430					;
   5431	1741  5F			     pop     di
   5432	1742  5E			     pop     si
   5433	1743  8B E5			     mov     sp,bp
   5434	1745  5D			     pop     bp
   5435	1746  C3			     ret
   5436	1747			     _cmd_create     endp
   5437					;
   5438					;    int cmd_start(int argc, char far *argv[])
   5439					;
   5440					     assume  cs:_TEXT
   5441	1747			     _cmd_start	     proc    near
   5442	1747  55			     push    bp
   5443	1748  8B EC			     mov     bp,sp
   5444	174A  83 EC 02			     sub     sp,2
   5445					;
   5446					;    {
   5447					;	     semid_t semid;
   5448					;
   5449					;	     if	     (argc != 2)     {
   5450					;
   5451	174D  83 7E 04 02		     cmp     word ptr [bp+4],2
   5452	1751  74 0F			     je	     short @35@114
   5453					;
   5454					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   5455					;
   5456	1753  1E			     push    ds
   5457	1754  B8 0C52r			     mov     ax,offset DGROUP:s@+2998
   5458	1757  50			     push    ax
   5459	1758  E8 0000e			     call    near ptr _putstr
   5460	175B  59			     pop     cx
   5461	175C  59			     pop     cx
   5462					;
   5463					;		     return 1;
   5464					;
   5465	175D  B8 0001			     mov     ax,1
   5466	1760			     @35@86:
   5467	1760  EB 1C			     jmp     short @35@142
   5468	1762			     @35@114:
   5469					;
   5470					;	     }
   5471					;	     semid = atoi(argv[1]);
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 97
command.ASM



   5472					;
   5473	1762  8B 5E 06			     mov     bx,word ptr [bp+6]
   5474	1765  FF 77 06			     push    word ptr [bx+6]
   5475	1768  FF 77 04			     push    word ptr [bx+4]
   5476	176B  E8 0000e			     call    near ptr _atoi
   5477	176E  59			     pop     cx
   5478	176F  59			     pop     cx
   5479	1770  89 46 FE			     mov     word ptr [bp-2],ax
   5480					;
   5481					;	     sembroadcast(semid);
   5482					;
   5483	1773  FF 76 FE			     push    word ptr [bp-2]
   5484	1776  E8 0000e			     call    near ptr _sembroadcast
   5485	1779  59			     pop     cx
   5486					;
   5487					;	     //	return sembroadcast(semid);
   5488					;	     return 0;
   5489					;
   5490	177A  33 C0			     xor     ax,ax
   5491	177C  EB E2			     jmp     short @35@86
   5492	177E			     @35@142:
   5493					;
   5494					;    }
   5495					;
   5496	177E  8B E5			     mov     sp,bp
   5497	1780  5D			     pop     bp
   5498	1781  C3			     ret
   5499	1782			     _cmd_start	     endp
   5500	1782			     _TEXT   ends
   5501	0014			     _BSS    segment word public 'BSS'
   5502	0014			     broadcast_sem_id	     label   word
   5503	0014  02*(??)			     db	     2 dup (?)
   5504	0016			     _semid  label   word
   5505	0016  02*(??)			     db	     2 dup (?)
   5506	0018			     var     label   word
   5507	0018  01F4*(??)			     db	     500 dup (?)
   5508	020C			     history_pos     label   word
   5509	020C  02*(??)			     db	     2 dup (?)
   5510	020E			     history_nxt     label   word
   5511	020E  02*(??)			     db	     2 dup (?)
   5512	0210			     history_ini     label   word
   5513	0210  02*(??)			     db	     2 dup (?)
   5514	0212			     history_len     label   word
   5515	0212  02*(??)			     db	     2 dup (?)
   5516	0214			     history label   byte
   5517	0214  0136*(??)			     db	     310 dup (?)
   5518	034A			     argv    label   dword
   5519	034A  40*(??)			     db	     64	dup (?)
   5520	038A			     argline label   byte
   5521	038A  025F*(??)			     db	     607 dup (?)
   5522	05E9			     palavra label   byte
   5523	05E9  1F*(??)			     db	     31	dup (?)
   5524	0608			     cmdline label   byte
   5525	0608  1F*(??)			     db	     31	dup (?)
   5526	0627			     end_command     label   word
   5527	0627  02*(??)			     db	     2 dup (?)
   5528					     ?debug  C E9
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 98
command.ASM



   5529					     ?debug  C FA00000000
   5530	0629			     _BSS    ends
   5531	009C			     _DATA   segment word public 'DATA'
   5532	009C			     s@	     label   byte
   5533	009C  3F			     db	     '?'
   5534	009D  00			     db	     0
   5535	009E  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5536	      20 20 20 20 20 20	20+
   5537	      20 20 20 20 20 65	78+
   5538	      69 62 65 20 65 73	74+
   5539	      61 73 20 69 6E 66	6F+
   5540	      72 6D 61 63 6F 65	73
   5541	00C8  00			     db	     0
   5542	00C9  68 65 6C 70		     db	     'help'
   5543	00CD  00			     db	     0
   5544	00CE  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5545	      20 20 20 20 20 20	20+
   5546	      20 20 65 78 69 62	65+
   5547	      20 65 73 74 61 73	20+
   5548	      69 6E 66 6F 72 6D	61+
   5549	      63 6F 65 73
   5550	00F5  00			     db	     0
   5551	00F6  76 65 72			     db	     'ver'
   5552	00F9  00			     db	     0
   5553	00FA  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5554	      20 20 20 20 20 20	20+
   5555	      20 20 20 6D 6F 73	74+
   5556	      72 61 20 61 20 76	65+
   5557	      72 73 61 6F 20 64	6F+
   5558	      20 4D 53 4F
   5559	0121  00			     db	     0
   5560	0122  64 61 74 65		     db	     'date'
   5561	0126  00			     db	     0
   5562	0127  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5563	      20 20 20 20 20 20	20+
   5564	      20 20 6D 6F 73 74	72+
   5565	      61 20 61 20 64 61	74+
   5566	      61
   5567	0144  00			     db	     0
   5568	0145  74 69 6D 65		     db	     'time'
   5569	0149  00			     db	     0
   5570	014A  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5571	      20 20 20 20 20 20	20+
   5572	      20 20 6D 6F 73 74	72+
   5573	      61 20 61 20 68 6F	72+
   5574	      61
   5575	0167  00			     db	     0
   5576	0168  63 6C 73			     db	     'cls'
   5577	016B  00			     db	     0
   5578	016C  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   5579	      20 20 20 20 20 20	20+
   5580	      20 20 20 6C 69 6D	70+
   5581	      61 20 61 20 74 65	6C+
   5582	      61
   5583	0189  00			     db	     0
   5584	018A  63 6C 65 61 72		     db	     'clear'
   5585	018F  00			     db	     0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 99
command.ASM



   5586	0190  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5587	      20 20 20 20 20 20	20+
   5588	      20 6C 69 6D 70 61	20+
   5589	      61 20 74 65 6C 61
   5590	01AB  00			     db	     0
   5591	01AC  72 65 62 6F 6F 74		     db	     'reboot'
   5592	01B2  00			     db	     0
   5593	01B3  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5594	      20 20 20 20 20 20	20+
   5595	      72 65 69 6E 69 63	69+
   5596	      61 6C 69 7A 61 20	6F+
   5597	      20 73 69 73 74 65	6D+
   5598	      61
   5599	01D7  00			     db	     0
   5600	01D8  65 78 69 74		     db	     'exit'
   5601	01DC  00			     db	     0
   5602	01DD  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5603	      20 20 20 20 20 20	20+
   5604	      20 20 61 62 61 6E	64+
   5605	      6F 6E 61 20 6F 20	73+
   5606	      69 73 74 65 6D 61
   5607	01FF  00			     db	     0
   5608	0200  71 75 69 74		     db	     'quit'
   5609	0204  00			     db	     0
   5610	0205  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5611	      20 20 20 20 20 20	20+
   5612	      20 20 61 62 61 6E	64+
   5613	      6F 6E 61 20 6F 20	73+
   5614	      69 73 74 65 6D 61
   5615	0227  00			     db	     0
   5616	0228  70 73			     db	     'ps'
   5617	022A  00			     db	     0
   5618	022B  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5619	      20 20 20 20 20 20	20+
   5620	      20 20 20 20 65 78	69+
   5621	      62 65 20 70 72 6F	63+
   5622	      65 73 73 6F 73 2F	74+
   5623	      68 72 65 61 64 73	20+
   5624	      65 6D 20 65 78 65	63+
   5625	      75 63 61 6F
   5626	0260  00			     db	     0
   5627	0261  6B 69 6C 6C		     db	     'kill'
   5628	0265  00			     db	     0
   5629	0266  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5630	      20 20 20 20 20 20	20+
   5631	      20 20 65 6E 63 65	72+
   5632	      72 61 20 75 6D 20	70+
   5633	      72 6F 63 65 73 73	6F+
   5634	      2F 74 68 72 65 61	64
   5635	0290  00			     db	     0
   5636	0291  64 65 6D 6F		     db	     'demo'
   5637	0295  00			     db	     0
   5638	0296  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5639	      6F 64 65 3E 20 20	20+
   5640	      20 20 69 6E 69 63	69+
   5641	      61 20 70 72 6F 63	65+
   5642	      73 73 6F 73 2F 74	68+
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 100
command.ASM



   5643	      72 65 61 64 73 20	64+
   5644	      65 20 64 65 6D 6F	6E+
   5645	      73 74 72 61 63 61	6F
   5646	02CE  00			     db	     0
   5647	02CF  73 65 74			     db	     'set'
   5648	02D2  00			     db	     0
   5649	02D3  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5650	      20 5B 3C 76 61 6C	3E+
   5651	      5D 5D 20 64 65 66	69+
   5652	      6E 65 20 6F 20 76	61+
   5653	      6C 6F 72 20 64 61	20+
   5654	      76 61 72 69 61 76	65+
   5655	      6C 20 6F 75 20 65	78+
   5656	      69 62 65 20 76 61	72+
   5657	      69 61 76 65 69
   5658	0310  73			     db	     's'
   5659	0311  00			     db	     0
   5660	0312  75 6E 73 65 74		     db	     'unset'
   5661	0317  00			     db	     0
   5662	0318  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5663	      20 20 20 20 20 20	20+
   5664	      20 61 70 61 67 61	20+
   5665	      61 20 76 61 72 69	61+
   5666	      76 65 6C
   5667	0337  00			     db	     0
   5668	0338  65 63 68 6F		     db	     'echo'
   5669	033C  00			     db	     0
   5670	033D  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5671	      61 72 67 73 3E 2E	2E+
   5672	      2E 20 69 6D 70 72	69+
   5673	      6D 65 20 61 72 67	75+
   5674	      6D 65 6E 74 6F 73
   5675	035F  00			     db	     0
   5676	0360  77 61 69 74 70 69	64	     db	     'waitpid'
   5677	0367  00			     db	     0
   5678	0368  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5679	      20 20 20 20 20 20	65+
   5680	      73 70 65 72 61 20	70+
   5681	      65 6C 6F 20 70 72	6F+
   5682	      63 65 73 73 6F 2D	66+
   5683	      69 6C 68 6F 20 69	6E+
   5684	      64 69 63 61 64 6F
   5685	0398  00			     db	     0
   5686	0399  77 61 69 74		     db	     'wait'
   5687	039D  00			     db	     0
   5688	039E  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5689	      20 20 20 20 20 20	20+
   5690	      20 20 65 73 70 65	72+
   5691	      61 20 70 6F 72 20	75+
   5692	      6D 20 70 72 6F 63	65+
   5693	      73 73 6F 2D 66 69	6C+
   5694	      68 6F
   5695	03CA  00			     db	     0
   5696	03CB  73 65 6D 6C 73		     db	     'semls'
   5697	03D0  00			     db	     0
   5698	03D1  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5699	      20 20 20 20 20 20	20+
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 101
command.ASM



   5700	      20 6C 69 73 74 61	20+
   5701	      74 61 62 65 6C 61	20+
   5702	      64 65 20 73 65 6D	61+
   5703	      66 6F 72 6F 73
   5704	03F9  00			     db	     0
   5705	03FA  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5706	      74 65
   5707	0403  00			     db	     0
   5708	0404  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5709	      3E 20 20 20 63 72	69+
   5710	      61 20 75 6D 20 73	65+
   5711	      6D 61 66 6F 72 6F
   5712	041F  00			     db	     0
   5713	0420  73 65 6D 74 65 73	74	     db	     'semtest'
   5714	0427  00			     db	     0
   5715	0428  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5716	      3E 20 20 20 20 20	61+
   5717	      70 6C 69 63 61 63	61+
   5718	      6F 20 70 61 72 61	20+
   5719	      74 65 73 74 65 20	64+
   5720	      65 20 73 65 6D 61	66+
   5721	      6F 72 6F 73
   5722	0456  00			     db	     0
   5723	0457  73 65 6D 75 70		     db	     'semup'
   5724	045C  00			     db	     0
   5725	045D  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5726	      3E 20 20 20 20 20	20+
   5727	      20 69 6E 63 72 65	6D+
   5728	      65 6E 74 61 20 6F	20+
   5729	      76 61 6C 6F 72 20	64+
   5730	      65 20 75 6D 20 73	65+
   5731	      6D 61 66 6F 72 6F
   5732	048D  00			     db	     0
   5733	048E  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5734	      72 6F 79
   5735	0498  00			     db	     0
   5736	0499  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5737	      3E 20 20 64 65 73	74+
   5738	      72 6F 69 20 75 6D	20+
   5739	      73 65 6D 61 66 6F	72+
   5740	      6F
   5741	04B6  00			     db	     0
   5742	04B7  63 72 65 61 74 65		     db	     'create'
   5743	04BD  00			     db	     0
   5744	04BE  20 3C 73 65 6D 69	64+	     db	     ' <semid>	cria processos'
   5745	      3E 20 20 63 72 69	61+
   5746	      20 70 72 6F 63 65	73+
   5747	      73 6F 73
   5748	04D6  00			     db	     0
   5749	04D7  73 74 61 72 74		     db	     'start'
   5750	04DC  00			     db	     0
   5751	04DD  20 3C 73 65 6D 69	64+	     db	     ' <semid>	continua execu'
   5752	      3E 20 20 63 6F 6E	74+
   5753	      69 6E 75 61 20 65	78+
   5754	      65 63 75
   5755	04F5  E7			     db	     -25
   5756	04F6  E3			     db	     -29
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 102
command.ASM



   5757	04F7  6F 20 64 6F 73 20	70+	     db	     'o	dos processos'
   5758	      72 6F 63 65 73 73	6F+
   5759	      73
   5760	0506  00			     db	     0
   5761	0507  20 20 20 20 20 20	20+	     db	     '			'
   5762	      20 20 20 20 20 20	20+
   5763	      20 20 20 20
   5764	0519  DC			     db	     -36
   5765	051A  DC			     db	     -36
   5766	051B  DC			     db	     -36
   5767	051C  DC			     db	     -36
   5768	051D  DC			     db	     -36
   5769	051E  DC			     db	     -36
   5770	051F  DC			     db	     -36
   5771	0520  20 20			     db	     '	'
   5772	0522  DC			     db	     -36
   5773	0523  DC			     db	     -36
   5774	0524  DC			     db	     -36
   5775	0525  DC			     db	     -36
   5776	0526  DC			     db	     -36
   5777	0527  DC			     db	     -36
   5778	0528  0A			     db	     10
   5779	0529  00			     db	     0
   5780	052A  20			     db	     ' '
   5781	052B  DC			     db	     -36
   5782	052C  DC			     db	     -36
   5783	052D  DC			     db	     -36
   5784	052E  DC			     db	     -36
   5785	052F  DC			     db	     -36
   5786	0530  20 20			     db	     '	'
   5787	0532  DC			     db	     -36
   5788	0533  20 20			     db	     '	'
   5789	0535  DC			     db	     -36
   5790	0536  DC			     db	     -36
   5791	0537  DC			     db	     -36
   5792	0538  20 20			     db	     '	'
   5793	053A  DC			     db	     -36
   5794	053B  20			     db	     ' '
   5795	053C  DB			     db	     -37
   5796	053D  DB			     db	     -37
   5797	053E  20 20 20			     db	     '	 '
   5798	0541  DF			     db	     -33
   5799	0542  DF			     db	     -33
   5800	0543  20 20			     db	     '	'
   5801	0545  DB			     db	     -37
   5802	0546  DB			     db	     -37
   5803	0547  20 20			     db	     '	'
   5804	0549  DB			     db	     -37
   5805	054A  DB			     db	     -37
   5806	054B  20 20			     db	     '	'
   5807	054D  00			     db	     0
   5808	054E  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5809	      73 74 65 6D 61 20	4F+
   5810	      70 65 72 61 63 69	6F+
   5811	      6E 61 6C
   5812	0566  0A			     db	     10
   5813	0567  00			     db	     0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 103
command.ASM



   5814	0568  DC			     db	     -36
   5815	0569  DB			     db	     -37
   5816	056A  20			     db	     ' '
   5817	056B  DB			     db	     -37
   5818	056C  20			     db	     ' '
   5819	056D  DB			     db	     -37
   5820	056E  20			     db	     ' '
   5821	056F  DC			     db	     -36
   5822	0570  DB			     db	     -37
   5823	0571  20			     db	     ' '
   5824	0572  DC			     db	     -36
   5825	0573  DB			     db	     -37
   5826	0574  20			     db	     ' '
   5827	0575  DB			     db	     -37
   5828	0576  20			     db	     ' '
   5829	0577  DC			     db	     -36
   5830	0578  DB			     db	     -37
   5831	0579  20			     db	     ' '
   5832	057A  DF			     db	     -33
   5833	057B  DF			     db	     -33
   5834	057C  DF			     db	     -33
   5835	057D  DF			     db	     -33
   5836	057E  DB			     db	     -37
   5837	057F  DB			     db	     -37
   5838	0580  DB			     db	     -37
   5839	0581  20			     db	     ' '
   5840	0582  DB			     db	     -37
   5841	0583  DB			     db	     -37
   5842	0584  DB			     db	     -37
   5843	0585  20 20			     db	     '	'
   5844	0587  DB			     db	     -37
   5845	0588  DB			     db	     -37
   5846	0589  20 20			     db	     '	'
   5847	058B  00			     db	     0
   5848	058C  56 73 20			     db	     'Vs '
   5849	058F  00			     db	     0
   5850	0590  32 30 31 35		     db	     '2015'
   5851	0594  00			     db	     0
   5852	0595  0A			     db	     10
   5853	0596  00			     db	     0
   5854	0597  DB			     db	     -37
   5855	0598  DB			     db	     -37
   5856	0599  20			     db	     ' '
   5857	059A  DB			     db	     -37
   5858	059B  20			     db	     ' '
   5859	059C  DB			     db	     -37
   5860	059D  20			     db	     ' '
   5861	059E  DB			     db	     -37
   5862	059F  DB			     db	     -37
   5863	05A0  20			     db	     ' '
   5864	05A1  DB			     db	     -37
   5865	05A2  DB			     db	     -37
   5866	05A3  20			     db	     ' '
   5867	05A4  DB			     db	     -37
   5868	05A5  20			     db	     ' '
   5869	05A6  DB			     db	     -37
   5870	05A7  DB			     db	     -37
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 104
command.ASM



   5871	05A8  20			     db	     ' '
   5872	05A9  DB			     db	     -37
   5873	05AA  DB			     db	     -37
   5874	05AB  DC			     db	     -36
   5875	05AC  DC			     db	     -36
   5876	05AD  DB			     db	     -37
   5877	05AE  DB			     db	     -37
   5878	05AF  DB			     db	     -37
   5879	05B0  20			     db	     ' '
   5880	05B1  DB			     db	     -37
   5881	05B2  DB			     db	     -37
   5882	05B3  DB			     db	     -37
   5883	05B4  DC			     db	     -36
   5884	05B5  DC			     db	     -36
   5885	05B6  DB			     db	     -37
   5886	05B7  DB			     db	     -37
   5887	05B8  20 20			     db	     '	'
   5888	05BA  00			     db	     0
   5889	05BB  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5890	      61 6E 64 20 54 65	6F+
   5891	      64 6F 72 6F 77 69	74+
   5892	      73 63 68
   5893	05D3  0A			     db	     10
   5894	05D4  00			     db	     0
   5895	05D5  0A			     db	     10
   5896	05D6  44 69 67 69 74 65	20	     db	     'Digite '
   5897	05DD  27			     db	     39
   5898	05DE  68 65 6C 70		     db	     'help'
   5899	05E2  27			     db	     39
   5900	05E3  20 6F 75 20		     db	     ' ou '
   5901	05E7  27			     db	     39
   5902	05E8  3F			     db	     '?'
   5903	05E9  27			     db	     39
   5904	05EA  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5905	      6A 75 64 61 2E 2E	2E
   5906	05F8  0A			     db	     10
   5907	05F9  0A			     db	     10
   5908	05FA  00			     db	     0
   5909	05FB  50 52 4F 4D 50 54		     db	     'PROMPT'
   5910	0601  00			     db	     0
   5911	0602  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5912	0609  00			     db	     0
   5913	060A  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5914	      56 45 4C
   5915	0614  00			     db	     0
   5916	0615  30			     db	     '0'
   5917	0616  00			     db	     0
   5918	0617  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5919	      56 45 4C
   5920	0621  00			     db	     0
   5921	0622  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   5922	      6F 6D 61 6E 64 6F	20+
   5923	      64 65 73 63 6F 6E	68+
   5924	      65 63 69 64 6F 21
   5925	063D  0A			     db	     10
   5926	063E  00			     db	     0
   5927	063F  50 52 4F 4D 50 54		     db	     'PROMPT'
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 105
command.ASM



   5928	0645  00			     db	     0
   5929	0646  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5930	      73 20 64 6F 20 6D	69+
   5931	      6E 69 73 53 69 73	74+
   5932	      65 6D 61 20 4F 70	65+
   5933	      72 61 63 69 6F 6E	61+
   5934	      6C 3A
   5935	066B  0A			     db	     10
   5936	066C  00			     db	     0
   5937	066D  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5938	      73 74 65 6D 61 20	4F+
   5939	      70 65 72 61 63 69	6F+
   5940	      6E 61 6C 20 2D 20	56+
   5941	      73 20
   5942	068B  00			     db	     0
   5943	068C  32 30 31 35		     db	     '2015'
   5944	0690  00			     db	     0
   5945	0691  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   5946	      50 49 44 20 20 20	50+
   5947	      50 49 44 20 20 53	54+
   5948	      41 54 55 53 20 20	20+
   5949	      57 41 49 54 20 20	20+
   5950	      5A 4C 49 53 54 20	20+
   5951	      50 52 45 56 20 20	20+
   5952	      4E 45 58 54
   5953	06C6  0A			     db	     10
   5954	06C7  00			     db	     0
   5955	06C8  20 20			     db	     '	'
   5956	06CA  00			     db	     0
   5957	06CB  20 20			     db	     '	'
   5958	06CD  00			     db	     0
   5959	06CE  20 20			     db	     '	'
   5960	06D0  00			     db	     0
   5961	06D1  46 52 45 45 20 20	20	     db	     'FREE   '
   5962	06D8  00			     db	     0
   5963	06D9  52 45 41 44 59 20	20	     db	     'READY  '
   5964	06E0  00			     db	     0
   5965	06E1  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5966	06E8  00			     db	     0
   5967	06E9  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5968	06F0  00			     db	     0
   5969	06F1  57 41 49 54 20 20	20	     db	     'WAIT   '
   5970	06F8  00			     db	     0
   5971	06F9  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5972	0700  00			     db	     0
   5973	0701  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5974	0708  00			     db	     0
   5975	0709  20 20			     db	     '	'
   5976	070B  00			     db	     0
   5977	070C  20 20			     db	     '	'
   5978	070E  00			     db	     0
   5979	070F  20			     db	     ' '
   5980	0710  00			     db	     0
   5981	0711  20 20			     db	     '	'
   5982	0713  00			     db	     0
   5983	0714  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   5984	      20 6B 69 6C 6C 3A	20+
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 106
command.ASM



   5985	      70 61 72 61 6D 65	74+
   5986	      72 6F 20 6E 61 6F	20+
   5987	      66 6F 72 6E 65 63	69+
   5988	      64 6F 21
   5989	073A  0A			     db	     10
   5990	073B  00			     db	     0
   5991	073C  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5992	      6D 70 6F 73 73 69	76+
   5993	      65 6C 20 6D 61 74	61+
   5994	      72 20 6F 20 70 72	6F+
   5995	      63 65 73 73 6F 2F	74+
   5996	      68 72 65 61 64
   5997	0764  0A			     db	     10
   5998	0765  00			     db	     0
   5999	0766  00			     db	     0
   6000	0767  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   6001	      20 73 65 74 3A 20	6E+
   6002	      61 6F 20 68 61 20	65+
   6003	      73 70 61 63 6F 20	70+
   6004	      61 72 61 20 6E 6F	76+
   6005	      61 73 20 76 61 72	69+
   6006	      61 76 65 69 73 21
   6007	0797  0A			     db	     10
   6008	0798  00			     db	     0
   6009	0799  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   6010	      20 73 65 74 3A 20	6F+
   6011	      20 74 61 6D 61 6E	68+
   6012	      6F 20 64 6F 20 6E	6F+
   6013	      6D 65 20 64 61 20	76+
   6014	      61 72 69 61 76 65	6C+
   6015	      20 65 20 6D 75 69	74+
   6016	      6F 20 67 72 61 6E	64+
   6017	      65 21
   6018	07D3  0A			     db	     10
   6019	07D4  00			     db	     0
   6020	07D5  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   6021	      20 73 65 74 3A 20	6F+
   6022	      20 74 61 6D 61 6E	68+
   6023	      6F 20 64 6F 20 63	6F+
   6024	      6E 74 65 75 64 6F	20+
   6025	      64 61 20 76 61 72	69+
   6026	      61 76 65 6C 20 65	20+
   6027	      6D 75 69 74 6F 20	67+
   6028	      72 61 6E 64 65
   6029	0812  21			     db	     '!'
   6030	0813  0A			     db	     10
   6031	0814  00			     db	     0
   6032	0815  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   6033	      20 73 65 74 3A 20	61+
   6034	      72 67 75 6D 65 6E	74+
   6035	      6F 73 20 64 65 6D	61+
   6036	      69 73 20 6E 61 20	6C+
   6037	      69 6E 68 61 20 64	65+
   6038	      20 63 6F 6D 61 6E	64+
   6039	      6F 21
   6040	0848  0A			     db	     10
   6041	0849  00			     db	     0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 107
command.ASM



   6042	084A  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   6043	      20 75 6E 73 65 74	3A+
   6044	      20 6E 75 6D 65 72	6F+
   6045	      20 69 6E 76 61 6C	69+
   6046	      64 6F 20 64 65 20	61+
   6047	      72 67 75 6D 65 6E	74+
   6048	      6F 73 21
   6049	0877  0A			     db	     10
   6050	0878  00			     db	     0
   6051	0879  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   6052	      20 75 6E 73 65 74	3A+
   6053	      20 76 61 72 69 61	76+
   6054	      65 6C 20 69 6E 65	78+
   6055	      69 73 74 65 6E 74	65+
   6056	      21
   6057	089D  0A			     db	     10
   6058	089E  00			     db	     0
   6059	089F  2D 6E			     db	     '-n'
   6060	08A1  00			     db	     0
   6061	08A2  DA			     db	     -38
   6062	08A3  C4			     db	     -60
   6063	08A4  C4			     db	     -60
   6064	08A5  20 54 68 72 65 61	64+	     db	     ' Thread '
   6065	      20
   6066	08AD  C4			     db	     -60
   6067	08AE  C4			     db	     -60
   6068	08AF  C4			     db	     -60
   6069	08B0  C4			     db	     -60
   6070	08B1  BF			     db	     -65
   6071	08B2  00			     db	     0
   6072	08B3  B3			     db	     -77
   6073	08B4  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6074	      20 20 20 20 20 20	20
   6075	08C2  B3			     db	     -77
   6076	08C3  00			     db	     0
   6077	08C4  B3			     db	     -77
   6078	08C5  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6079	      61 6F 3A 20 20 20	20
   6080	08D3  B3			     db	     -77
   6081	08D4  00			     db	     0
   6082	08D5  B3			     db	     -77
   6083	08D6  20 20 20 20 20 20	20+	     db	     '		    '
   6084	      20 20 20 20 20 20	20
   6085	08E4  B3			     db	     -77
   6086	08E5  00			     db	     0
   6087	08E6  C0			     db	     -64
   6088	08E7  C4			     db	     -60
   6089	08E8  C4			     db	     -60
   6090	08E9  C4			     db	     -60
   6091	08EA  C4			     db	     -60
   6092	08EB  C4			     db	     -60
   6093	08EC  C4			     db	     -60
   6094	08ED  C4			     db	     -60
   6095	08EE  C4			     db	     -60
   6096	08EF  C4			     db	     -60
   6097	08F0  C4			     db	     -60
   6098	08F1  C4			     db	     -60
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 108
command.ASM



   6099	08F2  C4			     db	     -60
   6100	08F3  C4			     db	     -60
   6101	08F4  C4			     db	     -60
   6102	08F5  D9			     db	     -39
   6103	08F6  00			     db	     0
   6104	08F7  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   6105	      20 64 65 6D 6F 3A	20+
   6106	      6E 75 6D 65 72 6F	20+
   6107	      69 6E 76 61 6C 69	64+
   6108	      6F 20 64 65 20 61	72+
   6109	      67 75 6D 65 6E 74	6F+
   6110	      73 21
   6111	0923  0A			     db	     10
   6112	0924  00			     db	     0
   6113	0925  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6114	      20 64 65 6D 6F 3A	20+
   6115	      66 6F 72 6B 28 29	20+
   6116	      6E 61 6F 20 63 6F	6E+
   6117	      73 65 67 75 69 75	20+
   6118	      63 72 69 61 72 20	74+
   6119	      68 72 65 61 64 21
   6120	0955  0A			     db	     10
   6121	0956  00			     db	     0
   6122	0957  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   6123	      20 77 61 69 74 70	69+
   6124	      64 3A 20 6E 75 6D	65+
   6125	      72 6F 20 69 6E 76	61+
   6126	      6C 69 64 6F 20 64	65+
   6127	      20 61 72 67 75 6D	65+
   6128	      6E 74 6F 73 21
   6129	0986  0A			     db	     10
   6130	0987  00			     db	     0
   6131	0988  50 72 6F 63 65 73	73+	     db	     'Processo '
   6132	      6F 20
   6133	0991  00			     db	     0
   6134	0992  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6135	      61 64 6F 20 63 6F	6D+
   6136	      20 63 6F 64 69 67	6F+
   6137	      20 64 65 20 66 69	6D+
   6138	      20
   6139	09AF  00			     db	     0
   6140	09B0  21			     db	     '!'
   6141	09B1  0A			     db	     10
   6142	09B2  00			     db	     0
   6143	09B3  50 72 6F 63 65 73	73+	     db	     'Processo '
   6144	      6F 20
   6145	09BC  00			     db	     0
   6146	09BD  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6147	      61 64 6F 20 63 6F	6D+
   6148	      20 63 6F 64 69 67	6F+
   6149	      20 64 65 20 66 69	6D+
   6150	      20
   6151	09DA  00			     db	     0
   6152	09DB  21			     db	     '!'
   6153	09DC  0A			     db	     10
   6154	09DD  00			     db	     0
   6155	09DE  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 109
command.ASM



   6156	      72 65 73 3A
   6157	09E9  0A			     db	     10
   6158	09EA  00			     db	     0
   6159	09EB  2D 20 69 64 3D		     db	     '-	id='
   6160	09F0  00			     db	     0
   6161	09F1  20 76 61 6C 75 65	3D	     db	     ' value='
   6162	09F8  00			     db	     0
   6163	09F9  20 71 75 65 75 65	3D	     db	     ' queue='
   6164	0A00  00			     db	     0
   6165	0A01  54 4F 54 41 4C 3D		     db	     'TOTAL='
   6166	0A07  00			     db	     0
   6167	0A08  0A			     db	     10
   6168	0A09  0A			     db	     10
   6169	0A0A  00			     db	     0
   6170	0A0B  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   6171	      20 73 65 6D 63 72	65+
   6172	      61 74 65 3A 20 6E	75+
   6173	      6D 65 72 6F 20 69	6E+
   6174	      76 61 6C 69 64 6F	20+
   6175	      64 65 20 61 72 67	75+
   6176	      6D 65 6E 74 6F 73	21
   6177	0A3C  0A			     db	     10
   6178	0A3D  00			     db	     0
   6179	0A3E  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   6180	      6F 20 69 64 3D
   6181	0A4A  00			     db	     0
   6182	0A4B  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   6183	      20 28 76 61 6C 75	65+
   6184	      3D
   6185	0A5A  00			     db	     0
   6186	0A5B  29			     db	     ')'
   6187	0A5C  0A			     db	     10
   6188	0A5D  00			     db	     0
   6189	0A5E  DA			     db	     -38
   6190	0A5F  C4			     db	     -60
   6191	0A60  C4			     db	     -60
   6192	0A61  20 54 68 72 65 61	64+	     db	     ' Thread '
   6193	      20
   6194	0A69  C4			     db	     -60
   6195	0A6A  C4			     db	     -60
   6196	0A6B  C4			     db	     -60
   6197	0A6C  C4			     db	     -60
   6198	0A6D  BF			     db	     -65
   6199	0A6E  00			     db	     0
   6200	0A6F  B3			     db	     -77
   6201	0A70  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6202	      20 20 20 20 20 20	20
   6203	0A7E  B3			     db	     -77
   6204	0A7F  00			     db	     0
   6205	0A80  B3			     db	     -77
   6206	0A81  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6207	      61 6F 3A 20 20 20	20
   6208	0A8F  B3			     db	     -77
   6209	0A90  00			     db	     0
   6210	0A91  B3			     db	     -77
   6211	0A92  20 20 20 20 20 20	20+	     db	     '		    '
   6212	      20 20 20 20 20 20	20
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 110
command.ASM



   6213	0AA0  B3			     db	     -77
   6214	0AA1  00			     db	     0
   6215	0AA2  C0			     db	     -64
   6216	0AA3  C4			     db	     -60
   6217	0AA4  C4			     db	     -60
   6218	0AA5  C4			     db	     -60
   6219	0AA6  C4			     db	     -60
   6220	0AA7  C4			     db	     -60
   6221	0AA8  C4			     db	     -60
   6222	0AA9  C4			     db	     -60
   6223	0AAA  C4			     db	     -60
   6224	0AAB  C4			     db	     -60
   6225	0AAC  C4			     db	     -60
   6226	0AAD  C4			     db	     -60
   6227	0AAE  C4			     db	     -60
   6228	0AAF  C4			     db	     -60
   6229	0AB0  C4			     db	     -60
   6230	0AB1  D9			     db	     -39
   6231	0AB2  00			     db	     0
   6232	0AB3  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6233	      20 73 65 6D 74 65	73+
   6234	      74 3A 20 6E 75 6D	65+
   6235	      72 6F 20 69 6E 76	61+
   6236	      6C 69 64 6F 20 64	65+
   6237	      20 61 72 67 75 6D	65+
   6238	      6E 74 6F 73 21
   6239	0AE2  0A			     db	     10
   6240	0AE3  00			     db	     0
   6241	0AE4  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6242	      20 64 65 6D 6F 3A	20+
   6243	      66 6F 72 6B 28 29	20+
   6244	      6E 61 6F 20 63 6F	6E+
   6245	      73 65 67 75 69 75	20+
   6246	      63 72 69 61 72 20	74+
   6247	      68 72 65 61 64 21
   6248	0B14  0A			     db	     10
   6249	0B15  00			     db	     0
   6250	0B16  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6251	      20 73 65 6D 74 65	73+
   6252	      74 3A 20 6E 75 6D	65+
   6253	      72 6F 20 69 6E 76	61+
   6254	      6C 69 64 6F 20 64	65+
   6255	      20 61 72 67 75 6D	65+
   6256	      6E 74 6F 73 21
   6257	0B45  0A			     db	     10
   6258	0B46  00			     db	     0
   6259	0B47  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6260	      20 73 65 6D 74 65	73+
   6261	      74 3A 20 6E 75 6D	65+
   6262	      72 6F 20 69 6E 76	61+
   6263	      6C 69 64 6F 20 64	65+
   6264	      20 61 72 67 75 6D	65+
   6265	      6E 74 6F 73 21
   6266	0B76  0A			     db	     10
   6267	0B77  00			     db	     0
   6268	0B78  DA			     db	     -38
   6269	0B79  C4			     db	     -60
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 111
command.ASM



   6270	0B7A  C4			     db	     -60
   6271	0B7B  20 54 68 72 65 61	64+	     db	     ' Thread '
   6272	      20
   6273	0B83  C4			     db	     -60
   6274	0B84  C4			     db	     -60
   6275	0B85  C4			     db	     -60
   6276	0B86  C4			     db	     -60
   6277	0B87  BF			     db	     -65
   6278	0B88  00			     db	     0
   6279	0B89  B3			     db	     -77
   6280	0B8A  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6281	      20 20 20 20 20 20	20
   6282	0B98  B3			     db	     -77
   6283	0B99  00			     db	     0
   6284	0B9A  B3			     db	     -77
   6285	0B9B  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6286	      61 6F 3A 20 20 20	20
   6287	0BA9  B3			     db	     -77
   6288	0BAA  00			     db	     0
   6289	0BAB  B3			     db	     -77
   6290	0BAC  20 20 20 20 20 20	20+	     db	     '		    '
   6291	      20 20 20 20 20 20	20
   6292	0BBA  B3			     db	     -77
   6293	0BBB  00			     db	     0
   6294	0BBC  C0			     db	     -64
   6295	0BBD  C4			     db	     -60
   6296	0BBE  C4			     db	     -60
   6297	0BBF  C4			     db	     -60
   6298	0BC0  C4			     db	     -60
   6299	0BC1  C4			     db	     -60
   6300	0BC2  C4			     db	     -60
   6301	0BC3  C4			     db	     -60
   6302	0BC4  C4			     db	     -60
   6303	0BC5  C4			     db	     -60
   6304	0BC6  C4			     db	     -60
   6305	0BC7  C4			     db	     -60
   6306	0BC8  C4			     db	     -60
   6307	0BC9  C4			     db	     -60
   6308	0BCA  C4			     db	     -60
   6309	0BCB  D9			     db	     -39
   6310	0BCC  00			     db	     0
   6311	0BCD  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: nao e necessario argumentos!'
   6312	      20 73 65 6D 63 72	65+
   6313	      61 74 65 3A 20 6E	61+
   6314	      6F 20 65 20 6E 65	63+
   6315	      65 73 73 61 72 69	6F+
   6316	      20 61 72 67 75 6D	65+
   6317	      6E 74 6F 73 21
   6318	0BFC  0A			     db	     10
   6319	0BFD  00			     db	     0
   6320	0BFE  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   6321	      6F 20 69 64 3D
   6322	0C0A  00			     db	     0
   6323	0C0B  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   6324	      20 28 76 61 6C 75	65+
   6325	      3D
   6326	0C1A  00			     db	     0
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 112
command.ASM



   6327	0C1B  29			     db	     ')'
   6328	0C1C  0A			     db	     10
   6329	0C1D  00			     db	     0
   6330	0C1E  45 72 72 6F 20 65	6D+	     db	     'Erro em create: fork() nao conseguiu criar thread!'
   6331	      20 63 72 65 61 74	65+
   6332	      3A 20 66 6F 72 6B	28+
   6333	      29 20 6E 61 6F 20	63+
   6334	      6F 6E 73 65 67 75	69+
   6335	      75 20 63 72 69 61	72+
   6336	      20 74 68 72 65 61	64+
   6337	      21
   6338	0C50  0A			     db	     10
   6339	0C51  00			     db	     0
   6340	0C52  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6341	      20 73 65 6D 74 65	73+
   6342	      74 3A 20 6E 75 6D	65+
   6343	      72 6F 20 69 6E 76	61+
   6344	      6C 69 64 6F 20 64	65+
   6345	      20 61 72 67 75 6D	65+
   6346	      6E 74 6F 73 21
   6347	0C81  0A			     db	     10
   6348	0C82  00			     db	     0
   6349	0C83			     _DATA   ends
   6350	1782			     _TEXT   segment byte public 'CODE'
   6351	1782			     _TEXT   ends
   6352					     public  _create
   6353				     _broadcast_sem_id	     equ     broadcast_sem_id
   6354					     public  _sem_aplic
   6355					     public  _semid
   6356					     extrn   _miniSO_sem:word
   6357				     _exitcode	     equ     exitcode
   6358				     _demo_linha     equ     demo_linha
   6359				     _demo   equ     demo
   6360					     extrn   _miniSO_thread:word
   6361				     _commands	     equ     commands
   6362				     _var    equ     var
   6363				     _num_var	     equ     num_var
   6364				     _history_pos    equ     history_pos
   6365				     _history_nxt    equ     history_nxt
   6366				     _history_ini    equ     history_ini
   6367				     _history_len    equ     history_len
   6368				     _history	     equ     history
   6369				     _argv   equ     argv
   6370				     _argline	     equ     argline
   6371				     _palavra	     equ     palavra
   6372				     _cmdline	     equ     cmdline
   6373				     _end_command    equ     end_command
   6374					     extrn   _sembroadcast:near
   6375					     extrn   _semdestroy:near
   6376					     extrn   _semdown:near
   6377					     extrn   _semup:near
   6378					     extrn   _semcreate:near
   6379					     extrn   _getpid:near
   6380					     extrn   _exit:near
   6381					     extrn   _waitpid:near
   6382					     extrn   _wait:near
   6383					     extrn   _kill:near
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 113
command.ASM



   6384					     extrn   _fork:near
   6385					     extrn   _reboot:near
   6386					     extrn   _inttostr:near
   6387					     extrn   _unsignedtostr:near
   6388					     extrn   _atoi:near
   6389					     extrn   _strlen:near
   6390					     extrn   _strcmp:near
   6391					     extrn   _strcpy:near
   6392					     extrn   _gettime:near
   6393					     extrn   _getdate:near
   6394					     extrn   _gotoxy:near
   6395					     extrn   _wherey:near
   6396					     extrn   _wherex:near
   6397					     extrn   _setcolor:near
   6398					     extrn   _getcolor:near
   6399					     extrn   _putstrxy:near
   6400					     extrn   _putstr:near
   6401					     extrn   _clrscr:near
   6402					     extrn   _getch:near
   6403					     extrn   _putch:near
   6404					     public  _cmd_start
   6405					     public  _cmd_create
   6406					     public  _cmd_semdestroy
   6407					     public  _cmd_semup
   6408					     public  _cmd_semtest
   6409					     public  _cmd_semcreate
   6410					     public  _cmd_semls
   6411					     public  _cmd_waitpid
   6412					     public  _cmd_wait
   6413					     public  _cmd_echo
   6414					     public  _cmd_unset
   6415					     public  _cmd_set
   6416					     public  _cmd_demo
   6417					     public  _cmd_kill
   6418					     public  _cmd_ps
   6419					     public  _cmd_ver
   6420					     public  _cmd_cls
   6421					     public  _cmd_time
   6422					     public  _cmd_date
   6423					     public  _cmd_help
   6424					     public  _cmd_reboot
   6425					     public  _cmd_exit
   6426				     _command_var_set	     equ     command_var_set
   6427				     _command_var_value	     equ     command_var_value
   6428				     _command_var_unset	     equ     command_var_unset
   6429				     _command_var_search     equ     command_var_search
   6430				     _command_var_list	     equ     command_var_list
   6431				     _command_var_nextfree   equ     command_var_nextfree
   6432				     _command_var_init	     equ     command_var_init
   6433				     _command_showprompt     equ     command_showprompt
   6434				     _command_backspace	     equ     command_backspace
   6435					     public  _command
   6436				     _s@     equ     s@
   6437					     end
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 114
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "11/19/18"
??FILENAME		Text   "command	"
??TIME			Text   "21:30:07"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1819	 #1826
@10@170			Near   _TEXT:076A		   1836	 #1842
@10@254			Near   _TEXT:078B		   1866	 #1872
@10@282			Near   _TEXT:07A3		   1856	 #1886
@10@310			Near   _TEXT:07BF		   1825	 #1906
@10@86			Near   _TEXT:0753		   #1824  1841	1871  1905
@11@58			Near   _TEXT:07D4		   1940	 #1941
@12@58			Near   _TEXT:07EB		   1974	 #1975
@13@114			Near   _TEXT:0838		   2016	 #2050
@13@170			Near   _TEXT:0841		   2058	 #2059
@13@58			Near   _TEXT:0809		   #2017  2052
@14@58			Near   _TEXT:08DA		   2197	 #2198
@15@58			Near   _TEXT:097A		   2338	 #2339
@16@58			Near   _TEXT:0992		   2375	 #2376
@17@58			Near   _TEXT:09C1		   2432	 #2433
@18@1038		Near   _TEXT:0C44		   2495	 #2964
@18@1066		Near   _TEXT:0C45		   2484	 #2966
@18@1122		Near   _TEXT:0C51		   2977	 #2978
@18@114			Near   _TEXT:0A12		   #2517  2530
@18@142			Near   _TEXT:0A1A		   2516	 #2526
@18@198			Near   _TEXT:0A5C		   #2573  2586
@18@226			Near   _TEXT:0A64		   2572	 #2582
@18@282			Near   _TEXT:0AA6		   #2629  2642
@18@310			Near   _TEXT:0AAE		   2628	 #2638
@18@450			Near   _TEXT:0AE4		   #2674  2988
@18@478			Near   _TEXT:0AE8		   #2680  2692	2699  2706  2713  2720	2727
@18@506			Near   _TEXT:0AF0		   #2686  2989
@18@534			Near   _TEXT:0AF6		   #2693  2990
@18@562			Near   _TEXT:0AFC		   #2700  2991
@18@58			Near   _TEXT:09E5		   #2485  2969
@18@590			Near   _TEXT:0B02		   #2707  2992
@18@618			Near   _TEXT:0B08		   #2714  2993
@18@646			Near   _TEXT:0B0E		   #2721  2994
@18@674			Near   _TEXT:0B14		   2671	 2685  #2728
@18@702			Near   _TEXT:0B44		   #2763  2776
@18@730			Near   _TEXT:0B4C		   2762	 #2772
@18@786			Near   _TEXT:0B8E		   #2820  2833
@18@814			Near   _TEXT:0B96		   2819	 #2829
@18@870			Near   _TEXT:0BD8		   #2877  2890
@18@898			Near   _TEXT:0BE0		   2876	 #2886
@18@954			Near   _TEXT:0C22		   #2934  2947
@18@982			Near   _TEXT:0C2A		   2933	 #2943
@18@C1234		Word   _TEXT:0C55		   2673	 #2987
@19@114			Near   _TEXT:0C7F		   #3034  3073
@19@142			Near   _TEXT:0C81		   3019	 #3036
@19@198			Near   _TEXT:0CA3		   3059	 #3066
@19@226			Near   _TEXT:0CA7		   3035	 #3074
@19@86			Near   _TEXT:0C76		   #3025  3065
@1@1094			Near   _TEXT:01D6		   507	#522
@1@1150			Near   _TEXT:01E6		   521	528  #537
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 115
Symbol Table



@1@1178			Near   _TEXT:01E8		   502	#544
@1@1262			Near   _TEXT:0203		   561	#566
@1@1290			Near   _TEXT:020A		   550	#575
@1@1374			Near   _TEXT:0227		   592	#598
@1@142			Near   _TEXT:00FD		   #309	 314
@1@1430			Near   _TEXT:0234		   604	#610
@1@1458			Near   _TEXT:023A		   543	574  582  597  609  #616
@1@1514			Near   _TEXT:0242		   #627	 640
@1@1542			Near   _TEXT:0246		   626	#638
@1@1598			Near   _TEXT:0278		   492	625  #675
@1@1626			Near   _TEXT:027B		   #682	 1265
@1@1766			Near   _TEXT:02A6		   706	#712
@1@1794			Near   _TEXT:02AC		   711	#718
@1@1822			Near   _TEXT:02AE		   699	#723
@1@1878			Near   _TEXT:02BF		   733	#738
@1@1934			Near   _TEXT:02CE		   722	744  #749
@1@1962			Near   _TEXT:02D0		   #751	 765
@1@1990			Near   _TEXT:02D4		   750	#763
@1@2074			Near   _TEXT:030D		   689	693  771  #805
@1@2102			Near   _TEXT:030F		   388	463  484  681  811  #812
@1@2130			Near   _TEXT:0312		   #818	 1280
@1@2158			Near   _TEXT:0337		   #849	 1014
@1@2186			Near   _TEXT:0339		   #851	 864  867
@1@2214			Near   _TEXT:033C		   850	#858
@1@226			Near   _TEXT:010D		   312	#316
@1@2298			Near   _TEXT:0357		   861	#868
@1@2354			Near   _TEXT:0363		   874	#879
@1@2382			Near   _TEXT:0367		   #885	 907
@1@2410			Near   _TEXT:0375		   884	#898
@1@2494			Near   _TEXT:0390		   901	904  #908
@1@254			Near   _TEXT:0111		   #318	 1279
@1@2578			Near   _TEXT:03D3		   935	#960
@1@2606			Near   _TEXT:03D5		   918	959  #966
@1@2662			Near   _TEXT:0411		   1003	 #1008
@1@2690			Near   _TEXT:0414		   965	#1013
@1@2718			Near   _TEXT:0417		   878	1007  #1015
@1@2774			Near   _TEXT:0423		   1022	 #1031
@1@282			Near   _TEXT:0114		   #324	 1278
@1@2830			Near   _TEXT:0448		   1052	 #1058
@1@2886			Near   _TEXT:0457		   1064	 #1070
@1@2914			Near   _TEXT:045B		   1057	 1069  #1076
@1@2970			Near   _TEXT:046A		   1082	 #1088
@1@2998			Near   _TEXT:046E		   1087	 #1094
@1@3026			Near   _TEXT:0477		   #1105  1133
@1@3082			Near   _TEXT:049E		   1120	 #1129
@1@3110			Near   _TEXT:049F		   1104	 #1131
@1@3138			Near   _TEXT:04A4		   1128	 #1134
@1@3194			Near   _TEXT:04E3		   1143	 #1182
@1@3222			Near   _TEXT:04ED		   1181	 #1193
@1@3278			Near   _TEXT:04F7		   1199	 #1204
@1@3306			Near   _TEXT:04FB		   315	#1214
@1@3362			Near   _TEXT:0511		   292	323  344  366  817  1030  1213	1220  #1235
@1@338			Near   _TEXT:011C		   330	#339
@1@366			Near   _TEXT:011F		   #345	 1281
@1@394			Near   _TEXT:0121		   #347	 361
@1@422			Near   _TEXT:0125		   346	#359
@1@478			Near   _TEXT:012C		   #367	 1277
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 116
Symbol Table



@1@562			Near   _TEXT:013F		   #382	 387
@1@58			Near   _TEXT:00EA		   #293	 1238
@1@646			Near   _TEXT:014F		   385	#389
@1@674			Near   _TEXT:0153		   #391	 1262
@1@702			Near   _TEXT:015B		   #398	 411
@1@730			Near   _TEXT:015F		   397	#409
@1@786			Near   _TEXT:016F		   #426	 454
@1@842			Near   _TEXT:0194		   425	#452
@1@898			Near   _TEXT:01A0		   #464	 1264
@1@954			Near   _TEXT:01A8		   470	#479
@1@982			Near   _TEXT:01AB		   #485	 1263
@1@C3234		Word   _TEXT:0531		   308	#1266
@1@C3330		Word   _TEXT:0521		   381	#1253
@20@114			Near   _TEXT:0CC3		   #3112  3210
@20@142			Near   _TEXT:0CC5		   3102	 #3114
@20@198			Near   _TEXT:0CE0		   3120	 #3133
@20@254			Near   _TEXT:0CFC		   3138	 #3150
@20@282			Near   _TEXT:0D01		   3132	 3149  #3156
@20@366			Near   _TEXT:0D13		   #3166  3229
@20@394			Near   _TEXT:0D19		   #3174  3228
@20@422			Near   _TEXT:0D1F		   #3183  3227
@20@450			Near   _TEXT:0D25		   #3193  3226
@20@478			Near   _TEXT:0D29		   3173	 3182  3192  #3201
@20@506			Near   _TEXT:0D34		   3163	 #3211
@20@534			Near   _TEXT:0D36		   3113	 #3213
@20@86			Near   _TEXT:0CC1		   #3110  3212
@20@C482		Word   _TEXT:0D3C		   3165	 #3225
@21@114			Near   _TEXT:0D5D		   #3260  3292
@21@142			Near   _TEXT:0D5F		   3245	 #3262
@21@198			Near   _TEXT:0D7C		   3278	 #3285
@21@226			Near   _TEXT:0D80		   3261	 #3293
@21@86			Near   _TEXT:0D54		   #3251  3284
@22@114			Near   _TEXT:0DB6		   3334	 #3340
@22@142			Near   _TEXT:0DC1		   3339	 #3350
@22@170			Near   _TEXT:0DC6		   #3356  3387
@22@226			Near   _TEXT:0DD1		   3361	 #3364
@22@254			Near   _TEXT:0DD9		   3363	 #3372
@22@310			Near   _TEXT:0DEA		   3355	 #3385
@22@338			Near   _TEXT:0DEF		   3322	 #3388
@22@394			Near   _TEXT:0DFD		   3395	 #3403
@22@422			Near   _TEXT:0E01		   3408	 #3409
@23@114			Near   _TEXT:0ECA		   3546	 #3575
@23@170			Near   _TEXT:0ED4		   #3584  3614
@23@226			Near   _TEXT:0EFD		   3583	 #3612
@23@282			Near   _TEXT:0F07		   #3621  3651
@23@338			Near   _TEXT:0F30		   3620	 #3649
@23@394			Near   _TEXT:0F3A		   #3658  3688
@23@450			Near   _TEXT:0F63		   3657	 #3686
@23@506			Near   _TEXT:0F6D		   #3695  3725
@23@562			Near   _TEXT:0F96		   3694	 #3723
@23@58			Near   _TEXT:0EA1		   #3547  3577
@23@618			Near   _TEXT:0FA0		   #3732  3762
@23@674			Near   _TEXT:0FC9		   3731	 #3760
@24@114			Near   _TEXT:0FF2		   #3808  3858
@24@142			Near   _TEXT:0FF4		   3793	 #3810
@24@198			Near   _TEXT:1006		   3820	 #3825
@24@254			Near   _TEXT:102A		   3844	 #3851
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 117
Symbol Table



@24@282			Near   _TEXT:102E		   3809	 #3859
@24@86			Near   _TEXT:0FE9		   #3799  3850
@25@114			Near   _TEXT:104C		   3884	 #3900
@25@142			Near   _TEXT:10BA		   3899	 #3990
@25@86			Near   _TEXT:104A		   #3898  3989
@26@58			Near   _TEXT:1131		   4102	 #4103
@27@114			Near   _TEXT:11F0		   4164	 #4267
@27@142			Near   _TEXT:11F1		   4154	 #4269
@27@198			Near   _TEXT:1227		   4315	 #4316
@27@58			Near   _TEXT:115C		   #4155  4272
@28@114			Near   _TEXT:1248		   #4360  4456
@28@142			Near   _TEXT:124A		   4345	 #4362
@28@198			Near   _TEXT:1268		   4385	 #4387
@28@226			Near   _TEXT:12B6		   4361	 #4457
@28@86			Near   _TEXT:1245		   #4358  4386
@29@114			Near   _TEXT:1379		   4578	 #4607
@29@170			Near   _TEXT:1389		   #4618  4649
@29@226			Near   _TEXT:13B2		   4617	 #4647
@29@58			Near   _TEXT:1350		   #4579  4609
@30@114			Near   _TEXT:13DB		   #4697  4747
@30@142			Near   _TEXT:13DD		   4682	 #4699
@30@198			Near   _TEXT:1400		   4719	 #4724
@30@254			Near   _TEXT:1413		   4733	 #4740
@30@282			Near   _TEXT:1417		   4698	 #4748
@30@86			Near   _TEXT:13D2		   #4688  4739
@31@114			Near   _TEXT:1434		   4770	 #4786
@31@142			Near   _TEXT:144E		   4785	 #4805
@31@86			Near   _TEXT:1432		   #4784  4804
@32@114			Near   _TEXT:146D		   4828	 #4844
@32@142			Near   _TEXT:1487		   4843	 #4863
@32@86			Near   _TEXT:146B		   #4842  4862
@33@114			Near   _TEXT:1565		   5003	 #5032
@33@170			Near   _TEXT:156F		   #5041  5071
@33@226			Near   _TEXT:1598		   5040	 #5069
@33@282			Near   _TEXT:15A2		   #5078  5108
@33@338			Near   _TEXT:15CB		   5077	 #5106
@33@394			Near   _TEXT:15D5		   #5115  5145
@33@450			Near   _TEXT:15FE		   5114	 #5143
@33@506			Near   _TEXT:1608		   #5152  5182
@33@562			Near   _TEXT:1631		   5151	 #5180
@33@58			Near   _TEXT:153C		   #5004  5034
@33@618			Near   _TEXT:163B		   #5189  5219
@33@674			Near   _TEXT:1664		   5188	 #5217
@34@114			Near   _TEXT:168F		   #5273  5296
@34@142			Near   _TEXT:1692		   #5275  5426
@34@170			Near   _TEXT:1695		   5259	 #5277
@34@226			Near   _TEXT:16AA		   5295	 #5297
@34@282			Near   _TEXT:170C		   5375	 #5380
@34@310			Near   _TEXT:1722		   #5397  5417
@34@366			Near   _TEXT:1736		   5406	 #5413
@34@394			Near   _TEXT:1737		   5396	 #5415
@34@450			Near   _TEXT:1741		   5276	 #5427
@34@86			Near   _TEXT:1689		   #5265  5412
@35@114			Near   _TEXT:1762		   5452	 #5468
@35@142			Near   _TEXT:177E		   5467	 #5492
@35@86			Near   _TEXT:1760		   #5466  5491
@3@86			Near   _TEXT:05AF		   1367	 #1396
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 118
Symbol Table



@4@114			Near   _TEXT:05DF		   1426	 #1445
@4@58			Near   _TEXT:05C2		   #1427  1447
@5@114			Near   _TEXT:05FB		   1473	 #1481
@5@142			Near   _TEXT:05FF		   #1487  1506
@5@198			Near   _TEXT:0613		   1496	 #1502
@5@226			Near   _TEXT:0614		   1486	 #1504
@5@282			Near   _TEXT:061B		   1480	 #1508
@5@58			Near   _TEXT:05F6		   #1474  1507
@5@86			Near   _TEXT:05F9		   #1479  1501
@6@114			Near   _TEXT:0681		   1548	 #1602
@6@142			Near   _TEXT:0682		   1538	 #1604
@6@58			Near   _TEXT:062E		   #1539  1606
@7@114			Near   _TEXT:069E		   1633	 #1641
@7@142			Near   _TEXT:06A2		   #1647  1672
@7@198			Near   _TEXT:06C2		   1662	 #1668
@7@226			Near   _TEXT:06C3		   1646	 #1670
@7@282			Near   _TEXT:06CA		   1640	 #1674
@7@58			Near   _TEXT:0699		   #1634  1673
@7@86			Near   _TEXT:069C		   #1639  1667
@8@114			Near   _TEXT:06E8		   1708	 #1715
@8@142			Near   _TEXT:070C		   1714	 #1741
@8@86			Near   _TEXT:06E6		   #1713  1740
@9@114			Near   _TEXT:072B		   1773	 #1781
@9@142			Near   _TEXT:0739		   1780	 #1791
@9@86			Near   _TEXT:0729		   #1779  1790
@@0			Near   _TEXT:01B5		   491	#493
@@1			Near   _TEXT:0285		   688	#690
@@2			Near   _TEXT:028F		   692	#694
@@3			Near   _TEXT:051B		   1237	 #1239
@@4			Near   _TEXT:09F8		   2494	 #2496
@@5			Near   _TEXT:0C4D		   2968	 #2970
@@6			Near   _TEXT:116C		   4163	 #4165
@@7			Near   _TEXT:11F9		   4271	 #4273
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #103  #2443  #2446  #3420  #3428	 #5501	#5531	  +
							   #6350
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #103  #2443  #2446  #3420  #3428	 #5501	#5531	  +
							   #6350
ARGLINE			Byte   _BSS:038A		   977	985  #5520
ARGV			Dword  _BSS:034A		   989	990  1115  1116	 1147  #5518
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2502  2510  2535  2558	2566  2591  2614  2622	2647  2748  2756  +
							   2781	 2805  2813  2838  2862	 2870  2895  2919  2927	 2952
BROADCAST_SEM_ID	Word   _BSS:0014		   4907	 5365  #5502
CMDLINE			Byte   _BSS:0608		   652	660  669  782  790  799	 834  840  1038	 1233  #5524
COMMANDS		Word   _DATA:0002		   #26	1114  1154  2026  2038
COMMAND_BACKSPACE	Near   _TEXT:0545		   338	358  408  478  637  762	 #1286
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   291	459  1026  1203	 #1343
COMMAND_VAR_INIT	Near   _TEXT:05BB		   264	#1416
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1520  3106
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1463  1860
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1621  1700	1765  1848
COMMAND_VAR_SET		Near   _TEXT:073C		   274	285  1176  #1803  3129	3146
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1688  3270
COMMAND_VAR_VALUE	Near   _TEXT:070F		   925	1357  #1753
D@			Byte   _DATA:0000		   #15
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 119
Symbol Table



D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E07		   #3433  3839
DEMO_LINHA		Word   _DATA:0098		   #3421  3446	3815  3819  3824  4484	4714  4718  4723  5370	5374  5379
END_COMMAND		Word   _BSS:0627		   129	1198  1236  1969  #5526
EXITCODE		Word   _DATA:009A		   #3424  3451	3835  4901  5390
HISTORY			Byte   _BSS:0214		   439	649  779  1044	#5516
HISTORY_INI		Word   _BSS:0210		   133	431  581  591  1063  1068  1075	 #5512
HISTORY_LEN		Word   _BSS:0212		   453	490  501  687  698  703	 1051  1056  #5514
HISTORY_NXT		Word   _BSS:020E		   137	511  554  743  1041  1081  1086	 1093  #5510
HISTORY_POS		Word   _BSS:020C		   141	396  506  513  527  532	 549  556  560	565  580  590  596  603	  +
							   608	615  646  691  705  710	 717  728  732	737  742  748  770  776	  +
							   823	#5508
NUM_VAR			Word   _DATA:0000		   #23	1452  1472  1735
PALAVRA			Byte   _BSS:05E9		   892	913  917  923  942  950	 973  #5522
S@			Byte   _DATA:009C		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  165	 175  185 +
							   199	209  215  221  235  245	 255  269  272	280  283  1174	1188  1355+
							   2007	 2407  2416  2475  2544	 2600  2656  2679  2691	 2698  2705  2712 +
							   2719	 2726  2734  2791  2848	 2905  3024  3064  3125	 3172  3181  3191 +
							   3200	 3250  3283  3327  3458	 3469  3482  3495  3508	 3798  3849  3889 +
							   3926	 3953  3980  4039  4066	 4093  4145  4170  4200	 4230  4279  4306 +
							   4350	 4393  4420  4447  4491	 4502  4515  4528  4541	 4687  4738  4775 +
							   4833	 4915  4926  4939  4952	 4965  5264  5303  5330	 5357  5411  5457 +
							   #5532
VAR			Word   _BSS:0018		   1435	 1443  1495  1547  1556	 1582  1655  1723  1731	 1788  1882  1897 +
							   #5506
_ARGLINE		Alias  ARGLINE			   #6370
_ARGV			Alias  ARGV			   #6369
_ATOI			Near   ----:---- Extern		   3044	 3832  3908  4370  4707	 4794  4852  5387  5476	 #6388
_BROADCAST_SEM_ID	Alias  BROADCAST_SEM_ID		   #6353
_CLRSCR			Near   ----:---- Extern		   153	2370  #6401
_CMDLINE		Alias  CMDLINE			   #6372
_CMD_CLS		Near   _TEXT:0980		   44  47  #2353  6420
_CMD_CREATE		Near   _TEXT:1677		   98  #5240  6405
_CMD_DATE		Near   _TEXT:0845		   38  #2072  6422
_CMD_DEMO		Near   _TEXT:0FDC		   65  #3783  6416
_CMD_ECHO		Near   _TEXT:0D84		   74  #3305  6413
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1954  6425
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1986  6423
_CMD_KILL		Near   _TEXT:0C63		   62  #2999  6417
_CMD_PS			Near   _TEXT:09C5		   59  #2451  6418
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1918  6424
_CMD_SEMCREATE		Near   _TEXT:122D		   86  #4330  6409
_CMD_SEMDESTROY		Near   _TEXT:1452		   95  #4817  6406
_CMD_SEMLS		Near   _TEXT:1137		   83  #4117  6410
_CMD_SEMTEST		Near   _TEXT:13C5		   89  #4671  6408
_CMD_SEMUP		Near   _TEXT:1419		   92  #4759  6407
_CMD_SET		Near   _TEXT:0CAB		   68  #3087  6415
_CMD_START		Near   _TEXT:1747		   101	#5441  6404
_CMD_TIME		Near   _TEXT:08E0		   41  #2212  6421
_CMD_UNSET		Near   _TEXT:0D44		   71  #3234  6414
_CMD_VER		Near   _TEXT:0996		   35  #2389  6419
_CMD_WAIT		Near   _TEXT:10BF		   80  #4003  6412
_CMD_WAITPID		Near   _TEXT:1030		   77  #3870  6411
_COMMAND		Near   _TEXT:0000		   #108	 6435
_COMMANDS		Alias  COMMANDS			   #6361
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 120
Symbol Table



_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #6434
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #6433
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #6432
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #6430
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #6431
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #6429
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #6426
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #6428
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #6427
_CREATE			Near   _TEXT:148B		   #4875  5401	6352
_DEMO			Alias  DEMO			   #6359
_DEMO_LINHA		Alias  DEMO_LINHA		   #6358
_END_COMMAND		Alias  END_COMMAND		   #6373
_EXIT			Near   ----:---- Extern		   3768	 4656  5225  #6380
_EXITCODE		Alias  EXITCODE			   #6357
_FORK			Near   ----:---- Extern		   3841	 4730  5403  #6384
_GETCH			Near   ----:---- Extern		   299	372  #6402
_GETCOLOR		Near   ----:---- Extern		   1371	 1532  #6398
_GETDATE		Near   ----:---- Extern		   2099	 #6393
_GETPID			Near   ----:---- Extern		   3521	 4554  4888  4978  #6379
_GETTIME		Near   ----:---- Extern		   2236	 #6392
_GOTOXY			Near   ----:---- Extern		   1313	 1328  #6394
_HISTORY		Alias  HISTORY			   #6368
_HISTORY_INI		Alias  HISTORY_INI		   #6366
_HISTORY_LEN		Alias  HISTORY_LEN		   #6367
_HISTORY_NXT		Alias  HISTORY_NXT		   #6365
_HISTORY_POS		Alias  HISTORY_POS		   #6364
_INTTOSTR		Near   ----:---- Extern		   1165	 2504  2560  2616  2750	 2807  2864  2921  3526	 3938  3965  4051 +
							   4078	 4185  4215  4245  4291	 4405  4432  4559  4983	 5315  5342  #6386
_KILL			Near   ----:---- Extern		   3052	 #6383
_MINISO_SEM		Word   ----:---- Extern		   4162	 4181  4211  4241  #6356
_MINISO_THREAD		Word   ----:---- Extern		   2493	 2556  2612  2668  2746	 2803  2860  2917  #6360
_NUM_VAR		Alias  NUM_VAR			   #6363
_PALAVRA		Alias  PALAVRA			   #6371
_PUTCH			Near   ----:---- Extern		   418	449  829  1227	1321  1403  1566  1600	2047  2131  2162  2191	  +
							   2268	 2301  2332  2426  2524	 2580  2636  2770  2827	 2884  2941  2962 +
							   3370	 3401  4261  #6403
_PUTSTR			Near   ----:---- Extern		   167	177  187  201  211  217	 223  237  247	257  441  662  792  1190  +
							   1385	 1558  1584  2009  2027	 2039  2123  2154  2183	 2260  2293  2324 +
							   2409	 2418  2477  2537  2546	 2593  2602  2649  2658	 2682  2736  2783 +
							   2793	 2840  2850  2897  2907	 2954  3027  3203  3253	 3347  3381  3801 +
							   3891	 3928  3946  3955  3973	 3982  4041  4059  4068	 4086  4095  4147 +
							   4172	 4193  4202  4223  4232	 4253  4281  4299  4308	 4352  4395  4413 +
							   4422	 4440  4449  4690  4777	 4835  5267  5305  5323	 5332  5350  5359 +
							   5459	 #6400
_PUTSTRXY		Near   ----:---- Extern		   3463	 3476  3489  3502  3515	 3539  3572  3609  3646	 3683  3720  3757 +
							   4496	 4509  4522  4535  4548	 4572  4604  4644  4920	 4933  4946  4959 +
							   4972	 4996  5029  5066  5103	 5140  5177  5214  #6399
_REBOOT			Near   ----:---- Extern		   1935	 #6385
_S@			Alias  S@			   #6436
_SEMBROADCAST		Near   ----:---- Extern		   5484	 #6374
_SEMCREATE		Near   ----:---- Extern		   4378	 5288  #6378
_SEMDESTROY		Near   ----:---- Extern		   4860	 #6375
_SEMDOWN		Near   ----:---- Extern		   4615	 4908  #6376
_SEMID			Word   _BSS:0016		   4614	 4710  #5504  6355
_SEMUP			Near   ----:---- Extern		   4802	 #6377
_SEM_APLIC		Near   _TEXT:12BC		   #4471  4728	6354
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 121
Symbol Table



_SETCOLOR		Near   ----:---- Extern		   148	159  182  192  206  228	 242  1378  1394  1573	1593  #6397
_STRCMP			Near   ----:---- Extern		   1117	 1659  3331  #6390
_STRCPY			Near   ----:---- Extern		   654	784  944  979  1046  1884  1899	 #6391
_STRLEN			Near   ----:---- Extern		   671	801  952  1815	1832  2512  2568  2624	2758  2815  2872  2929	  +
							   #6389
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2115	 2146  2175  2252  2285	 2316  3559  3596  3633	 3670  3707  3744 +
							   4591	 4631  5016  5053  5090	 5127  5164  5201  #6387
_VAR			Alias  VAR			   #6362
_WAIT			Near   ----:---- Extern		   4031	 #6382
_WAITPID		Near   ----:---- Extern		   3919	 #6381
_WHEREX			Near   ----:---- Extern		   1297	 #6396
_WHEREY			Near   ----:---- Extern		   1302	 #6395

Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  129	  +
							   133	137  141  165  175  185	 199  209  215	221  235  245  255  269	  +
							   272	280  283  396  431  439	 453  490  501	506  511  513  527  532	  +
							   549	554  556  560  565  580	 581  590  591	596  603  608  615  646	  +
							   649	652  660  669  687  691	 698  703  705	710  717  728  732  737	  +
							   742	743  748  770  776  779	 782  790  799	823  834  840  892  913	  +
							   917	923  942  950  973  977	 985  989  990	1038  1041  1044  1051	  +
							   1056	 1063  1068  1075  1081	 1086  1093  1114  1115	 1116  1147  1154 +
							   1174	 1188  1198  1233  1236	 1355  1435  1443  1452	 1472  1495  1547 +
							   1556	 1582  1655  1723  1731	 1735  1788  1882  1897	 1969  2007  2026 +
							   2038	 2407  2416  2475  2493	 2502  2510  2535  2544	 2556  2558  2566 +
							   2591	 2600  2612  2614  2622	 2647  2656  2668  2679	 2691  2698  2705 +
							   2712	 2719  2726  2734
  _BSS			16  0629 Word	Public	BSS	   12  #18  #2443  #5501
  _DATA			16  0C83 Word	Public	DATA	   12  #14  #22	 #3420	#5531
_TEXT			16  1782 Byte	Public	CODE	   #10	13  #103  107  1285  1342  1415	 1462  1519  1620  1687	 1752	  +
							   1802	 1917  1953  1985  2071	 2211  2352  2388  #2446  2450	2998  3086+
							   3233	 3304  #3428  3432  3782  3869	4002  4116  4329  4470	4670  4758+
							   4816	 4874  5239  5440  #6350
Turbo Assembler	 Version 3.1	    11/19/18 21:30:07	    Page 122
Error Summary



*Warning* command.ASM(3431) Reserved word used as symbol: EXITCODE
